/**
 * generated by Xtext 2.17.0
 */
package it.unibo.jcc.xtext.generator;

import com.google.common.base.Objects;
import it.unibo.jcc.xtext.generator.common.AgentExtensions;
import it.unibo.jcc.xtext.generator.common.GenUtils;
import it.unibo.jcc.xtext.simpleAgent.Action;
import it.unibo.jcc.xtext.simpleAgent.ActionBody;
import it.unibo.jcc.xtext.simpleAgent.AnyAction;
import it.unibo.jcc.xtext.simpleAgent.Behavior;
import it.unibo.jcc.xtext.simpleAgent.BehaviorDeclaration;
import it.unibo.jcc.xtext.simpleAgent.BehaviorExternal;
import it.unibo.jcc.xtext.simpleAgent.Compensation;
import it.unibo.jcc.xtext.simpleAgent.Context;
import it.unibo.jcc.xtext.simpleAgent.Message;
import it.unibo.jcc.xtext.simpleAgent.OnEffect;
import it.unibo.jcc.xtext.simpleAgent.PHead;
import java.util.Arrays;
import java.util.List;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.Conversions;
import org.eclipse.xtext.xbase.lib.Functions.Function1;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.eclipse.xtext.xbase.lib.ListExtensions;
import org.eclipse.xtext.xbase.lib.StringExtensions;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class SimpleAgentGenerator extends AbstractGenerator {
  /**
   * GENERATION
   */
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    GenUtils.setFsa(fsa);
    GenUtils.setFileExtension(resource.getURI().fileExtension());
    GenUtils.genFileDir(".", "", AgentExtensions.getAgentName(resource), "qak", this.generateSimpleAgent(resource));
  }
  
  public CharSequence generateSimpleAgent(final Resource resource) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("System ");
    String _systemName = AgentExtensions.getSystemName(resource);
    _builder.append(_systemName);
    _builder.newLineIfNotEmpty();
    String _mqttBroker = AgentExtensions.getMqttBroker(resource);
    _builder.append(_mqttBroker);
    _builder.newLineIfNotEmpty();
    CharSequence _genMessages = this.genMessages(resource);
    _builder.append(_genMessages);
    _builder.newLineIfNotEmpty();
    CharSequence _genContexts = this.genContexts(resource);
    _builder.append(_genContexts);
    _builder.newLineIfNotEmpty();
    CharSequence _genBehaviors = this.genBehaviors(resource);
    _builder.append(_genBehaviors);
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  public CharSequence genMessages(final Resource resource) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("// Commands for the worker");
    _builder.newLine();
    _builder.append("Dispatch setGoal\t   : setGoal(G)");
    _builder.newLine();
    _builder.append("Dispatch suspend\t   : suspend");
    _builder.newLine();
    _builder.append("Dispatch resume        : resume");
    _builder.newLine();
    _builder.append("// Events from the worker");
    _builder.newLine();
    _builder.append("Event goalReached      : goalReached");
    _builder.newLine();
    _builder.append("// User-defined messages");
    _builder.newLine();
    {
      EList<Message> _message = AgentExtensions.getAgent(resource).getSystem().getMessage();
      for(final Message message : _message) {
        String _stringContent = AgentExtensions.getStringContent(message);
        _builder.append(_stringContent);
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("// Action messages");
    _builder.newLine();
    CharSequence _genActionDispatches = this.genActionDispatches(AgentExtensions.getBehavior(resource));
    _builder.append(_genActionDispatches);
    _builder.newLineIfNotEmpty();
    _builder.append("// Infrastructure messages");
    _builder.newLine();
    _builder.append("Dispatch retry \t\t: retry");
    _builder.newLine();
    _builder.append("Dispatch replan \t: replan");
    _builder.newLine();
    _builder.append("Dispatch setGoal \t: setGoal");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence genContexts(final Resource resource) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("Context ");
    String _contextName = AgentExtensions.getContextName(resource);
    _builder.append(_contextName);
    _builder.append(" ip [host=\"");
    String _host = AgentExtensions.getHost(resource);
    _builder.append(_host);
    _builder.append("\" port=");
    int _port = AgentExtensions.getPort(resource);
    _builder.append(_port);
    _builder.append("] ");
    String _mqtt = AgentExtensions.getMqtt(resource);
    _builder.append(_mqtt);
    _builder.newLineIfNotEmpty();
    {
      EList<Context> _context = AgentExtensions.getAgent(resource).getSystem().getContext();
      for(final Context context : _context) {
        String _stringContent = AgentExtensions.getStringContent(context);
        _builder.append(_stringContent);
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder;
  }
  
  public CharSequence genBehaviors(final Resource resource) {
    StringConcatenation _builder = new StringConcatenation();
    {
      EList<BehaviorDeclaration> _behaviors = AgentExtensions.getAgent(resource).getBehaviors();
      for(final BehaviorDeclaration behavior : _behaviors) {
        CharSequence _genBehavior = this.genBehavior(behavior, AgentExtensions.getContextName(resource));
        _builder.append(_genBehavior);
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder;
  }
  
  protected CharSequence _genBehavior(final BehaviorDeclaration behavior, final String context) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("not here genBehavior");
    return _builder;
  }
  
  protected CharSequence _genBehavior(final BehaviorExternal behavior, final String context) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("ExternalQActor ");
    String _name = behavior.getName();
    _builder.append(_name);
    _builder.append(" context ");
    String _name_1 = behavior.getContext().getName();
    _builder.append(_name_1);
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  protected CharSequence _genBehavior(final Behavior behavior, final String context) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("QActor ");
    String _actorName = AgentExtensions.getActorName(behavior);
    _builder.append(_actorName);
    _builder.append(" context ");
    _builder.append(context);
    _builder.append(" {");
    _builder.newLineIfNotEmpty();
    _builder.append("[\"");
    _builder.newLine();
    _builder.newLine();
    _builder.append("var Curmove     = \\\"\\\" ");
    _builder.newLine();
    _builder.append("var suspended = false");
    _builder.newLine();
    _builder.newLine();
    _builder.append("var CurGoal = \\\"\\\"");
    _builder.newLine();
    _builder.newLine();
    _builder.append("var GoalSender = \\\"\\\"");
    _builder.newLine();
    _builder.newLine();
    _builder.append("//var CurGoalX = \\\"\\\"");
    _builder.newLine();
    _builder.append("//var CurGoalY = \\\"\\\"");
    _builder.newLine();
    _builder.newLine();
    {
      AnyAction _start = behavior.getStart();
      boolean _tripleNotEquals = (_start != null);
      if (_tripleNotEquals) {
        String _body = behavior.getStart().getBody();
        _builder.append(_body);
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.newLine();
    _builder.append("// From Planner declaration");
    _builder.newLine();
    _builder.append("val planner = ");
    String _replace = behavior.getPlanner().replace("^", "");
    _builder.append(_replace);
    _builder.append("()");
    _builder.newLineIfNotEmpty();
    _builder.append("\"]");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("State s0 initial {");
    _builder.newLine();
    {
      ActionBody _init = behavior.getInit();
      boolean _tripleNotEquals_1 = (_init != null);
      if (_tripleNotEquals_1) {
        _builder.append("\t\t");
        String _stringContent = AgentExtensions.getStringContent(behavior.getInit());
        _builder.append(_stringContent, "\t\t");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
        _builder.append("//solve( consult(\"moves.pl\") )");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("//run itunibo.planner.plannerUtil.initAI()");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("//run itunibo.planner.moveUtils.loadRoomMap( myself, mapname )");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("//run itunibo.planner.moveUtils.showCurrentRobotState()");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("//[\"val MapStr =  itunibo.planner.plannerUtil.getMapOneLine()\"]");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("//forward resourcemodel -m modelUpdate : modelUpdate(roomMap,$MapStr)");
        _builder.newLine();
      }
    }
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append(" \t");
    _builder.append("Goto waitGoal");
    _builder.newLine();
    _builder.append(" \t");
    _builder.newLine();
    _builder.append(" \t");
    _builder.append("State waitGoal {");
    _builder.newLine();
    _builder.append(" \t\t");
    _builder.append("println(\"Waiting for goal...\")\t");
    _builder.newLine();
    _builder.append(" \t");
    _builder.append("}");
    _builder.newLine();
    _builder.append(" \t");
    _builder.append("Transition setGoalT whenMsg setGoal -> setGoal");
    _builder.newLine();
    _builder.append("\t ");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("State setGoal {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("println(\"here in setGoal\")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("printCurrentMessage");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("onMsg( setGoal : setGoal(G) ) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("println(\"Received setGoal\")");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("[\"planner.planGoal(myself, payloadArg(0))\"]");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("//run itunibo.planner.plannerUtil.setGoal(payloadArg(0), payloadArg(1))");
    _builder.newLine();
    _builder.append("  \t\t\t");
    _builder.append("//run itunibo.planner.moveUtils.doPlan( myself )");
    _builder.newLine();
    _builder.append("  \t\t\t");
    _builder.append("// To allow replanning");
    _builder.newLine();
    _builder.append("  \t\t\t");
    _builder.append("[\"CurGoal = payloadArg(0)\"]");
    _builder.newLine();
    _builder.append("  \t\t\t");
    _builder.append("[\"GoalSender = currentMsg.msgSender()\"]");
    _builder.newLine();
    _builder.append("  \t\t\t");
    _builder.append("//[\"CurGoalX = payloadArg(0)\"]");
    _builder.newLine();
    _builder.append("  \t\t\t");
    _builder.append("//[\"CurGoalY = payloadArg(1)\"]");
    _builder.newLine();
    _builder.append(" \t\t\t");
    _builder.append("//solve( dialog(F) )");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("// TODO What if no plan can be calculated?");
    _builder.newLine();
    _builder.append("   \t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("   \t");
    _builder.append("Goto suspendOrExecute");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("//Goto executePlannedActions //doGoHomeActions ");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("State suspendOrExecute {}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("Transition checkSuspend ");
    _builder.newLine();
    _builder.append("\t   \t\t");
    _builder.append("whenTime 200 -> executePlannedActions");
    _builder.newLine();
    _builder.append("\t   \t\t");
    _builder.append("whenMsg suspend -> suspended\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("State suspended {");
    _builder.newLine();
    {
      ActionBody _onSuspended = behavior.getOnSuspended();
      boolean _tripleNotEquals_2 = (_onSuspended != null);
      if (_tripleNotEquals_2) {
        _builder.append("\t\t");
        String _stringContent_1 = AgentExtensions.getStringContent(behavior.getOnSuspended());
        _builder.append(_stringContent_1, "\t\t");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\t\t");
    _builder.append("// Send stop command");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("//forward resourcemodel -m modelChange : modelChange(robot,h)");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("//println(\"suspended\")\t\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("Transition resume whenMsg resume -> resume // suspendOrExecute ?");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("State resume {");
    _builder.newLine();
    {
      ActionBody _onResumed = behavior.getOnResumed();
      boolean _tripleNotEquals_3 = (_onResumed != null);
      if (_tripleNotEquals_3) {
        _builder.append("\t\t");
        String _stringContent_2 = AgentExtensions.getStringContent(behavior.getOnResumed());
        _builder.append(_stringContent_2, "\t\t");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("Goto executePlannedActions");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("State executePlannedActions{");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("//solve( showMoves ) ");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("// retract only after it\'s executed");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("solve( move(M) )");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("//solve( retract( move(M) ) )");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("ifSolved {  ");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("[\"Curmove = getCurSol(\\\"M\\\").toString()\"]");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("else { [\"Curmove = \\\"\\\"\"] } ");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("println(\"executePlannedActions doing $Curmove\")");
    _builder.newLine();
    _builder.append(" \t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("   ");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("Goto checkAndDoAction if \"(Curmove.length>0) \" else goalOk ");
    _builder.newLine();
    _builder.newLine();
    _builder.append(" \t");
    _builder.append("State goalOk{");
    _builder.newLine();
    {
      ActionBody _onSuspended_1 = behavior.getOnSuspended();
      boolean _tripleNotEquals_4 = (_onSuspended_1 != null);
      if (_tripleNotEquals_4) {
        _builder.append(" \t\t");
        String _stringContent_3 = AgentExtensions.getStringContent(behavior.getOnGoalReached());
        _builder.append(_stringContent_3, " \t\t");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append(" \t\t");
    _builder.append("//run itunibo.planner.moveUtils.showCurrentRobotState()");
    _builder.newLine();
    _builder.append("\t \t");
    _builder.append("//[\"\tval MapStr =  itunibo.planner.plannerUtil.getMapOneLine()  \"]");
    _builder.newLine();
    _builder.append("\t \t");
    _builder.append("//forward resourcemodel -m modelUpdate : modelUpdate(roomMap,$MapStr)");
    _builder.newLine();
    _builder.append("\t \t");
    _builder.newLine();
    _builder.append("\t \t");
    _builder.append("//emit goalReached : goalReached");
    _builder.newLine();
    _builder.append("\t \t");
    _builder.append("[\"forward(\\\"goalReached\\\", \\\"goalReached\\\", GoalSender)\"]");
    _builder.newLine();
    _builder.append(" \t");
    _builder.append("}");
    _builder.newLine();
    _builder.append(" \t");
    _builder.append("Goto waitGoal");
    _builder.newLine();
    _builder.append(" \t");
    _builder.newLine();
    _builder.append("\t");
    CharSequence _genCheckAndDoAction = this.genCheckAndDoAction(behavior);
    _builder.append(_genCheckAndDoAction, "\t");
    _builder.newLineIfNotEmpty();
    _builder.append("\t \t");
    _builder.newLine();
    _builder.append("\t");
    CharSequence _genActionStates = this.genActionStates(behavior);
    _builder.append(_genActionStates, "\t");
    _builder.newLineIfNotEmpty();
    _builder.append("\t \t");
    _builder.newLine();
    _builder.append("\t");
    CharSequence _genActionsOnStates = this.genActionsOnStates(behavior);
    _builder.append(_genActionsOnStates, "\t");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    CharSequence _genActionOnEffectCompensationStates = this.genActionOnEffectCompensationStates(behavior);
    _builder.append(_genActionOnEffectCompensationStates, "\t");
    _builder.newLineIfNotEmpty();
    _builder.append("\t \t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("State finalizeMove {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("// Move actually succeded");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("//[\"retryCount = 0\"]");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("solve( retract( move(M) ) )");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("Goto suspendOrExecute");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/*");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("State retry { // TODO Really needed?");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("//println(\"retry ${Curmove} in ${Tretry} ms\")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("//[\"retryCount++\"]");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("//\t\tprintln(\"MOVES BEFORE REASSERT\")");
    _builder.newLine();
    _builder.append("//\t\tsolve( showMoves ) ");
    _builder.newLine();
    _builder.append("//\t\tprintln(\"END MOVES BEFORE REASSERT\")");
    _builder.newLine();
    _builder.newLine();
    _builder.append("//\t\t// reassert current move");
    _builder.newLine();
    _builder.append("//\t\tsolve( assert( move($Curmove) ) )");
    _builder.newLine();
    _builder.append("//\t\t// ");
    _builder.newLine();
    _builder.append("//\t\tprintln(\"MOVES AFTER REASSERT\")");
    _builder.newLine();
    _builder.append("//\t\tsolve( showMoves ) ");
    _builder.newLine();
    _builder.append("//\t\tprintln(\"END MOVES AFTER REASSERT\")");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("//Transition t0 whenTimeVar Tretry -> suspendOrExecute");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("Goto suspendOrExecute");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("State replan {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("println(\"replanning\")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("//[\"retryCount = 0\"]");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("// Puts the obstacle on the map");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("//run itunibo.planner.moveUtils.setObstacleOnCurrentDirection(myself)");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("//run itunibo.planner.plannerUtil.showMap()  //");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("// Clear previous plan");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("solve( retractall( move(M) ) )");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("forward ");
    String _actorName_1 = AgentExtensions.getActorName(behavior);
    _builder.append(_actorName_1, "\t\t");
    _builder.append(" -m setGoal : setGoal($CurGoal)");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("Transition t0 whenMsg setGoal -> setGoal");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence genActionsOnStates(final Behavior behavior) {
    StringConcatenation _builder = new StringConcatenation();
    {
      EList<Action> _actions = behavior.getActions();
      for(final Action action : _actions) {
        CharSequence _genActionOnStates = this.genActionOnStates(AgentExtensions.getActorName(behavior), action);
        _builder.append(_genActionOnStates);
      }
    }
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence genActionOnStates(final String actorName, final Action action) {
    StringConcatenation _builder = new StringConcatenation();
    {
      EList<OnEffect> _on = action.getOn();
      for(final OnEffect on : _on) {
        final Function1<PHead, String> _function = new Function1<PHead, String>() {
          public String apply(final PHead it) {
            return AgentExtensions.getHead(it);
          }
        };
        CharSequence _genActionOnState = this.genActionOnState(actorName, IterableExtensions.join(ListExtensions.<PHead, String>map(IterableExtensions.<PHead>toList(action.getActions()), _function), "_"), on);
        _builder.append(_genActionOnState);
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder;
  }
  
  public CharSequence genActionOnState(final String actorName, final String actionName, final OnEffect on) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("State ");
    _builder.append(actionName);
    _builder.append("_on");
    String _firstUpper = StringExtensions.toFirstUpper(on.getEffect().getName());
    _builder.append(_firstUpper);
    _builder.append("{ // TODO HANDLE MESSAGE NAMES BETTER!!!");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("// from \"agent\" code");
    _builder.newLine();
    _builder.append("\t");
    String _stringContent = AgentExtensions.getStringContent(on.getBody());
    _builder.append(_stringContent, "\t");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("// TODO Check consistency with QActor guarded transitions policy");
    _builder.newLine();
    {
      int _size = on.getCompensations().size();
      boolean _greaterThan = (_size > 0);
      if (_greaterThan) {
        _builder.append("\t");
        CharSequence _genCompensationCondition = this.genCompensationCondition(actorName, on.getCompensations().get(0), true);
        _builder.append(_genCompensationCondition, "\t");
        _builder.newLineIfNotEmpty();
        {
          int _size_1 = on.getCompensations().size();
          boolean _greaterThan_1 = (_size_1 > 1);
          if (_greaterThan_1) {
            {
              List<Compensation> _subList = on.getCompensations().subList(1, ((Object[])Conversions.unwrapArray(on.getCompensations(), Object.class)).length);
              for(final Compensation compensation : _subList) {
                _builder.append("\t");
                CharSequence _genCompensationCondition_1 = this.genCompensationCondition(actorName, compensation, false);
                _builder.append(_genCompensationCondition_1, "\t");
                _builder.newLineIfNotEmpty();
              }
            }
          }
        }
      }
    }
    _builder.append("}");
    _builder.newLine();
    {
      int _size_2 = on.getCompensations().size();
      boolean _greaterThan_2 = (_size_2 > 0);
      if (_greaterThan_2) {
        _builder.append("Transition compensation");
        _builder.newLine();
        _builder.append("\t");
        CharSequence _genCompensationTransitions = this.genCompensationTransitions(actionName, on);
        _builder.append(_genCompensationTransitions, "\t");
        _builder.newLineIfNotEmpty();
      } else {
        _builder.append("Goto finalizeMove");
        _builder.newLine();
      }
    }
    return _builder;
  }
  
  public CharSequence genActionOnEffectCompensationStates(final Behavior behavior) {
    StringConcatenation _builder = new StringConcatenation();
    {
      EList<Action> _actions = behavior.getActions();
      for(final Action action : _actions) {
        {
          EList<OnEffect> _on = action.getOn();
          for(final OnEffect on : _on) {
            {
              EList<Compensation> _compensations = on.getCompensations();
              for(final Compensation compensation : _compensations) {
                final Function1<PHead, String> _function = new Function1<PHead, String>() {
                  public String apply(final PHead it) {
                    return AgentExtensions.getHead(it);
                  }
                };
                CharSequence _genActionOnEffectCompensationState = this.genActionOnEffectCompensationState(AgentExtensions.getActorName(behavior), IterableExtensions.join(ListExtensions.<PHead, String>map(IterableExtensions.<PHead>toList(action.getActions()), _function), "_"), compensation);
                _builder.append(_genActionOnEffectCompensationState);
                _builder.newLineIfNotEmpty();
                _builder.newLine();
              }
            }
          }
        }
      }
    }
    return _builder;
  }
  
  public CharSequence genActionOnEffectCompensationState(final String actorName, final String actionName, final Compensation compensation) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("State ");
    _builder.append(actionName);
    _builder.append("_");
    String _type = compensation.getType();
    _builder.append(_type);
    _builder.append(" { // TODO Currently only one compensation per type allowed (specify in grammar?)");
    _builder.newLineIfNotEmpty();
    {
      ActionBody _body = compensation.getBody();
      boolean _tripleNotEquals = (_body != null);
      if (_tripleNotEquals) {
        _builder.append("\t");
        String _stringContent = AgentExtensions.getStringContent(compensation.getBody());
        _builder.append(_stringContent, "\t");
        _builder.newLineIfNotEmpty();
      }
    }
    {
      String _type_1 = compensation.getType();
      boolean _notEquals = (!Objects.equal(_type_1, "retry"));
      if (_notEquals) {
        _builder.append("\t");
        _builder.append("// Clear previous plan");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("solve( retractall( move(M) ) )");
        _builder.newLine();
        {
          String _type_2 = compensation.getType();
          boolean _equals = Objects.equal(_type_2, "replan");
          if (_equals) {
            _builder.append("\t");
            _builder.append("forward ");
            _builder.append(actorName, "\t");
            _builder.append(" -m setGoal : setGoal($CurGoal)");
            _builder.newLineIfNotEmpty();
          } else {
            _builder.append("\t");
            _builder.append("forward ");
            _builder.append(actorName, "\t");
            _builder.append(" -m setGoal : setGoal(");
            String _goal = compensation.getGoal();
            _builder.append(_goal, "\t");
            _builder.append(")");
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    _builder.append("}");
    _builder.newLine();
    {
      String _type_3 = compensation.getType();
      boolean _equals_1 = Objects.equal(_type_3, "retry");
      if (_equals_1) {
        _builder.append("Goto suspendOrExecute");
        _builder.newLine();
      } else {
        _builder.append("Transition t0 whenMsg setGoal -> setGoal");
        _builder.newLine();
      }
    }
    return _builder;
  }
  
  public CharSequence genCompensationCondition(final String actorName, final Compensation compensation, final boolean first) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("[\"");
    {
      if ((!first)) {
        _builder.append("else ");
      }
    }
    _builder.append("if (");
    String _condition = compensation.getCondition();
    _builder.append(_condition);
    _builder.append(") {\"]");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("forward ");
    _builder.append(actorName, "\t");
    _builder.append(" -m ");
    String _type = compensation.getType();
    _builder.append(_type, "\t");
    _builder.append(" : ");
    String _type_1 = compensation.getType();
    _builder.append(_type_1, "\t");
    _builder.newLineIfNotEmpty();
    _builder.append("[\"}\"]");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence genCompensationTransitions(final String actionName, final OnEffect on) {
    StringConcatenation _builder = new StringConcatenation();
    {
      EList<Compensation> _compensations = on.getCompensations();
      for(final Compensation compensation : _compensations) {
        CharSequence _genCompensationTransition = this.genCompensationTransition(actionName, compensation);
        _builder.append(_genCompensationTransition);
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder;
  }
  
  public CharSequence genCompensationTransition(final String actionName, final Compensation compensation) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("whenMsg ");
    String _type = compensation.getType();
    _builder.append(_type);
    _builder.append("  -> ");
    _builder.append(actionName);
    _builder.append("_");
    String _type_1 = compensation.getType();
    _builder.append(_type_1);
    _builder.append(" // TODO Handles only one compensation per ACTION (on a single Effect)!!!");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  public CharSequence genActionStates(final Behavior behavior) {
    StringConcatenation _builder = new StringConcatenation();
    {
      EList<Action> _actions = behavior.getActions();
      for(final Action action : _actions) {
        CharSequence _genActionState = this.genActionState(action);
        _builder.append(_genActionState);
      }
    }
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence genActionState(final Action action) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("State ");
    final Function1<PHead, String> _function = new Function1<PHead, String>() {
      public String apply(final PHead it) {
        return AgentExtensions.getHead(it);
      }
    };
    String _join = IterableExtensions.join(ListExtensions.<PHead, String>map(IterableExtensions.<PHead>toList(action.getActions()), _function), "_");
    _builder.append(_join);
    _builder.append(" {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    CharSequence _genActionOnMsgs = this.genActionOnMsgs(action);
    _builder.append(_genActionOnMsgs, "\t");
    _builder.newLineIfNotEmpty();
    _builder.append("}");
    _builder.newLine();
    {
      int _size = action.getOn().size();
      boolean _greaterThan = (_size > 0);
      if (_greaterThan) {
        _builder.append("Transition t0");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("// from \"on(...)\" clauses on action w");
        _builder.newLine();
        _builder.append("\t");
        {
          EList<OnEffect> _on = action.getOn();
          for(final OnEffect on : _on) {
            final Function1<PHead, String> _function_1 = new Function1<PHead, String>() {
              public String apply(final PHead it) {
                return AgentExtensions.getHead(it);
              }
            };
            CharSequence _actionStateTransition = this.getActionStateTransition(IterableExtensions.join(ListExtensions.<PHead, String>map(IterableExtensions.<PHead>toList(action.getActions()), _function_1), "_"), on);
            _builder.append(_actionStateTransition, "\t");
          }
        }
        _builder.newLineIfNotEmpty();
      } else {
        _builder.append("Goto finalizeMove // No \"on(...)\" clause specified");
        _builder.newLine();
      }
    }
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence genActionOnMsgs(final Action action) {
    StringConcatenation _builder = new StringConcatenation();
    {
      EList<PHead> _actions = action.getActions();
      for(final PHead phead : _actions) {
        _builder.append("onMsg(");
        String _head = AgentExtensions.getHead(phead);
        _builder.append(_head);
        _builder.append(" : ");
        String _stringContent = AgentExtensions.getStringContent(phead);
        _builder.append(_stringContent);
        _builder.append(") { // TODO Better handling of multiple actions!");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("// from \"agent\" code");
        _builder.newLine();
        _builder.append("\t");
        String _stringContent_1 = AgentExtensions.getStringContent(action.getBody());
        _builder.append(_stringContent_1, "\t");
        _builder.newLineIfNotEmpty();
        _builder.append("}");
        _builder.newLine();
      }
    }
    return _builder;
  }
  
  public CharSequence getActionStateTransition(final String actionName, final OnEffect on) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("whenMsg ");
    String _name = on.getEffect().getName();
    _builder.append(_name);
    _builder.append("\t-> ");
    _builder.append(actionName);
    _builder.append("_on");
    String _firstUpper = StringExtensions.toFirstUpper(on.getEffect().getName());
    _builder.append(_firstUpper);
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  public CharSequence genCheckAndDoAction(final Behavior behavior) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("State checkAndDoAction{");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("solve( assert( curmove($Curmove) ) )");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("//[\"when (Curmove) {\"]");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("// TODO Assuming only one solves");
    _builder.newLine();
    {
      EList<Action> _actions = behavior.getActions();
      for(final Action action : _actions) {
        _builder.append("\t");
        CharSequence _genActionCase = this.genActionCase(action, AgentExtensions.getActorName(behavior));
        _builder.append(_genActionCase, "\t");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\t");
    _builder.append("solve( retract( curmove($Curmove) ) )");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("//[\"}\"]");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.append("Transition t0 ");
    _builder.newLine();
    _builder.append("\t");
    {
      EList<Action> _actions_1 = behavior.getActions();
      for(final Action action_1 : _actions_1) {
        CharSequence _genActionTransitions = this.genActionTransitions(action_1);
        _builder.append(_genActionTransitions, "\t");
      }
    }
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  public CharSequence genActionTransitions(final String actionMessageName, final String actionStateName) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("whenMsg ");
    _builder.append(actionMessageName);
    _builder.append(" -> ");
    _builder.append(actionStateName);
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  public CharSequence genActionTransitions(final Action action) {
    StringConcatenation _builder = new StringConcatenation();
    {
      EList<PHead> _actions = action.getActions();
      for(final PHead phead : _actions) {
        _builder.append("whenMsg ");
        String _head = AgentExtensions.getHead(phead);
        _builder.append(_head);
        _builder.append(" -> ");
        final Function1<PHead, String> _function = new Function1<PHead, String>() {
          public String apply(final PHead it) {
            return AgentExtensions.getHead(it);
          }
        };
        String _join = IterableExtensions.join(ListExtensions.<PHead, String>map(IterableExtensions.<PHead>toList(action.getActions()), _function), "_");
        _builder.append(_join);
        _builder.append(" // TODO Better handling of multiple actions!");
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder;
  }
  
  public CharSequence genActionCase(final Action action, final String agentName) {
    StringConcatenation _builder = new StringConcatenation();
    {
      EList<PHead> _actions = action.getActions();
      for(final PHead phead : _actions) {
        _builder.append("//[\"\t\\\"");
        String _head = AgentExtensions.getHead(phead);
        _builder.append(_head);
        _builder.append("\\\" -> \"]");
        _builder.newLineIfNotEmpty();
        _builder.append("solve( curmove( ");
        String _stringContent = AgentExtensions.getStringContent(phead);
        _builder.append(_stringContent);
        _builder.append(" ) )");
        _builder.newLineIfNotEmpty();
        _builder.append("ifSolved {");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("forward ");
        _builder.append(agentName, "\t");
        _builder.append(" -m ");
        String _head_1 = AgentExtensions.getHead(phead);
        _builder.append(_head_1, "\t");
        _builder.append(" : $Curmove");
        _builder.newLineIfNotEmpty();
        _builder.append("} // TODO else?");
        _builder.newLine();
      }
    }
    return _builder;
  }
  
  public CharSequence genActionDispatches(final Behavior behavior) {
    StringConcatenation _builder = new StringConcatenation();
    {
      EList<Action> _actions = behavior.getActions();
      for(final Action action : _actions) {
        CharSequence _genActionDispatches = this.genActionDispatches(action);
        _builder.append(_genActionDispatches);
      }
    }
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  public CharSequence genActionDispatches(final Action action) {
    StringConcatenation _builder = new StringConcatenation();
    {
      EList<PHead> _actions = action.getActions();
      for(final PHead phead : _actions) {
        _builder.append("Dispatch ");
        String _head = AgentExtensions.getHead(phead);
        _builder.append(_head);
        _builder.append(" \t   : ");
        String _stringContent = AgentExtensions.getStringContent(phead);
        _builder.append(_stringContent);
        _builder.append(" // TODO Better handling of multiple actions!");
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder;
  }
  
  public CharSequence genBehavior(final BehaviorDeclaration behavior, final String context) {
    if (behavior instanceof Behavior) {
      return _genBehavior((Behavior)behavior, context);
    } else if (behavior instanceof BehaviorExternal) {
      return _genBehavior((BehaviorExternal)behavior, context);
    } else if (behavior != null) {
      return _genBehavior(behavior, context);
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(behavior, context).toString());
    }
  }
}
