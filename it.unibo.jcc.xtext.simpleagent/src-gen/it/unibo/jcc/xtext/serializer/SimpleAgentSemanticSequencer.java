/*
 * generated by Xtext 2.18.0.M3
 */
package it.unibo.jcc.xtext.serializer;

import com.google.inject.Inject;
import it.unibo.jcc.xtext.services.SimpleAgentGrammarAccess;
import it.unibo.jcc.xtext.simpleAgent.ActionBody;
import it.unibo.jcc.xtext.simpleAgent.AnyAction;
import it.unibo.jcc.xtext.simpleAgent.Behavior;
import it.unibo.jcc.xtext.simpleAgent.BehaviorExternal;
import it.unibo.jcc.xtext.simpleAgent.BrokerSpec;
import it.unibo.jcc.xtext.simpleAgent.CodeRunActor;
import it.unibo.jcc.xtext.simpleAgent.CodeRunArg;
import it.unibo.jcc.xtext.simpleAgent.CodeRunSimple;
import it.unibo.jcc.xtext.simpleAgent.Compensation;
import it.unibo.jcc.xtext.simpleAgent.ComponentIP;
import it.unibo.jcc.xtext.simpleAgent.Context;
import it.unibo.jcc.xtext.simpleAgent.DelayInt;
import it.unibo.jcc.xtext.simpleAgent.DelaySol;
import it.unibo.jcc.xtext.simpleAgent.DelayVar;
import it.unibo.jcc.xtext.simpleAgent.DelayVref;
import it.unibo.jcc.xtext.simpleAgent.Dispatch;
import it.unibo.jcc.xtext.simpleAgent.Emit;
import it.unibo.jcc.xtext.simpleAgent.Event;
import it.unibo.jcc.xtext.simpleAgent.Exec;
import it.unibo.jcc.xtext.simpleAgent.Forward;
import it.unibo.jcc.xtext.simpleAgent.GuardedStateAction;
import it.unibo.jcc.xtext.simpleAgent.Invitation;
import it.unibo.jcc.xtext.simpleAgent.MsgCond;
import it.unibo.jcc.xtext.simpleAgent.NoMsgCond;
import it.unibo.jcc.xtext.simpleAgent.OnEffect;
import it.unibo.jcc.xtext.simpleAgent.PAtomNum;
import it.unibo.jcc.xtext.simpleAgent.PAtomString;
import it.unibo.jcc.xtext.simpleAgent.PAtomic;
import it.unibo.jcc.xtext.simpleAgent.PStruct;
import it.unibo.jcc.xtext.simpleAgent.PStructRef;
import it.unibo.jcc.xtext.simpleAgent.Print;
import it.unibo.jcc.xtext.simpleAgent.PrintCurMsg;
import it.unibo.jcc.xtext.simpleAgent.QActorSystemSpec;
import it.unibo.jcc.xtext.simpleAgent.Request;
import it.unibo.jcc.xtext.simpleAgent.Signal;
import it.unibo.jcc.xtext.simpleAgent.SimpleAgent;
import it.unibo.jcc.xtext.simpleAgent.SimpleAgentPackage;
import it.unibo.jcc.xtext.simpleAgent.SolveGoal;
import it.unibo.jcc.xtext.simpleAgent.Token;
import it.unibo.jcc.xtext.simpleAgent.VarRef;
import it.unibo.jcc.xtext.simpleAgent.VarRefInStr;
import it.unibo.jcc.xtext.simpleAgent.VarSolRef;
import it.unibo.jcc.xtext.simpleAgent.Variable;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class SimpleAgentSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private SimpleAgentGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == SimpleAgentPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case SimpleAgentPackage.ACTION:
				sequence_Action(context, (it.unibo.jcc.xtext.simpleAgent.Action) semanticObject); 
				return; 
			case SimpleAgentPackage.ACTION_BODY:
				sequence_ActionBody(context, (ActionBody) semanticObject); 
				return; 
			case SimpleAgentPackage.ANY_ACTION:
				sequence_AnyAction(context, (AnyAction) semanticObject); 
				return; 
			case SimpleAgentPackage.BEHAVIOR:
				sequence_Behavior(context, (Behavior) semanticObject); 
				return; 
			case SimpleAgentPackage.BEHAVIOR_EXTERNAL:
				sequence_BehaviorExternal(context, (BehaviorExternal) semanticObject); 
				return; 
			case SimpleAgentPackage.BROKER_SPEC:
				sequence_BrokerSpec(context, (BrokerSpec) semanticObject); 
				return; 
			case SimpleAgentPackage.CODE_RUN_ACTOR:
				sequence_CodeRunActor(context, (CodeRunActor) semanticObject); 
				return; 
			case SimpleAgentPackage.CODE_RUN_ARG:
				sequence_CodeRunArg(context, (CodeRunArg) semanticObject); 
				return; 
			case SimpleAgentPackage.CODE_RUN_SIMPLE:
				sequence_CodeRunSimple(context, (CodeRunSimple) semanticObject); 
				return; 
			case SimpleAgentPackage.COMPENSATION:
				sequence_Compensation(context, (Compensation) semanticObject); 
				return; 
			case SimpleAgentPackage.COMPONENT_IP:
				sequence_ComponentIP(context, (ComponentIP) semanticObject); 
				return; 
			case SimpleAgentPackage.CONTEXT:
				sequence_Context(context, (Context) semanticObject); 
				return; 
			case SimpleAgentPackage.DELAY_INT:
				sequence_DelayInt(context, (DelayInt) semanticObject); 
				return; 
			case SimpleAgentPackage.DELAY_SOL:
				sequence_DelaySol(context, (DelaySol) semanticObject); 
				return; 
			case SimpleAgentPackage.DELAY_VAR:
				sequence_DelayVar(context, (DelayVar) semanticObject); 
				return; 
			case SimpleAgentPackage.DELAY_VREF:
				sequence_DelayVref(context, (DelayVref) semanticObject); 
				return; 
			case SimpleAgentPackage.DISPATCH:
				sequence_Dispatch(context, (Dispatch) semanticObject); 
				return; 
			case SimpleAgentPackage.EMIT:
				sequence_Emit(context, (Emit) semanticObject); 
				return; 
			case SimpleAgentPackage.EVENT:
				sequence_Event(context, (Event) semanticObject); 
				return; 
			case SimpleAgentPackage.EXEC:
				sequence_Exec(context, (Exec) semanticObject); 
				return; 
			case SimpleAgentPackage.FORWARD:
				sequence_Forward(context, (Forward) semanticObject); 
				return; 
			case SimpleAgentPackage.GUARDED_STATE_ACTION:
				sequence_GuardedStateAction(context, (GuardedStateAction) semanticObject); 
				return; 
			case SimpleAgentPackage.INVITATION:
				sequence_Invitation(context, (Invitation) semanticObject); 
				return; 
			case SimpleAgentPackage.MSG_COND:
				sequence_MsgCond(context, (MsgCond) semanticObject); 
				return; 
			case SimpleAgentPackage.NO_MSG_COND:
				sequence_NoMsgCond(context, (NoMsgCond) semanticObject); 
				return; 
			case SimpleAgentPackage.ON_EFFECT:
				sequence_OnEffect(context, (OnEffect) semanticObject); 
				return; 
			case SimpleAgentPackage.PATOM_NUM:
				sequence_PAtomNum(context, (PAtomNum) semanticObject); 
				return; 
			case SimpleAgentPackage.PATOM_STRING:
				sequence_PAtomString(context, (PAtomString) semanticObject); 
				return; 
			case SimpleAgentPackage.PATOMIC:
				sequence_PAtomic(context, (PAtomic) semanticObject); 
				return; 
			case SimpleAgentPackage.PSTRUCT:
				sequence_PStruct(context, (PStruct) semanticObject); 
				return; 
			case SimpleAgentPackage.PSTRUCT_REF:
				sequence_PStructRef(context, (PStructRef) semanticObject); 
				return; 
			case SimpleAgentPackage.PRINT:
				sequence_Print(context, (Print) semanticObject); 
				return; 
			case SimpleAgentPackage.PRINT_CUR_MSG:
				sequence_PrintCurMsg(context, (PrintCurMsg) semanticObject); 
				return; 
			case SimpleAgentPackage.QACTOR_SYSTEM_SPEC:
				sequence_QActorSystemSpec(context, (QActorSystemSpec) semanticObject); 
				return; 
			case SimpleAgentPackage.REQUEST:
				sequence_Request(context, (Request) semanticObject); 
				return; 
			case SimpleAgentPackage.SIGNAL:
				sequence_Signal(context, (Signal) semanticObject); 
				return; 
			case SimpleAgentPackage.SIMPLE_AGENT:
				sequence_SimpleAgent(context, (SimpleAgent) semanticObject); 
				return; 
			case SimpleAgentPackage.SOLVE_GOAL:
				sequence_SolveGoal(context, (SolveGoal) semanticObject); 
				return; 
			case SimpleAgentPackage.TOKEN:
				sequence_Token(context, (Token) semanticObject); 
				return; 
			case SimpleAgentPackage.VAR_REF:
				sequence_VarRef(context, (VarRef) semanticObject); 
				return; 
			case SimpleAgentPackage.VAR_REF_IN_STR:
				sequence_VarRefInStr(context, (VarRefInStr) semanticObject); 
				return; 
			case SimpleAgentPackage.VAR_SOL_REF:
				sequence_VarSolRef(context, (VarSolRef) semanticObject); 
				return; 
			case SimpleAgentPackage.VARIABLE:
				sequence_Variable(context, (Variable) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     ActionBody returns ActionBody
	 *
	 * Constraint:
	 *     instructions+=GuardedStateAction*
	 */
	protected void sequence_ActionBody(ISerializationContext context, ActionBody semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Action returns Action
	 *
	 * Constraint:
	 *     (actions+=PHead actions+=PHead* body=ActionBody on+=OnEffect*)
	 */
	protected void sequence_Action(ISerializationContext context, it.unibo.jcc.xtext.simpleAgent.Action semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     StateAction returns AnyAction
	 *     AnyAction returns AnyAction
	 *
	 * Constraint:
	 *     body=STRING
	 */
	protected void sequence_AnyAction(ISerializationContext context, AnyAction semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SimpleAgentPackage.Literals.ANY_ACTION__BODY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SimpleAgentPackage.Literals.ANY_ACTION__BODY));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAnyActionAccess().getBodySTRINGTerminalRuleCall_1_0(), semanticObject.getBody());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     BehaviorDeclaration returns BehaviorExternal
	 *     BehaviorExternal returns BehaviorExternal
	 *
	 * Constraint:
	 *     (name=ID context=[Context|ID])
	 */
	protected void sequence_BehaviorExternal(ISerializationContext context, BehaviorExternal semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SimpleAgentPackage.Literals.BEHAVIOR_DECLARATION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SimpleAgentPackage.Literals.BEHAVIOR_DECLARATION__NAME));
			if (transientValues.isValueTransient(semanticObject, SimpleAgentPackage.Literals.BEHAVIOR_EXTERNAL__CONTEXT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SimpleAgentPackage.Literals.BEHAVIOR_EXTERNAL__CONTEXT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getBehaviorExternalAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getBehaviorExternalAccess().getContextContextIDTerminalRuleCall_3_0_1(), semanticObject.eGet(SimpleAgentPackage.Literals.BEHAVIOR_EXTERNAL__CONTEXT, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     BehaviorDeclaration returns Behavior
	 *     Behavior returns Behavior
	 *
	 * Constraint:
	 *     (
	 *         name=ID 
	 *         planner=QualifiedName 
	 *         start=AnyAction? 
	 *         init=ActionBody? 
	 *         actions+=Action* 
	 *         onGoalReached=ActionBody? 
	 *         onSuspended=ActionBody? 
	 *         onResumed=ActionBody?
	 *     )
	 */
	protected void sequence_Behavior(ISerializationContext context, Behavior semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     BrokerSpec returns BrokerSpec
	 *
	 * Constraint:
	 *     (brokerHost=STRING brokerPort=INT)
	 */
	protected void sequence_BrokerSpec(ISerializationContext context, BrokerSpec semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SimpleAgentPackage.Literals.BROKER_SPEC__BROKER_HOST) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SimpleAgentPackage.Literals.BROKER_SPEC__BROKER_HOST));
			if (transientValues.isValueTransient(semanticObject, SimpleAgentPackage.Literals.BROKER_SPEC__BROKER_PORT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SimpleAgentPackage.Literals.BROKER_SPEC__BROKER_PORT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getBrokerSpecAccess().getBrokerHostSTRINGTerminalRuleCall_1_0(), semanticObject.getBrokerHost());
		feeder.accept(grammarAccess.getBrokerSpecAccess().getBrokerPortINTTerminalRuleCall_3_0(), semanticObject.getBrokerPort());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     StateAction returns CodeRunActor
	 *     CodeRun returns CodeRunActor
	 *     CodeRunActor returns CodeRunActor
	 *
	 * Constraint:
	 *     (item=QualifiedName (args+=CodeRunArg args+=CodeRunArg*)?)
	 */
	protected void sequence_CodeRunActor(ISerializationContext context, CodeRunActor semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     CodeRunArg returns CodeRunArg
	 *
	 * Constraint:
	 *     {CodeRunArg}
	 */
	protected void sequence_CodeRunArg(ISerializationContext context, CodeRunArg semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     StateAction returns CodeRunSimple
	 *     CodeRun returns CodeRunSimple
	 *     CodeRunSimple returns CodeRunSimple
	 *
	 * Constraint:
	 *     (item=QualifiedName (args+=CodeRunArg args+=CodeRunArg*)?)
	 */
	protected void sequence_CodeRunSimple(ISerializationContext context, CodeRunSimple semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Compensation returns Compensation
	 *
	 * Constraint:
	 *     (
	 *         (type='retry' condition=STRING body=ActionBody?) | 
	 *         (type='replan' condition=STRING body=ActionBody?) | 
	 *         (type='setGoal' goal=STRING condition=STRING body=ActionBody?)
	 *     )
	 */
	protected void sequence_Compensation(ISerializationContext context, Compensation semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ComponentIP returns ComponentIP
	 *
	 * Constraint:
	 *     (host=STRING port=INT)
	 */
	protected void sequence_ComponentIP(ISerializationContext context, ComponentIP semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SimpleAgentPackage.Literals.COMPONENT_IP__HOST) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SimpleAgentPackage.Literals.COMPONENT_IP__HOST));
			if (transientValues.isValueTransient(semanticObject, SimpleAgentPackage.Literals.COMPONENT_IP__PORT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SimpleAgentPackage.Literals.COMPONENT_IP__PORT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getComponentIPAccess().getHostSTRINGTerminalRuleCall_3_0(), semanticObject.getHost());
		feeder.accept(grammarAccess.getComponentIPAccess().getPortINTTerminalRuleCall_5_0(), semanticObject.getPort());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Context returns Context
	 *
	 * Constraint:
	 *     (name=ID ip=ComponentIP mqtt?='-mqtt'?)
	 */
	protected void sequence_Context(ISerializationContext context, Context semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     StateAction returns DelayInt
	 *     Delay returns DelayInt
	 *     DelayInt returns DelayInt
	 *
	 * Constraint:
	 *     time=INT
	 */
	protected void sequence_DelayInt(ISerializationContext context, DelayInt semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SimpleAgentPackage.Literals.DELAY_INT__TIME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SimpleAgentPackage.Literals.DELAY_INT__TIME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDelayIntAccess().getTimeINTTerminalRuleCall_1_0(), semanticObject.getTime());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     StateAction returns DelaySol
	 *     Delay returns DelaySol
	 *     DelaySol returns DelaySol
	 *
	 * Constraint:
	 *     refsoltime=VarSolRef
	 */
	protected void sequence_DelaySol(ISerializationContext context, DelaySol semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SimpleAgentPackage.Literals.DELAY_SOL__REFSOLTIME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SimpleAgentPackage.Literals.DELAY_SOL__REFSOLTIME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDelaySolAccess().getRefsoltimeVarSolRefParserRuleCall_1_0(), semanticObject.getRefsoltime());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     StateAction returns DelayVar
	 *     Delay returns DelayVar
	 *     DelayVar returns DelayVar
	 *
	 * Constraint:
	 *     refvar=Variable
	 */
	protected void sequence_DelayVar(ISerializationContext context, DelayVar semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SimpleAgentPackage.Literals.DELAY_VAR__REFVAR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SimpleAgentPackage.Literals.DELAY_VAR__REFVAR));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDelayVarAccess().getRefvarVariableParserRuleCall_1_0(), semanticObject.getRefvar());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     StateAction returns DelayVref
	 *     Delay returns DelayVref
	 *     DelayVref returns DelayVref
	 *
	 * Constraint:
	 *     reftime=VarRef
	 */
	protected void sequence_DelayVref(ISerializationContext context, DelayVref semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SimpleAgentPackage.Literals.DELAY_VREF__REFTIME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SimpleAgentPackage.Literals.DELAY_VREF__REFTIME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDelayVrefAccess().getReftimeVarRefParserRuleCall_1_0(), semanticObject.getReftime());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Message returns Dispatch
	 *     OutOnlyMessage returns Dispatch
	 *     Dispatch returns Dispatch
	 *
	 * Constraint:
	 *     (name=ID msg=PHead)
	 */
	protected void sequence_Dispatch(ISerializationContext context, Dispatch semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SimpleAgentPackage.Literals.MESSAGE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SimpleAgentPackage.Literals.MESSAGE__NAME));
			if (transientValues.isValueTransient(semanticObject, SimpleAgentPackage.Literals.MESSAGE__MSG) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SimpleAgentPackage.Literals.MESSAGE__MSG));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDispatchAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getDispatchAccess().getMsgPHeadParserRuleCall_3_0(), semanticObject.getMsg());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     StateAction returns Emit
	 *     Emit returns Emit
	 *
	 * Constraint:
	 *     (msgref=[Event|ID] val=PHead)
	 */
	protected void sequence_Emit(ISerializationContext context, Emit semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SimpleAgentPackage.Literals.EMIT__MSGREF) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SimpleAgentPackage.Literals.EMIT__MSGREF));
			if (transientValues.isValueTransient(semanticObject, SimpleAgentPackage.Literals.EMIT__VAL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SimpleAgentPackage.Literals.EMIT__VAL));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEmitAccess().getMsgrefEventIDTerminalRuleCall_1_0_1(), semanticObject.eGet(SimpleAgentPackage.Literals.EMIT__MSGREF, false));
		feeder.accept(grammarAccess.getEmitAccess().getValPHeadParserRuleCall_3_0(), semanticObject.getVal());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Message returns Event
	 *     OutOnlyMessage returns Event
	 *     Event returns Event
	 *
	 * Constraint:
	 *     (name=ID msg=PHead)
	 */
	protected void sequence_Event(ISerializationContext context, Event semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SimpleAgentPackage.Literals.MESSAGE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SimpleAgentPackage.Literals.MESSAGE__NAME));
			if (transientValues.isValueTransient(semanticObject, SimpleAgentPackage.Literals.MESSAGE__MSG) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SimpleAgentPackage.Literals.MESSAGE__MSG));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEventAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getEventAccess().getMsgPHeadParserRuleCall_3_0(), semanticObject.getMsg());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     StateAction returns Exec
	 *     Exec returns Exec
	 *
	 * Constraint:
	 *     action=STRING
	 */
	protected void sequence_Exec(ISerializationContext context, Exec semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SimpleAgentPackage.Literals.EXEC__ACTION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SimpleAgentPackage.Literals.EXEC__ACTION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getExecAccess().getActionSTRINGTerminalRuleCall_1_0(), semanticObject.getAction());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     StateAction returns Forward
	 *     Forward returns Forward
	 *
	 * Constraint:
	 *     (dest=[BehaviorDeclaration|ID] msgref=[Message|ID] val=PHead)
	 */
	protected void sequence_Forward(ISerializationContext context, Forward semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SimpleAgentPackage.Literals.FORWARD__DEST) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SimpleAgentPackage.Literals.FORWARD__DEST));
			if (transientValues.isValueTransient(semanticObject, SimpleAgentPackage.Literals.FORWARD__MSGREF) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SimpleAgentPackage.Literals.FORWARD__MSGREF));
			if (transientValues.isValueTransient(semanticObject, SimpleAgentPackage.Literals.FORWARD__VAL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SimpleAgentPackage.Literals.FORWARD__VAL));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getForwardAccess().getDestBehaviorDeclarationIDTerminalRuleCall_1_0_1(), semanticObject.eGet(SimpleAgentPackage.Literals.FORWARD__DEST, false));
		feeder.accept(grammarAccess.getForwardAccess().getMsgrefMessageIDTerminalRuleCall_3_0_1(), semanticObject.eGet(SimpleAgentPackage.Literals.FORWARD__MSGREF, false));
		feeder.accept(grammarAccess.getForwardAccess().getValPHeadParserRuleCall_5_0(), semanticObject.getVal());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     GuardedStateAction returns GuardedStateAction
	 *
	 * Constraint:
	 *     ((guard=STRING | solveGuard?='ifSolved')? action=StateAction elseaction=StateAction?)
	 */
	protected void sequence_GuardedStateAction(ISerializationContext context, GuardedStateAction semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Message returns Invitation
	 *     OutInMessage returns Invitation
	 *     Invitation returns Invitation
	 *
	 * Constraint:
	 *     (name=ID msg=PHead)
	 */
	protected void sequence_Invitation(ISerializationContext context, Invitation semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SimpleAgentPackage.Literals.MESSAGE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SimpleAgentPackage.Literals.MESSAGE__NAME));
			if (transientValues.isValueTransient(semanticObject, SimpleAgentPackage.Literals.MESSAGE__MSG) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SimpleAgentPackage.Literals.MESSAGE__MSG));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getInvitationAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getInvitationAccess().getMsgPHeadParserRuleCall_3_0(), semanticObject.getMsg());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     StateAction returns MsgCond
	 *     MsgCond returns MsgCond
	 *
	 * Constraint:
	 *     (message=[Message|ID] msg=PHead actions+=GuardedStateAction* ifnot=NoMsgCond?)
	 */
	protected void sequence_MsgCond(ISerializationContext context, MsgCond semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     NoMsgCond returns NoMsgCond
	 *
	 * Constraint:
	 *     actions+=GuardedStateAction*
	 */
	protected void sequence_NoMsgCond(ISerializationContext context, NoMsgCond semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     OnEffect returns OnEffect
	 *
	 * Constraint:
	 *     (effect=[Message|ID] body=ActionBody compensations+=Compensation*)
	 */
	protected void sequence_OnEffect(ISerializationContext context, OnEffect semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     CodeRunArg returns PAtomNum
	 *     PHead returns PAtomNum
	 *     PAtom returns PAtomNum
	 *     PAtomNum returns PAtomNum
	 *
	 * Constraint:
	 *     val=INT
	 */
	protected void sequence_PAtomNum(ISerializationContext context, PAtomNum semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SimpleAgentPackage.Literals.PATOM_NUM__VAL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SimpleAgentPackage.Literals.PATOM_NUM__VAL));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPAtomNumAccess().getValINTTerminalRuleCall_0(), semanticObject.getVal());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     CodeRunArg returns PAtomString
	 *     PHead returns PAtomString
	 *     PAtom returns PAtomString
	 *     PAtomString returns PAtomString
	 *
	 * Constraint:
	 *     val=STRING
	 */
	protected void sequence_PAtomString(ISerializationContext context, PAtomString semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SimpleAgentPackage.Literals.PATOM_STRING__VAL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SimpleAgentPackage.Literals.PATOM_STRING__VAL));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPAtomStringAccess().getValSTRINGTerminalRuleCall_0(), semanticObject.getVal());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     CodeRunArg returns PAtomic
	 *     PHead returns PAtomic
	 *     PAtom returns PAtomic
	 *     PAtomic returns PAtomic
	 *
	 * Constraint:
	 *     val=ID
	 */
	protected void sequence_PAtomic(ISerializationContext context, PAtomic semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SimpleAgentPackage.Literals.PATOMIC__VAL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SimpleAgentPackage.Literals.PATOMIC__VAL));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPAtomicAccess().getValIDTerminalRuleCall_0(), semanticObject.getVal());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     CodeRunArg returns PStructRef
	 *     PHead returns PStructRef
	 *     PStructRef returns PStructRef
	 *
	 * Constraint:
	 *     struct=PStruct
	 */
	protected void sequence_PStructRef(ISerializationContext context, PStructRef semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SimpleAgentPackage.Literals.PSTRUCT_REF__STRUCT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SimpleAgentPackage.Literals.PSTRUCT_REF__STRUCT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPStructRefAccess().getStructPStructParserRuleCall_1_0(), semanticObject.getStruct());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     CodeRunArg returns PStruct
	 *     PHead returns PStruct
	 *     PStruct returns PStruct
	 *
	 * Constraint:
	 *     (functor=ID msgArg+=PHead? msgArg+=PHead*)
	 */
	protected void sequence_PStruct(ISerializationContext context, PStruct semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     StateAction returns PrintCurMsg
	 *     PrintCurMsg returns PrintCurMsg
	 *
	 * Constraint:
	 *     {PrintCurMsg}
	 */
	protected void sequence_PrintCurMsg(ISerializationContext context, PrintCurMsg semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     StateAction returns Print
	 *     Print returns Print
	 *
	 * Constraint:
	 *     args=PHead
	 */
	protected void sequence_Print(ISerializationContext context, Print semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SimpleAgentPackage.Literals.PRINT__ARGS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SimpleAgentPackage.Literals.PRINT__ARGS));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPrintAccess().getArgsPHeadParserRuleCall_3_0(), semanticObject.getArgs());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     QActorSystemSpec returns QActorSystemSpec
	 *
	 * Constraint:
	 *     (mqttBroker=BrokerSpec? message+=Message* context+=Context*)
	 */
	protected void sequence_QActorSystemSpec(ISerializationContext context, QActorSystemSpec semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Message returns Request
	 *     OutInMessage returns Request
	 *     Request returns Request
	 *
	 * Constraint:
	 *     (name=ID msg=PHead)
	 */
	protected void sequence_Request(ISerializationContext context, Request semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SimpleAgentPackage.Literals.MESSAGE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SimpleAgentPackage.Literals.MESSAGE__NAME));
			if (transientValues.isValueTransient(semanticObject, SimpleAgentPackage.Literals.MESSAGE__MSG) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SimpleAgentPackage.Literals.MESSAGE__MSG));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getRequestAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getRequestAccess().getMsgPHeadParserRuleCall_3_0(), semanticObject.getMsg());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Message returns Signal
	 *     OutOnlyMessage returns Signal
	 *     Signal returns Signal
	 *
	 * Constraint:
	 *     (name=ID msg=PHead)
	 */
	protected void sequence_Signal(ISerializationContext context, Signal semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SimpleAgentPackage.Literals.MESSAGE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SimpleAgentPackage.Literals.MESSAGE__NAME));
			if (transientValues.isValueTransient(semanticObject, SimpleAgentPackage.Literals.MESSAGE__MSG) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SimpleAgentPackage.Literals.MESSAGE__MSG));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSignalAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getSignalAccess().getMsgPHeadParserRuleCall_3_0(), semanticObject.getMsg());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     SimpleAgent returns SimpleAgent
	 *
	 * Constraint:
	 *     (name=ID ip=ComponentIP mqtt='-mqtt'? system=QActorSystemSpec behaviors+=BehaviorDeclaration+)
	 */
	protected void sequence_SimpleAgent(ISerializationContext context, SimpleAgent semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     StateAction returns SolveGoal
	 *     SolveGoal returns SolveGoal
	 *
	 * Constraint:
	 *     (goal=PHead resVar=Variable?)
	 */
	protected void sequence_SolveGoal(ISerializationContext context, SolveGoal semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Message returns Token
	 *     OutOnlyMessage returns Token
	 *     Token returns Token
	 *
	 * Constraint:
	 *     (name=ID msg=PHead)
	 */
	protected void sequence_Token(ISerializationContext context, Token semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SimpleAgentPackage.Literals.MESSAGE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SimpleAgentPackage.Literals.MESSAGE__NAME));
			if (transientValues.isValueTransient(semanticObject, SimpleAgentPackage.Literals.MESSAGE__MSG) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SimpleAgentPackage.Literals.MESSAGE__MSG));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTokenAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getTokenAccess().getMsgPHeadParserRuleCall_3_0(), semanticObject.getMsg());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     CodeRunArg returns VarRefInStr
	 *     PHead returns VarRefInStr
	 *     PAtom returns VarRefInStr
	 *     VarRefInStr returns VarRefInStr
	 *
	 * Constraint:
	 *     varName=VARID
	 */
	protected void sequence_VarRefInStr(ISerializationContext context, VarRefInStr semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SimpleAgentPackage.Literals.VAR_REF_IN_STR__VAR_NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SimpleAgentPackage.Literals.VAR_REF_IN_STR__VAR_NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getVarRefInStrAccess().getVarNameVARIDTerminalRuleCall_1_0(), semanticObject.getVarName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     CodeRunArg returns VarRef
	 *     PHead returns VarRef
	 *     PAtom returns VarRef
	 *     VarRef returns VarRef
	 *
	 * Constraint:
	 *     varName=VARID
	 */
	protected void sequence_VarRef(ISerializationContext context, VarRef semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SimpleAgentPackage.Literals.VAR_REF__VAR_NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SimpleAgentPackage.Literals.VAR_REF__VAR_NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getVarRefAccess().getVarNameVARIDTerminalRuleCall_1_0(), semanticObject.getVarName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     CodeRunArg returns VarSolRef
	 *     PHead returns VarSolRef
	 *     PAtom returns VarSolRef
	 *     VarSolRef returns VarSolRef
	 *
	 * Constraint:
	 *     varName=VARID
	 */
	protected void sequence_VarSolRef(ISerializationContext context, VarSolRef semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SimpleAgentPackage.Literals.VAR_SOL_REF__VAR_NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SimpleAgentPackage.Literals.VAR_SOL_REF__VAR_NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getVarSolRefAccess().getVarNameVARIDTerminalRuleCall_1_0(), semanticObject.getVarName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     CodeRunArg returns Variable
	 *     PHead returns Variable
	 *     PAtom returns Variable
	 *     Variable returns Variable
	 *
	 * Constraint:
	 *     varName=VARID
	 */
	protected void sequence_Variable(ISerializationContext context, Variable semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SimpleAgentPackage.Literals.VARIABLE__VAR_NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SimpleAgentPackage.Literals.VARIABLE__VAR_NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getVariableAccess().getVarNameVARIDTerminalRuleCall_1_0(), semanticObject.getVarName());
		feeder.finish();
	}
	
	
}
