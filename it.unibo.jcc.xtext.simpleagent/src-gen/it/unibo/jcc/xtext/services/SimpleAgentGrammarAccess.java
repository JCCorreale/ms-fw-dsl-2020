/*
 * generated by Xtext 2.18.0.M3
 */
package it.unibo.jcc.xtext.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class SimpleAgentGrammarAccess extends AbstractGrammarElementFinder {
	
	public class SimpleAgentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.jcc.xtext.SimpleAgent.SimpleAgent");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAgentKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cIpKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cIpAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cIpComponentIPParserRuleCall_3_0 = (RuleCall)cIpAssignment_3.eContents().get(0);
		private final Assignment cMqttAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final Keyword cMqttMqttKeyword_4_0 = (Keyword)cMqttAssignment_4.eContents().get(0);
		private final Keyword cSystemKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cLeftCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cSystemAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cSystemQActorSystemSpecParserRuleCall_7_0 = (RuleCall)cSystemAssignment_7.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cBehaviorsAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cBehaviorsBehaviorDeclarationParserRuleCall_9_0 = (RuleCall)cBehaviorsAssignment_9.eContents().get(0);
		
		//SimpleAgent:
		//	"Agent" name=ID "ip" ip=ComponentIP mqtt="-mqtt"?
		//	"System" "{" system=QActorSystemSpec "}"
		//	behaviors+=BehaviorDeclaration+ // For now assumed only one (internal) Behavior
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"Agent" name=ID "ip" ip=ComponentIP mqtt="-mqtt"? "System" "{" system=QActorSystemSpec "}"
		//behaviors+=BehaviorDeclaration+
		public Group getGroup() { return cGroup; }
		
		//"Agent"
		public Keyword getAgentKeyword_0() { return cAgentKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//"ip"
		public Keyword getIpKeyword_2() { return cIpKeyword_2; }
		
		//ip=ComponentIP
		public Assignment getIpAssignment_3() { return cIpAssignment_3; }
		
		//ComponentIP
		public RuleCall getIpComponentIPParserRuleCall_3_0() { return cIpComponentIPParserRuleCall_3_0; }
		
		//mqtt="-mqtt"?
		public Assignment getMqttAssignment_4() { return cMqttAssignment_4; }
		
		//"-mqtt"
		public Keyword getMqttMqttKeyword_4_0() { return cMqttMqttKeyword_4_0; }
		
		//"System"
		public Keyword getSystemKeyword_5() { return cSystemKeyword_5; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_6() { return cLeftCurlyBracketKeyword_6; }
		
		//system=QActorSystemSpec
		public Assignment getSystemAssignment_7() { return cSystemAssignment_7; }
		
		//QActorSystemSpec
		public RuleCall getSystemQActorSystemSpecParserRuleCall_7_0() { return cSystemQActorSystemSpecParserRuleCall_7_0; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
		
		//behaviors+=BehaviorDeclaration+
		public Assignment getBehaviorsAssignment_9() { return cBehaviorsAssignment_9; }
		
		//BehaviorDeclaration
		public RuleCall getBehaviorsBehaviorDeclarationParserRuleCall_9_0() { return cBehaviorsBehaviorDeclarationParserRuleCall_9_0; }
	}
	public class QActorSystemSpecElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.jcc.xtext.SimpleAgent.QActorSystemSpec");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cQActorSystemSpecAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cMqttBrokerAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cMqttBrokerBrokerSpecParserRuleCall_1_0 = (RuleCall)cMqttBrokerAssignment_1.eContents().get(0);
		private final Assignment cMessageAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cMessageMessageParserRuleCall_2_0 = (RuleCall)cMessageAssignment_2.eContents().get(0);
		private final Assignment cContextAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cContextContextParserRuleCall_3_0 = (RuleCall)cContextAssignment_3.eContents().get(0);
		
		//QActorSystemSpec:
		//	{QActorSystemSpec} mqttBroker=BrokerSpec?
		//	message+=Message*
		//	context+=Context*;
		@Override public ParserRule getRule() { return rule; }
		
		//{QActorSystemSpec} mqttBroker=BrokerSpec? message+=Message* context+=Context*
		public Group getGroup() { return cGroup; }
		
		//{QActorSystemSpec}
		public Action getQActorSystemSpecAction_0() { return cQActorSystemSpecAction_0; }
		
		//mqttBroker=BrokerSpec?
		public Assignment getMqttBrokerAssignment_1() { return cMqttBrokerAssignment_1; }
		
		//BrokerSpec
		public RuleCall getMqttBrokerBrokerSpecParserRuleCall_1_0() { return cMqttBrokerBrokerSpecParserRuleCall_1_0; }
		
		//message+=Message*
		public Assignment getMessageAssignment_2() { return cMessageAssignment_2; }
		
		//Message
		public RuleCall getMessageMessageParserRuleCall_2_0() { return cMessageMessageParserRuleCall_2_0; }
		
		//context+=Context*
		public Assignment getContextAssignment_3() { return cContextAssignment_3; }
		
		//Context
		public RuleCall getContextContextParserRuleCall_3_0() { return cContextContextParserRuleCall_3_0; }
	}
	public class BehaviorDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.jcc.xtext.SimpleAgent.BehaviorDeclaration");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBehaviorParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBehaviorExternalParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//BehaviorDeclaration:
		//	Behavior | BehaviorExternal;
		@Override public ParserRule getRule() { return rule; }
		
		//Behavior | BehaviorExternal
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Behavior
		public RuleCall getBehaviorParserRuleCall_0() { return cBehaviorParserRuleCall_0; }
		
		//BehaviorExternal
		public RuleCall getBehaviorExternalParserRuleCall_1() { return cBehaviorExternalParserRuleCall_1; }
	}
	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.jcc.xtext.SimpleAgent.QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		///* NAMES */ QualifiedName:
		//	ID ('.' ID)*;
		@Override public ParserRule getRule() { return rule; }
		
		//ID ('.' ID)*
		public Group getGroup() { return cGroup; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//('.' ID)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}
	public class BehaviorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.jcc.xtext.SimpleAgent.Behavior");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBehaviorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cPlannerKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cPlannerAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPlannerQualifiedNameParserRuleCall_3_0 = (RuleCall)cPlannerAssignment_3.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cStartAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cStartAnyActionParserRuleCall_5_0 = (RuleCall)cStartAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cInitKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final Assignment cInitAssignment_6_2 = (Assignment)cGroup_6.eContents().get(2);
		private final RuleCall cInitActionBodyParserRuleCall_6_2_0 = (RuleCall)cInitAssignment_6_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6_3 = (Keyword)cGroup_6.eContents().get(3);
		private final Assignment cActionsAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cActionsActionParserRuleCall_7_0 = (RuleCall)cActionsAssignment_7.eContents().get(0);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cOnGoalReachedKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_8_1 = (Keyword)cGroup_8.eContents().get(1);
		private final Assignment cOnGoalReachedAssignment_8_2 = (Assignment)cGroup_8.eContents().get(2);
		private final RuleCall cOnGoalReachedActionBodyParserRuleCall_8_2_0 = (RuleCall)cOnGoalReachedAssignment_8_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8_3 = (Keyword)cGroup_8.eContents().get(3);
		private final Group cGroup_9 = (Group)cGroup.eContents().get(9);
		private final Keyword cOnSuspendedKeyword_9_0 = (Keyword)cGroup_9.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_9_1 = (Keyword)cGroup_9.eContents().get(1);
		private final Assignment cOnSuspendedAssignment_9_2 = (Assignment)cGroup_9.eContents().get(2);
		private final RuleCall cOnSuspendedActionBodyParserRuleCall_9_2_0 = (RuleCall)cOnSuspendedAssignment_9_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_9_3 = (Keyword)cGroup_9.eContents().get(3);
		private final Group cGroup_10 = (Group)cGroup.eContents().get(10);
		private final Keyword cOnResumedKeyword_10_0 = (Keyword)cGroup_10.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_10_1 = (Keyword)cGroup_10.eContents().get(1);
		private final Assignment cOnResumedAssignment_10_2 = (Assignment)cGroup_10.eContents().get(2);
		private final RuleCall cOnResumedActionBodyParserRuleCall_10_2_0 = (RuleCall)cOnResumedAssignment_10_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_10_3 = (Keyword)cGroup_10.eContents().get(3);
		private final Keyword cRightCurlyBracketKeyword_11 = (Keyword)cGroup.eContents().get(11);
		
		//// planner must implement itunibo.jcc.planner.framework.Planner
		//Behavior:
		//	"Behavior" name=ID "planner" planner=QualifiedName "{"
		//	start=AnyAction? ("init" "{" init=ActionBody "}")?
		//	actions+=Action* ("onGoalReached" "{" onGoalReached=ActionBody "}")? ("onSuspended" "{" onSuspended=ActionBody "}")?
		//	("onResumed" "{" onResumed=ActionBody "}")?
		//	"}";
		@Override public ParserRule getRule() { return rule; }
		
		//"Behavior" name=ID "planner" planner=QualifiedName "{" start=AnyAction? ("init" "{" init=ActionBody "}")?
		//actions+=Action* ("onGoalReached" "{" onGoalReached=ActionBody "}")? ("onSuspended" "{" onSuspended=ActionBody "}")?
		//("onResumed" "{" onResumed=ActionBody "}")? "}"
		public Group getGroup() { return cGroup; }
		
		//"Behavior"
		public Keyword getBehaviorKeyword_0() { return cBehaviorKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//"planner"
		public Keyword getPlannerKeyword_2() { return cPlannerKeyword_2; }
		
		//planner=QualifiedName
		public Assignment getPlannerAssignment_3() { return cPlannerAssignment_3; }
		
		//QualifiedName
		public RuleCall getPlannerQualifiedNameParserRuleCall_3_0() { return cPlannerQualifiedNameParserRuleCall_3_0; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }
		
		//start=AnyAction?
		public Assignment getStartAssignment_5() { return cStartAssignment_5; }
		
		//AnyAction
		public RuleCall getStartAnyActionParserRuleCall_5_0() { return cStartAnyActionParserRuleCall_5_0; }
		
		//("init" "{" init=ActionBody "}")?
		public Group getGroup_6() { return cGroup_6; }
		
		//"init"
		public Keyword getInitKeyword_6_0() { return cInitKeyword_6_0; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_6_1() { return cLeftCurlyBracketKeyword_6_1; }
		
		//init=ActionBody
		public Assignment getInitAssignment_6_2() { return cInitAssignment_6_2; }
		
		//ActionBody
		public RuleCall getInitActionBodyParserRuleCall_6_2_0() { return cInitActionBodyParserRuleCall_6_2_0; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_6_3() { return cRightCurlyBracketKeyword_6_3; }
		
		//actions+=Action*
		public Assignment getActionsAssignment_7() { return cActionsAssignment_7; }
		
		//Action
		public RuleCall getActionsActionParserRuleCall_7_0() { return cActionsActionParserRuleCall_7_0; }
		
		//("onGoalReached" "{" onGoalReached=ActionBody "}")?
		public Group getGroup_8() { return cGroup_8; }
		
		//"onGoalReached"
		public Keyword getOnGoalReachedKeyword_8_0() { return cOnGoalReachedKeyword_8_0; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_8_1() { return cLeftCurlyBracketKeyword_8_1; }
		
		//onGoalReached=ActionBody
		public Assignment getOnGoalReachedAssignment_8_2() { return cOnGoalReachedAssignment_8_2; }
		
		//ActionBody
		public RuleCall getOnGoalReachedActionBodyParserRuleCall_8_2_0() { return cOnGoalReachedActionBodyParserRuleCall_8_2_0; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_8_3() { return cRightCurlyBracketKeyword_8_3; }
		
		//("onSuspended" "{" onSuspended=ActionBody "}")?
		public Group getGroup_9() { return cGroup_9; }
		
		//"onSuspended"
		public Keyword getOnSuspendedKeyword_9_0() { return cOnSuspendedKeyword_9_0; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_9_1() { return cLeftCurlyBracketKeyword_9_1; }
		
		//onSuspended=ActionBody
		public Assignment getOnSuspendedAssignment_9_2() { return cOnSuspendedAssignment_9_2; }
		
		//ActionBody
		public RuleCall getOnSuspendedActionBodyParserRuleCall_9_2_0() { return cOnSuspendedActionBodyParserRuleCall_9_2_0; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_9_3() { return cRightCurlyBracketKeyword_9_3; }
		
		//("onResumed" "{" onResumed=ActionBody "}")?
		public Group getGroup_10() { return cGroup_10; }
		
		//"onResumed"
		public Keyword getOnResumedKeyword_10_0() { return cOnResumedKeyword_10_0; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_10_1() { return cLeftCurlyBracketKeyword_10_1; }
		
		//onResumed=ActionBody
		public Assignment getOnResumedAssignment_10_2() { return cOnResumedAssignment_10_2; }
		
		//ActionBody
		public RuleCall getOnResumedActionBodyParserRuleCall_10_2_0() { return cOnResumedActionBodyParserRuleCall_10_2_0; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_10_3() { return cRightCurlyBracketKeyword_10_3; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_11() { return cRightCurlyBracketKeyword_11; }
	}
	public class BehaviorExternalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.jcc.xtext.SimpleAgent.BehaviorExternal");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExternalBehaviorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cContextKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cContextAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cContextContextCrossReference_3_0 = (CrossReference)cContextAssignment_3.eContents().get(0);
		private final RuleCall cContextContextIDTerminalRuleCall_3_0_1 = (RuleCall)cContextContextCrossReference_3_0.eContents().get(1);
		
		//BehaviorExternal:
		//	"ExternalBehavior" name=ID "context" context=[Context];
		@Override public ParserRule getRule() { return rule; }
		
		//"ExternalBehavior" name=ID "context" context=[Context]
		public Group getGroup() { return cGroup; }
		
		//"ExternalBehavior"
		public Keyword getExternalBehaviorKeyword_0() { return cExternalBehaviorKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//"context"
		public Keyword getContextKeyword_2() { return cContextKeyword_2; }
		
		//context=[Context]
		public Assignment getContextAssignment_3() { return cContextAssignment_3; }
		
		//[Context]
		public CrossReference getContextContextCrossReference_3_0() { return cContextContextCrossReference_3_0; }
		
		//ID
		public RuleCall getContextContextIDTerminalRuleCall_3_0_1() { return cContextContextIDTerminalRuleCall_3_0_1; }
	}
	public class ActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.jcc.xtext.SimpleAgent.Action");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cActionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cActionsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cActionsPHeadParserRuleCall_1_0 = (RuleCall)cActionsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cActionsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cActionsPHeadParserRuleCall_2_1_0 = (RuleCall)cActionsAssignment_2_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cBodyAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cBodyActionBodyParserRuleCall_4_0 = (RuleCall)cBodyAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cOnAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cOnOnEffectParserRuleCall_6_0 = (RuleCall)cOnAssignment_6.eContents().get(0);
		
		//// TODO Semantic check: at most one per action (exactly one?)
		//Action:
		//	"action" actions+=PHead ("," actions+=PHead)* "{" body=ActionBody "}" on+=OnEffect*;
		@Override public ParserRule getRule() { return rule; }
		
		//"action" actions+=PHead ("," actions+=PHead)* "{" body=ActionBody "}" on+=OnEffect*
		public Group getGroup() { return cGroup; }
		
		//"action"
		public Keyword getActionKeyword_0() { return cActionKeyword_0; }
		
		//actions+=PHead
		public Assignment getActionsAssignment_1() { return cActionsAssignment_1; }
		
		//PHead
		public RuleCall getActionsPHeadParserRuleCall_1_0() { return cActionsPHeadParserRuleCall_1_0; }
		
		//("," actions+=PHead)*
		public Group getGroup_2() { return cGroup_2; }
		
		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//actions+=PHead
		public Assignment getActionsAssignment_2_1() { return cActionsAssignment_2_1; }
		
		//PHead
		public RuleCall getActionsPHeadParserRuleCall_2_1_0() { return cActionsPHeadParserRuleCall_2_1_0; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//body=ActionBody
		public Assignment getBodyAssignment_4() { return cBodyAssignment_4; }
		
		//ActionBody
		public RuleCall getBodyActionBodyParserRuleCall_4_0() { return cBodyActionBodyParserRuleCall_4_0; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
		
		//on+=OnEffect*
		public Assignment getOnAssignment_6() { return cOnAssignment_6; }
		
		//OnEffect
		public RuleCall getOnOnEffectParserRuleCall_6_0() { return cOnOnEffectParserRuleCall_6_0; }
	}
	public class OnEffectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.jcc.xtext.SimpleAgent.OnEffect");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOnEffectKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cEffectAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cEffectMessageCrossReference_2_0 = (CrossReference)cEffectAssignment_2.eContents().get(0);
		private final RuleCall cEffectMessageIDTerminalRuleCall_2_0_1 = (RuleCall)cEffectMessageCrossReference_2_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cBodyAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cBodyActionBodyParserRuleCall_5_0 = (RuleCall)cBodyAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cCompensationsAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cCompensationsCompensationParserRuleCall_7_0 = (RuleCall)cCompensationsAssignment_7.eContents().get(0);
		
		//// TODO Restrict to certain PHeads
		//OnEffect:
		//	"onEffect" "(" effect=[Message] ")" "{"
		//	body=ActionBody
		//	"}"
		//	compensations+=Compensation*;
		@Override public ParserRule getRule() { return rule; }
		
		//"onEffect" "(" effect=[Message] ")" "{" body=ActionBody "}" compensations+=Compensation*
		public Group getGroup() { return cGroup; }
		
		//"onEffect"
		public Keyword getOnEffectKeyword_0() { return cOnEffectKeyword_0; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//effect=[Message]
		public Assignment getEffectAssignment_2() { return cEffectAssignment_2; }
		
		//[Message]
		public CrossReference getEffectMessageCrossReference_2_0() { return cEffectMessageCrossReference_2_0; }
		
		//ID
		public RuleCall getEffectMessageIDTerminalRuleCall_2_0_1() { return cEffectMessageIDTerminalRuleCall_2_0_1; }
		
		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }
		
		//body=ActionBody
		public Assignment getBodyAssignment_5() { return cBodyAssignment_5; }
		
		//ActionBody
		public RuleCall getBodyActionBodyParserRuleCall_5_0() { return cBodyActionBodyParserRuleCall_5_0; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
		
		//compensations+=Compensation*
		public Assignment getCompensationsAssignment_7() { return cCompensationsAssignment_7; }
		
		//Compensation
		public RuleCall getCompensationsCompensationParserRuleCall_7_0() { return cCompensationsCompensationParserRuleCall_7_0; }
	}
	public class CompensationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.jcc.xtext.SimpleAgent.Compensation");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cTypeAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final Keyword cTypeRetryKeyword_0_0_0 = (Keyword)cTypeAssignment_0_0.eContents().get(0);
		private final Keyword cWhenKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cConditionAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cConditionSTRINGTerminalRuleCall_0_2_0 = (RuleCall)cConditionAssignment_0_2.eContents().get(0);
		private final Group cGroup_0_3 = (Group)cGroup_0.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_0_3_0 = (Keyword)cGroup_0_3.eContents().get(0);
		private final Assignment cBodyAssignment_0_3_1 = (Assignment)cGroup_0_3.eContents().get(1);
		private final RuleCall cBodyActionBodyParserRuleCall_0_3_1_0 = (RuleCall)cBodyAssignment_0_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_0_3_2 = (Keyword)cGroup_0_3.eContents().get(2);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cTypeAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Keyword cTypeReplanKeyword_1_0_0 = (Keyword)cTypeAssignment_1_0.eContents().get(0);
		private final Keyword cWhenKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cConditionAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cConditionSTRINGTerminalRuleCall_1_2_0 = (RuleCall)cConditionAssignment_1_2.eContents().get(0);
		private final Group cGroup_1_3 = (Group)cGroup_1.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_1_3_0 = (Keyword)cGroup_1_3.eContents().get(0);
		private final Assignment cBodyAssignment_1_3_1 = (Assignment)cGroup_1_3.eContents().get(1);
		private final RuleCall cBodyActionBodyParserRuleCall_1_3_1_0 = (RuleCall)cBodyAssignment_1_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1_3_2 = (Keyword)cGroup_1_3.eContents().get(2);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Assignment cTypeAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final Keyword cTypeSetGoalKeyword_2_0_0 = (Keyword)cTypeAssignment_2_0.eContents().get(0);
		private final Assignment cGoalAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cGoalSTRINGTerminalRuleCall_2_1_0 = (RuleCall)cGoalAssignment_2_1.eContents().get(0);
		private final Keyword cWhenKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Assignment cConditionAssignment_2_3 = (Assignment)cGroup_2.eContents().get(3);
		private final RuleCall cConditionSTRINGTerminalRuleCall_2_3_0 = (RuleCall)cConditionAssignment_2_3.eContents().get(0);
		private final Group cGroup_2_4 = (Group)cGroup_2.eContents().get(4);
		private final Keyword cLeftCurlyBracketKeyword_2_4_0 = (Keyword)cGroup_2_4.eContents().get(0);
		private final Assignment cBodyAssignment_2_4_1 = (Assignment)cGroup_2_4.eContents().get(1);
		private final RuleCall cBodyActionBodyParserRuleCall_2_4_1_0 = (RuleCall)cBodyAssignment_2_4_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_4_2 = (Keyword)cGroup_2_4.eContents().get(2);
		
		//Compensation:
		//	type="retry" "when" condition=STRING ("{" body=ActionBody "}")? | type="replan" "when" condition=STRING ("{"
		//	body=ActionBody "}")? | type="setGoal" goal=STRING "when" condition=STRING ("{" body=ActionBody "}")?;
		@Override public ParserRule getRule() { return rule; }
		
		//type="retry" "when" condition=STRING ("{" body=ActionBody "}")? | type="replan" "when" condition=STRING ("{"
		//body=ActionBody "}")? | type="setGoal" goal=STRING "when" condition=STRING ("{" body=ActionBody "}")?
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//type="retry" "when" condition=STRING ("{" body=ActionBody "}")?
		public Group getGroup_0() { return cGroup_0; }
		
		//type="retry"
		public Assignment getTypeAssignment_0_0() { return cTypeAssignment_0_0; }
		
		//"retry"
		public Keyword getTypeRetryKeyword_0_0_0() { return cTypeRetryKeyword_0_0_0; }
		
		//"when"
		public Keyword getWhenKeyword_0_1() { return cWhenKeyword_0_1; }
		
		//condition=STRING
		public Assignment getConditionAssignment_0_2() { return cConditionAssignment_0_2; }
		
		//STRING
		public RuleCall getConditionSTRINGTerminalRuleCall_0_2_0() { return cConditionSTRINGTerminalRuleCall_0_2_0; }
		
		//("{" body=ActionBody "}")?
		public Group getGroup_0_3() { return cGroup_0_3; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_0_3_0() { return cLeftCurlyBracketKeyword_0_3_0; }
		
		//body=ActionBody
		public Assignment getBodyAssignment_0_3_1() { return cBodyAssignment_0_3_1; }
		
		//ActionBody
		public RuleCall getBodyActionBodyParserRuleCall_0_3_1_0() { return cBodyActionBodyParserRuleCall_0_3_1_0; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_0_3_2() { return cRightCurlyBracketKeyword_0_3_2; }
		
		//type="replan" "when" condition=STRING ("{" body=ActionBody "}")?
		public Group getGroup_1() { return cGroup_1; }
		
		//type="replan"
		public Assignment getTypeAssignment_1_0() { return cTypeAssignment_1_0; }
		
		//"replan"
		public Keyword getTypeReplanKeyword_1_0_0() { return cTypeReplanKeyword_1_0_0; }
		
		//"when"
		public Keyword getWhenKeyword_1_1() { return cWhenKeyword_1_1; }
		
		//condition=STRING
		public Assignment getConditionAssignment_1_2() { return cConditionAssignment_1_2; }
		
		//STRING
		public RuleCall getConditionSTRINGTerminalRuleCall_1_2_0() { return cConditionSTRINGTerminalRuleCall_1_2_0; }
		
		//("{" body=ActionBody "}")?
		public Group getGroup_1_3() { return cGroup_1_3; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_1_3_0() { return cLeftCurlyBracketKeyword_1_3_0; }
		
		//body=ActionBody
		public Assignment getBodyAssignment_1_3_1() { return cBodyAssignment_1_3_1; }
		
		//ActionBody
		public RuleCall getBodyActionBodyParserRuleCall_1_3_1_0() { return cBodyActionBodyParserRuleCall_1_3_1_0; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_1_3_2() { return cRightCurlyBracketKeyword_1_3_2; }
		
		//type="setGoal" goal=STRING "when" condition=STRING ("{" body=ActionBody "}")?
		public Group getGroup_2() { return cGroup_2; }
		
		//type="setGoal"
		public Assignment getTypeAssignment_2_0() { return cTypeAssignment_2_0; }
		
		//"setGoal"
		public Keyword getTypeSetGoalKeyword_2_0_0() { return cTypeSetGoalKeyword_2_0_0; }
		
		//goal=STRING
		public Assignment getGoalAssignment_2_1() { return cGoalAssignment_2_1; }
		
		//STRING
		public RuleCall getGoalSTRINGTerminalRuleCall_2_1_0() { return cGoalSTRINGTerminalRuleCall_2_1_0; }
		
		//"when"
		public Keyword getWhenKeyword_2_2() { return cWhenKeyword_2_2; }
		
		//condition=STRING
		public Assignment getConditionAssignment_2_3() { return cConditionAssignment_2_3; }
		
		//STRING
		public RuleCall getConditionSTRINGTerminalRuleCall_2_3_0() { return cConditionSTRINGTerminalRuleCall_2_3_0; }
		
		//("{" body=ActionBody "}")?
		public Group getGroup_2_4() { return cGroup_2_4; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_2_4_0() { return cLeftCurlyBracketKeyword_2_4_0; }
		
		//body=ActionBody
		public Assignment getBodyAssignment_2_4_1() { return cBodyAssignment_2_4_1; }
		
		//ActionBody
		public RuleCall getBodyActionBodyParserRuleCall_2_4_1_0() { return cBodyActionBodyParserRuleCall_2_4_1_0; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_2_4_2() { return cRightCurlyBracketKeyword_2_4_2; }
	}
	public class ActionBodyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.jcc.xtext.SimpleAgent.ActionBody");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cActionBodyAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cInstructionsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cInstructionsGuardedStateActionParserRuleCall_1_0 = (RuleCall)cInstructionsAssignment_1.eContents().get(0);
		
		//ActionBody:
		//	{ActionBody} instructions+=GuardedStateAction*;
		@Override public ParserRule getRule() { return rule; }
		
		//{ActionBody} instructions+=GuardedStateAction*
		public Group getGroup() { return cGroup; }
		
		//{ActionBody}
		public Action getActionBodyAction_0() { return cActionBodyAction_0; }
		
		//instructions+=GuardedStateAction*
		public Assignment getInstructionsAssignment_1() { return cInstructionsAssignment_1; }
		
		//GuardedStateAction
		public RuleCall getInstructionsGuardedStateActionParserRuleCall_1_0() { return cInstructionsGuardedStateActionParserRuleCall_1_0; }
	}
	public class CodeRunArgElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.jcc.xtext.SimpleAgent.CodeRunArg");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPHeadParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cCodeRunArgAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final RuleCall cBuiltinVarParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//CodeRunArg:
		//	PHead | {CodeRunArg} BuiltinVar;
		@Override public ParserRule getRule() { return rule; }
		
		//PHead | {CodeRunArg} BuiltinVar
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//PHead
		public RuleCall getPHeadParserRuleCall_0() { return cPHeadParserRuleCall_0; }
		
		//{CodeRunArg} BuiltinVar
		public Group getGroup_1() { return cGroup_1; }
		
		//{CodeRunArg}
		public Action getCodeRunArgAction_1_0() { return cCodeRunArgAction_1_0; }
		
		//BuiltinVar
		public RuleCall getBuiltinVarParserRuleCall_1_1() { return cBuiltinVarParserRuleCall_1_1; }
	}
	public class BuiltinVarElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.jcc.xtext.SimpleAgent.BuiltinVar");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cCurmoveKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cCurGoalKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//// Changed CodeRunSimple and CodeRunActor below
		//BuiltinVar:
		//	"Curmove" | "CurGoal";
		@Override public ParserRule getRule() { return rule; }
		
		//"Curmove" | "CurGoal"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//"Curmove"
		public Keyword getCurmoveKeyword_0() { return cCurmoveKeyword_0; }
		
		//"CurGoal"
		public Keyword getCurGoalKeyword_1() { return cCurGoalKeyword_1; }
	}
	public class BrokerSpecElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.jcc.xtext.SimpleAgent.BrokerSpec");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMqttBrokerKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cBrokerHostAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cBrokerHostSTRINGTerminalRuleCall_1_0 = (RuleCall)cBrokerHostAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cBrokerPortAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cBrokerPortINTTerminalRuleCall_3_0 = (RuleCall)cBrokerPortAssignment_3.eContents().get(0);
		
		//// QActor Syntax
		///* BROKER SPEC */ BrokerSpec:
		//	"mqttBroker" brokerHost=STRING ":" brokerPort=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//"mqttBroker" brokerHost=STRING ":" brokerPort=INT
		public Group getGroup() { return cGroup; }
		
		//"mqttBroker"
		public Keyword getMqttBrokerKeyword_0() { return cMqttBrokerKeyword_0; }
		
		//brokerHost=STRING
		public Assignment getBrokerHostAssignment_1() { return cBrokerHostAssignment_1; }
		
		//STRING
		public RuleCall getBrokerHostSTRINGTerminalRuleCall_1_0() { return cBrokerHostSTRINGTerminalRuleCall_1_0; }
		
		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//brokerPort=INT
		public Assignment getBrokerPortAssignment_3() { return cBrokerPortAssignment_3; }
		
		//INT
		public RuleCall getBrokerPortINTTerminalRuleCall_3_0() { return cBrokerPortINTTerminalRuleCall_3_0; }
	}
	public class MessageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.jcc.xtext.SimpleAgent.Message");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cOutOnlyMessageParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cOutInMessageParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		///*
		// * ------------------------------------------
		// * MESSAGE
		//* ------------------------------------------
		// */ Message:
		//	OutOnlyMessage | OutInMessage;
		@Override public ParserRule getRule() { return rule; }
		
		//OutOnlyMessage | OutInMessage
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//OutOnlyMessage
		public RuleCall getOutOnlyMessageParserRuleCall_0() { return cOutOnlyMessageParserRuleCall_0; }
		
		//OutInMessage
		public RuleCall getOutInMessageParserRuleCall_1() { return cOutInMessageParserRuleCall_1; }
	}
	public class OutOnlyMessageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.jcc.xtext.SimpleAgent.OutOnlyMessage");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDispatchParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cEventParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cSignalParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cTokenParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//OutOnlyMessage:
		//	Dispatch | Event | Signal | Token;
		@Override public ParserRule getRule() { return rule; }
		
		//Dispatch | Event | Signal | Token
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Dispatch
		public RuleCall getDispatchParserRuleCall_0() { return cDispatchParserRuleCall_0; }
		
		//Event
		public RuleCall getEventParserRuleCall_1() { return cEventParserRuleCall_1; }
		
		//Signal
		public RuleCall getSignalParserRuleCall_2() { return cSignalParserRuleCall_2; }
		
		//Token
		public RuleCall getTokenParserRuleCall_3() { return cTokenParserRuleCall_3; }
	}
	public class OutInMessageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.jcc.xtext.SimpleAgent.OutInMessage");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cRequestParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cInvitationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//OutInMessage:
		//	Request | Invitation;
		@Override public ParserRule getRule() { return rule; }
		
		//Request | Invitation
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Request
		public RuleCall getRequestParserRuleCall_0() { return cRequestParserRuleCall_0; }
		
		//Invitation
		public RuleCall getInvitationParserRuleCall_1() { return cInvitationParserRuleCall_1; }
	}
	public class EventElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.jcc.xtext.SimpleAgent.Event");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEventKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cMsgAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cMsgPHeadParserRuleCall_3_0 = (RuleCall)cMsgAssignment_3.eContents().get(0);
		
		//Event:
		//	"Event" name=ID ":" msg=PHead;
		@Override public ParserRule getRule() { return rule; }
		
		//"Event" name=ID ":" msg=PHead
		public Group getGroup() { return cGroup; }
		
		//"Event"
		public Keyword getEventKeyword_0() { return cEventKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//msg=PHead
		public Assignment getMsgAssignment_3() { return cMsgAssignment_3; }
		
		//PHead
		public RuleCall getMsgPHeadParserRuleCall_3_0() { return cMsgPHeadParserRuleCall_3_0; }
	}
	public class SignalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.jcc.xtext.SimpleAgent.Signal");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSignalKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cMsgAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cMsgPHeadParserRuleCall_3_0 = (RuleCall)cMsgAssignment_3.eContents().get(0);
		
		//Signal:
		//	"Signal" name=ID ":" msg=PHead;
		@Override public ParserRule getRule() { return rule; }
		
		//"Signal" name=ID ":" msg=PHead
		public Group getGroup() { return cGroup; }
		
		//"Signal"
		public Keyword getSignalKeyword_0() { return cSignalKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//msg=PHead
		public Assignment getMsgAssignment_3() { return cMsgAssignment_3; }
		
		//PHead
		public RuleCall getMsgPHeadParserRuleCall_3_0() { return cMsgPHeadParserRuleCall_3_0; }
	}
	public class TokenElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.jcc.xtext.SimpleAgent.Token");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTokenKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cMsgAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cMsgPHeadParserRuleCall_3_0 = (RuleCall)cMsgAssignment_3.eContents().get(0);
		
		//Token:
		//	"Token" name=ID ":" msg=PHead;
		@Override public ParserRule getRule() { return rule; }
		
		//"Token" name=ID ":" msg=PHead
		public Group getGroup() { return cGroup; }
		
		//"Token"
		public Keyword getTokenKeyword_0() { return cTokenKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//msg=PHead
		public Assignment getMsgAssignment_3() { return cMsgAssignment_3; }
		
		//PHead
		public RuleCall getMsgPHeadParserRuleCall_3_0() { return cMsgPHeadParserRuleCall_3_0; }
	}
	public class DispatchElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.jcc.xtext.SimpleAgent.Dispatch");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDispatchKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cMsgAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cMsgPHeadParserRuleCall_3_0 = (RuleCall)cMsgAssignment_3.eContents().get(0);
		
		//Dispatch:
		//	"Dispatch" name=ID ":" msg=PHead;
		@Override public ParserRule getRule() { return rule; }
		
		//"Dispatch" name=ID ":" msg=PHead
		public Group getGroup() { return cGroup; }
		
		//"Dispatch"
		public Keyword getDispatchKeyword_0() { return cDispatchKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//msg=PHead
		public Assignment getMsgAssignment_3() { return cMsgAssignment_3; }
		
		//PHead
		public RuleCall getMsgPHeadParserRuleCall_3_0() { return cMsgPHeadParserRuleCall_3_0; }
	}
	public class RequestElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.jcc.xtext.SimpleAgent.Request");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRequestKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cMsgAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cMsgPHeadParserRuleCall_3_0 = (RuleCall)cMsgAssignment_3.eContents().get(0);
		
		//Request:
		//	"Request" name=ID ":" msg=PHead;
		@Override public ParserRule getRule() { return rule; }
		
		//"Request" name=ID ":" msg=PHead
		public Group getGroup() { return cGroup; }
		
		//"Request"
		public Keyword getRequestKeyword_0() { return cRequestKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//msg=PHead
		public Assignment getMsgAssignment_3() { return cMsgAssignment_3; }
		
		//PHead
		public RuleCall getMsgPHeadParserRuleCall_3_0() { return cMsgPHeadParserRuleCall_3_0; }
	}
	public class InvitationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.jcc.xtext.SimpleAgent.Invitation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInvitationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cMsgAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cMsgPHeadParserRuleCall_3_0 = (RuleCall)cMsgAssignment_3.eContents().get(0);
		
		//Invitation:
		//	"Invitation" name=ID ":" msg=PHead;
		@Override public ParserRule getRule() { return rule; }
		
		//"Invitation" name=ID ":" msg=PHead
		public Group getGroup() { return cGroup; }
		
		//"Invitation"
		public Keyword getInvitationKeyword_0() { return cInvitationKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//msg=PHead
		public Assignment getMsgAssignment_3() { return cMsgAssignment_3; }
		
		//PHead
		public RuleCall getMsgPHeadParserRuleCall_3_0() { return cMsgPHeadParserRuleCall_3_0; }
	}
	public class ContextElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.jcc.xtext.SimpleAgent.Context");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cContextKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cIpKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cIpAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cIpComponentIPParserRuleCall_3_0 = (RuleCall)cIpAssignment_3.eContents().get(0);
		private final Assignment cMqttAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final Keyword cMqttMqttKeyword_4_0 = (Keyword)cMqttAssignment_4.eContents().get(0);
		
		///* 
		// * Context
		// */ Context:
		//	"Context" name=ID "ip" ip=ComponentIP mqtt?="-mqtt"?;
		@Override public ParserRule getRule() { return rule; }
		
		//"Context" name=ID "ip" ip=ComponentIP mqtt?="-mqtt"?
		public Group getGroup() { return cGroup; }
		
		//"Context"
		public Keyword getContextKeyword_0() { return cContextKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//"ip"
		public Keyword getIpKeyword_2() { return cIpKeyword_2; }
		
		//ip=ComponentIP
		public Assignment getIpAssignment_3() { return cIpAssignment_3; }
		
		//ComponentIP
		public RuleCall getIpComponentIPParserRuleCall_3_0() { return cIpComponentIPParserRuleCall_3_0; }
		
		//mqtt?="-mqtt"?
		public Assignment getMqttAssignment_4() { return cMqttAssignment_4; }
		
		//"-mqtt"
		public Keyword getMqttMqttKeyword_4_0() { return cMqttMqttKeyword_4_0; }
	}
	public class ComponentIPElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.jcc.xtext.SimpleAgent.ComponentIP");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cComponentIPAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cHostKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cHostAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cHostSTRINGTerminalRuleCall_3_0 = (RuleCall)cHostAssignment_3.eContents().get(0);
		private final Keyword cPortKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cPortAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cPortINTTerminalRuleCall_5_0 = (RuleCall)cPortAssignment_5.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//ComponentIP:
		//	{ComponentIP} "[" "host=" host=STRING "port=" port=INT "]";
		@Override public ParserRule getRule() { return rule; }
		
		//{ComponentIP} "[" "host=" host=STRING "port=" port=INT "]"
		public Group getGroup() { return cGroup; }
		
		//{ComponentIP}
		public Action getComponentIPAction_0() { return cComponentIPAction_0; }
		
		//"["
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }
		
		//"host="
		public Keyword getHostKeyword_2() { return cHostKeyword_2; }
		
		//host=STRING
		public Assignment getHostAssignment_3() { return cHostAssignment_3; }
		
		//STRING
		public RuleCall getHostSTRINGTerminalRuleCall_3_0() { return cHostSTRINGTerminalRuleCall_3_0; }
		
		//"port="
		public Keyword getPortKeyword_4() { return cPortKeyword_4; }
		
		//port=INT
		public Assignment getPortAssignment_5() { return cPortAssignment_5; }
		
		//INT
		public RuleCall getPortINTTerminalRuleCall_5_0() { return cPortINTTerminalRuleCall_5_0; }
		
		//"]"
		public Keyword getRightSquareBracketKeyword_6() { return cRightSquareBracketKeyword_6; }
	}
	public class GuardedStateActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.jcc.xtext.SimpleAgent.GuardedStateAction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cAlternatives_0.eContents().get(0);
		private final Keyword cIfKeyword_0_0_0 = (Keyword)cGroup_0_0.eContents().get(0);
		private final Assignment cGuardAssignment_0_0_1 = (Assignment)cGroup_0_0.eContents().get(1);
		private final RuleCall cGuardSTRINGTerminalRuleCall_0_0_1_0 = (RuleCall)cGuardAssignment_0_0_1.eContents().get(0);
		private final Assignment cSolveGuardAssignment_0_1 = (Assignment)cAlternatives_0.eContents().get(1);
		private final Keyword cSolveGuardIfSolvedKeyword_0_1_0 = (Keyword)cSolveGuardAssignment_0_1.eContents().get(0);
		private final Assignment cActionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cActionStateActionParserRuleCall_1_0 = (RuleCall)cActionAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cElseKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cElseactionAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cElseactionStateActionParserRuleCall_2_1_0 = (RuleCall)cElseactionAssignment_2_1.eContents().get(0);
		
		///*
		// * StateAction
		// */ GuardedStateAction:
		//	("if" guard=STRING | solveGuard?="ifSolved")?
		//	action=StateAction ("else" elseaction=StateAction)?;
		@Override public ParserRule getRule() { return rule; }
		
		//("if" guard=STRING | solveGuard?="ifSolved")? action=StateAction ("else" elseaction=StateAction)?
		public Group getGroup() { return cGroup; }
		
		//("if" guard=STRING | solveGuard?="ifSolved")?
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//"if" guard=STRING
		public Group getGroup_0_0() { return cGroup_0_0; }
		
		//"if"
		public Keyword getIfKeyword_0_0_0() { return cIfKeyword_0_0_0; }
		
		//guard=STRING
		public Assignment getGuardAssignment_0_0_1() { return cGuardAssignment_0_0_1; }
		
		//STRING
		public RuleCall getGuardSTRINGTerminalRuleCall_0_0_1_0() { return cGuardSTRINGTerminalRuleCall_0_0_1_0; }
		
		//solveGuard?="ifSolved"
		public Assignment getSolveGuardAssignment_0_1() { return cSolveGuardAssignment_0_1; }
		
		//"ifSolved"
		public Keyword getSolveGuardIfSolvedKeyword_0_1_0() { return cSolveGuardIfSolvedKeyword_0_1_0; }
		
		//action=StateAction
		public Assignment getActionAssignment_1() { return cActionAssignment_1; }
		
		//StateAction
		public RuleCall getActionStateActionParserRuleCall_1_0() { return cActionStateActionParserRuleCall_1_0; }
		
		//("else" elseaction=StateAction)?
		public Group getGroup_2() { return cGroup_2; }
		
		//"else"
		public Keyword getElseKeyword_2_0() { return cElseKeyword_2_0; }
		
		//elseaction=StateAction
		public Assignment getElseactionAssignment_2_1() { return cElseactionAssignment_2_1; }
		
		//StateAction
		public RuleCall getElseactionStateActionParserRuleCall_2_1_0() { return cElseactionStateActionParserRuleCall_2_1_0; }
	}
	public class StateActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.jcc.xtext.SimpleAgent.StateAction");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPrintParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPrintCurMsgParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cSolveGoalParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cForwardParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cEmitParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cDelayParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cMsgCondParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cCodeRunParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cAnyActionParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cExecParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		
		//StateAction:
		//	Print | PrintCurMsg | SolveGoal | Forward | Emit | Delay | MsgCond | CodeRun | AnyAction | Exec //extra code
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Print | PrintCurMsg | SolveGoal | Forward | Emit | Delay | MsgCond | CodeRun | AnyAction | Exec
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Print
		public RuleCall getPrintParserRuleCall_0() { return cPrintParserRuleCall_0; }
		
		//PrintCurMsg
		public RuleCall getPrintCurMsgParserRuleCall_1() { return cPrintCurMsgParserRuleCall_1; }
		
		//SolveGoal
		public RuleCall getSolveGoalParserRuleCall_2() { return cSolveGoalParserRuleCall_2; }
		
		////general
		//Forward
		public RuleCall getForwardParserRuleCall_3() { return cForwardParserRuleCall_3; }
		
		//Emit
		public RuleCall getEmitParserRuleCall_4() { return cEmitParserRuleCall_4; }
		
		//Delay
		public RuleCall getDelayParserRuleCall_5() { return cDelayParserRuleCall_5; }
		
		//MsgCond
		public RuleCall getMsgCondParserRuleCall_6() { return cMsgCondParserRuleCall_6; }
		
		////qak kotlin
		//CodeRun
		public RuleCall getCodeRunParserRuleCall_7() { return cCodeRunParserRuleCall_7; }
		
		//AnyAction
		public RuleCall getAnyActionParserRuleCall_8() { return cAnyActionParserRuleCall_8; }
		
		//Exec
		public RuleCall getExecParserRuleCall_9() { return cExecParserRuleCall_9; }
	}
	public class PrintCurMsgElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.jcc.xtext.SimpleAgent.PrintCurMsg");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPrintCurMsgAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cPrintCurrentMessageKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//PrintCurMsg:
		//	{PrintCurMsg} "printCurrentMessage";
		@Override public ParserRule getRule() { return rule; }
		
		//{PrintCurMsg} "printCurrentMessage"
		public Group getGroup() { return cGroup; }
		
		//{PrintCurMsg}
		public Action getPrintCurMsgAction_0() { return cPrintCurMsgAction_0; }
		
		//"printCurrentMessage"
		public Keyword getPrintCurrentMessageKeyword_1() { return cPrintCurrentMessageKeyword_1; }
	}
	public class PrintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.jcc.xtext.SimpleAgent.Print");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPrintAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cPrintlnKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cArgsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cArgsPHeadParserRuleCall_3_0 = (RuleCall)cArgsAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Print:
		//	{Print} "println" "(" args=PHead ")";
		@Override public ParserRule getRule() { return rule; }
		
		//{Print} "println" "(" args=PHead ")"
		public Group getGroup() { return cGroup; }
		
		//{Print}
		public Action getPrintAction_0() { return cPrintAction_0; }
		
		//"println"
		public Keyword getPrintlnKeyword_1() { return cPrintlnKeyword_1; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//args=PHead
		public Assignment getArgsAssignment_3() { return cArgsAssignment_3; }
		
		//PHead
		public RuleCall getArgsPHeadParserRuleCall_3_0() { return cArgsPHeadParserRuleCall_3_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class SolveGoalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.jcc.xtext.SimpleAgent.SolveGoal");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSolveGoalAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cSolveKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cGoalAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cGoalPHeadParserRuleCall_3_0 = (RuleCall)cGoalAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cResVarAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cResVarVariableParserRuleCall_4_1_0 = (RuleCall)cResVarAssignment_4_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//SolveGoal:
		//	{SolveGoal} "solve" "(" goal=PHead ("," resVar=Variable)? ")";
		@Override public ParserRule getRule() { return rule; }
		
		//{SolveGoal} "solve" "(" goal=PHead ("," resVar=Variable)? ")"
		public Group getGroup() { return cGroup; }
		
		//{SolveGoal}
		public Action getSolveGoalAction_0() { return cSolveGoalAction_0; }
		
		//"solve"
		public Keyword getSolveKeyword_1() { return cSolveKeyword_1; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//goal=PHead
		public Assignment getGoalAssignment_3() { return cGoalAssignment_3; }
		
		//PHead
		public RuleCall getGoalPHeadParserRuleCall_3_0() { return cGoalPHeadParserRuleCall_3_0; }
		
		//("," resVar=Variable)?
		public Group getGroup_4() { return cGroup_4; }
		
		//","
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }
		
		//resVar=Variable
		public Assignment getResVarAssignment_4_1() { return cResVarAssignment_4_1; }
		
		//Variable
		public RuleCall getResVarVariableParserRuleCall_4_1_0() { return cResVarVariableParserRuleCall_4_1_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}
	public class ForwardElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.jcc.xtext.SimpleAgent.Forward");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cForwardKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDestAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cDestBehaviorDeclarationCrossReference_1_0 = (CrossReference)cDestAssignment_1.eContents().get(0);
		private final RuleCall cDestBehaviorDeclarationIDTerminalRuleCall_1_0_1 = (RuleCall)cDestBehaviorDeclarationCrossReference_1_0.eContents().get(1);
		private final Keyword cMKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cMsgrefAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cMsgrefMessageCrossReference_3_0 = (CrossReference)cMsgrefAssignment_3.eContents().get(0);
		private final RuleCall cMsgrefMessageIDTerminalRuleCall_3_0_1 = (RuleCall)cMsgrefMessageCrossReference_3_0.eContents().get(1);
		private final Keyword cColonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cValAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cValPHeadParserRuleCall_5_0 = (RuleCall)cValAssignment_5.eContents().get(0);
		
		//Forward:
		//	"forward" dest=[BehaviorDeclaration] "-m" msgref=[Message] ":" val=PHead;
		@Override public ParserRule getRule() { return rule; }
		
		//"forward" dest=[BehaviorDeclaration] "-m" msgref=[Message] ":" val=PHead
		public Group getGroup() { return cGroup; }
		
		//"forward"
		public Keyword getForwardKeyword_0() { return cForwardKeyword_0; }
		
		//dest=[BehaviorDeclaration]
		public Assignment getDestAssignment_1() { return cDestAssignment_1; }
		
		//[BehaviorDeclaration]
		public CrossReference getDestBehaviorDeclarationCrossReference_1_0() { return cDestBehaviorDeclarationCrossReference_1_0; }
		
		//ID
		public RuleCall getDestBehaviorDeclarationIDTerminalRuleCall_1_0_1() { return cDestBehaviorDeclarationIDTerminalRuleCall_1_0_1; }
		
		//"-m"
		public Keyword getMKeyword_2() { return cMKeyword_2; }
		
		//msgref=[Message]
		public Assignment getMsgrefAssignment_3() { return cMsgrefAssignment_3; }
		
		//[Message]
		public CrossReference getMsgrefMessageCrossReference_3_0() { return cMsgrefMessageCrossReference_3_0; }
		
		//ID
		public RuleCall getMsgrefMessageIDTerminalRuleCall_3_0_1() { return cMsgrefMessageIDTerminalRuleCall_3_0_1; }
		
		//":"
		public Keyword getColonKeyword_4() { return cColonKeyword_4; }
		
		//val=PHead
		public Assignment getValAssignment_5() { return cValAssignment_5; }
		
		//PHead
		public RuleCall getValPHeadParserRuleCall_5_0() { return cValPHeadParserRuleCall_5_0; }
	}
	public class EmitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.jcc.xtext.SimpleAgent.Emit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEmitKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cMsgrefAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cMsgrefEventCrossReference_1_0 = (CrossReference)cMsgrefAssignment_1.eContents().get(0);
		private final RuleCall cMsgrefEventIDTerminalRuleCall_1_0_1 = (RuleCall)cMsgrefEventCrossReference_1_0.eContents().get(1);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValPHeadParserRuleCall_3_0 = (RuleCall)cValAssignment_3.eContents().get(0);
		
		//Emit:
		//	"emit" msgref=[Event] ":" val=PHead;
		@Override public ParserRule getRule() { return rule; }
		
		//"emit" msgref=[Event] ":" val=PHead
		public Group getGroup() { return cGroup; }
		
		//"emit"
		public Keyword getEmitKeyword_0() { return cEmitKeyword_0; }
		
		//msgref=[Event]
		public Assignment getMsgrefAssignment_1() { return cMsgrefAssignment_1; }
		
		//[Event]
		public CrossReference getMsgrefEventCrossReference_1_0() { return cMsgrefEventCrossReference_1_0; }
		
		//ID
		public RuleCall getMsgrefEventIDTerminalRuleCall_1_0_1() { return cMsgrefEventIDTerminalRuleCall_1_0_1; }
		
		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//val=PHead
		public Assignment getValAssignment_3() { return cValAssignment_3; }
		
		//PHead
		public RuleCall getValPHeadParserRuleCall_3_0() { return cValPHeadParserRuleCall_3_0; }
	}
	public class DelayElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.jcc.xtext.SimpleAgent.Delay");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDelayIntParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDelayVarParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cDelayVrefParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cDelaySolParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//Delay:
		//	DelayInt | DelayVar | DelayVref | DelaySol;
		@Override public ParserRule getRule() { return rule; }
		
		//DelayInt | DelayVar | DelayVref | DelaySol
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//DelayInt
		public RuleCall getDelayIntParserRuleCall_0() { return cDelayIntParserRuleCall_0; }
		
		//DelayVar
		public RuleCall getDelayVarParserRuleCall_1() { return cDelayVarParserRuleCall_1; }
		
		//DelayVref
		public RuleCall getDelayVrefParserRuleCall_2() { return cDelayVrefParserRuleCall_2; }
		
		//DelaySol
		public RuleCall getDelaySolParserRuleCall_3() { return cDelaySolParserRuleCall_3; }
	}
	public class DelayIntElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.jcc.xtext.SimpleAgent.DelayInt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDelayKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTimeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTimeINTTerminalRuleCall_1_0 = (RuleCall)cTimeAssignment_1.eContents().get(0);
		
		//DelayInt:
		//	"delay" time=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//"delay" time=INT
		public Group getGroup() { return cGroup; }
		
		//"delay"
		public Keyword getDelayKeyword_0() { return cDelayKeyword_0; }
		
		//time=INT
		public Assignment getTimeAssignment_1() { return cTimeAssignment_1; }
		
		//INT
		public RuleCall getTimeINTTerminalRuleCall_1_0() { return cTimeINTTerminalRuleCall_1_0; }
	}
	public class DelayVarElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.jcc.xtext.SimpleAgent.DelayVar");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDelayVarKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cRefvarAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRefvarVariableParserRuleCall_1_0 = (RuleCall)cRefvarAssignment_1.eContents().get(0);
		
		//DelayVar:
		//	"delayVar" refvar=Variable;
		@Override public ParserRule getRule() { return rule; }
		
		//"delayVar" refvar=Variable
		public Group getGroup() { return cGroup; }
		
		//"delayVar"
		public Keyword getDelayVarKeyword_0() { return cDelayVarKeyword_0; }
		
		//refvar=Variable
		public Assignment getRefvarAssignment_1() { return cRefvarAssignment_1; }
		
		//Variable
		public RuleCall getRefvarVariableParserRuleCall_1_0() { return cRefvarVariableParserRuleCall_1_0; }
	}
	public class DelayVrefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.jcc.xtext.SimpleAgent.DelayVref");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDelayVarRefKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cReftimeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cReftimeVarRefParserRuleCall_1_0 = (RuleCall)cReftimeAssignment_1.eContents().get(0);
		
		//DelayVref:
		//	"delayVarRef" reftime=VarRef;
		@Override public ParserRule getRule() { return rule; }
		
		//"delayVarRef" reftime=VarRef
		public Group getGroup() { return cGroup; }
		
		//"delayVarRef"
		public Keyword getDelayVarRefKeyword_0() { return cDelayVarRefKeyword_0; }
		
		//reftime=VarRef
		public Assignment getReftimeAssignment_1() { return cReftimeAssignment_1; }
		
		//VarRef
		public RuleCall getReftimeVarRefParserRuleCall_1_0() { return cReftimeVarRefParserRuleCall_1_0; }
	}
	public class DelaySolElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.jcc.xtext.SimpleAgent.DelaySol");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDelaySolKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cRefsoltimeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRefsoltimeVarSolRefParserRuleCall_1_0 = (RuleCall)cRefsoltimeAssignment_1.eContents().get(0);
		
		//DelaySol:
		//	"delaySol" refsoltime=VarSolRef;
		@Override public ParserRule getRule() { return rule; }
		
		//"delaySol" refsoltime=VarSolRef
		public Group getGroup() { return cGroup; }
		
		//"delaySol"
		public Keyword getDelaySolKeyword_0() { return cDelaySolKeyword_0; }
		
		//refsoltime=VarSolRef
		public Assignment getRefsoltimeAssignment_1() { return cRefsoltimeAssignment_1; }
		
		//VarSolRef
		public RuleCall getRefsoltimeVarSolRefParserRuleCall_1_0() { return cRefsoltimeVarSolRefParserRuleCall_1_0; }
	}
	public class MsgCondElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.jcc.xtext.SimpleAgent.MsgCond");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOnMsgKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cMessageAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cMessageMessageCrossReference_2_0 = (CrossReference)cMessageAssignment_2.eContents().get(0);
		private final RuleCall cMessageMessageIDTerminalRuleCall_2_0_1 = (RuleCall)cMessageMessageCrossReference_2_0.eContents().get(1);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cMsgAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cMsgPHeadParserRuleCall_4_0 = (RuleCall)cMsgAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cLeftCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cActionsAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cActionsGuardedStateActionParserRuleCall_7_0 = (RuleCall)cActionsAssignment_7.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Group cGroup_9 = (Group)cGroup.eContents().get(9);
		private final Keyword cElseKeyword_9_0 = (Keyword)cGroup_9.eContents().get(0);
		private final Assignment cIfnotAssignment_9_1 = (Assignment)cGroup_9.eContents().get(1);
		private final RuleCall cIfnotNoMsgCondParserRuleCall_9_1_0 = (RuleCall)cIfnotAssignment_9_1.eContents().get(0);
		
		//MsgCond:
		//	"onMsg" "(" message=[Message] ":" msg=PHead ")" "{" actions+=GuardedStateAction* "}" ("else" ifnot=NoMsgCond)?;
		@Override public ParserRule getRule() { return rule; }
		
		//"onMsg" "(" message=[Message] ":" msg=PHead ")" "{" actions+=GuardedStateAction* "}" ("else" ifnot=NoMsgCond)?
		public Group getGroup() { return cGroup; }
		
		//"onMsg"
		public Keyword getOnMsgKeyword_0() { return cOnMsgKeyword_0; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//message=[Message]
		public Assignment getMessageAssignment_2() { return cMessageAssignment_2; }
		
		//[Message]
		public CrossReference getMessageMessageCrossReference_2_0() { return cMessageMessageCrossReference_2_0; }
		
		//ID
		public RuleCall getMessageMessageIDTerminalRuleCall_2_0_1() { return cMessageMessageIDTerminalRuleCall_2_0_1; }
		
		//":"
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }
		
		//msg=PHead
		public Assignment getMsgAssignment_4() { return cMsgAssignment_4; }
		
		//PHead
		public RuleCall getMsgPHeadParserRuleCall_4_0() { return cMsgPHeadParserRuleCall_4_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_6() { return cLeftCurlyBracketKeyword_6; }
		
		//actions+=GuardedStateAction*
		public Assignment getActionsAssignment_7() { return cActionsAssignment_7; }
		
		//GuardedStateAction
		public RuleCall getActionsGuardedStateActionParserRuleCall_7_0() { return cActionsGuardedStateActionParserRuleCall_7_0; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
		
		//("else" ifnot=NoMsgCond)?
		public Group getGroup_9() { return cGroup_9; }
		
		//"else"
		public Keyword getElseKeyword_9_0() { return cElseKeyword_9_0; }
		
		//ifnot=NoMsgCond
		public Assignment getIfnotAssignment_9_1() { return cIfnotAssignment_9_1; }
		
		//NoMsgCond
		public RuleCall getIfnotNoMsgCondParserRuleCall_9_1_0() { return cIfnotNoMsgCondParserRuleCall_9_1_0; }
	}
	public class NoMsgCondElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.jcc.xtext.SimpleAgent.NoMsgCond");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cNoMsgCondAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cActionsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cActionsGuardedStateActionParserRuleCall_2_0 = (RuleCall)cActionsAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//NoMsgCond:
		//	{NoMsgCond} "{" actions+=GuardedStateAction* "}";
		@Override public ParserRule getRule() { return rule; }
		
		//{NoMsgCond} "{" actions+=GuardedStateAction* "}"
		public Group getGroup() { return cGroup; }
		
		//{NoMsgCond}
		public Action getNoMsgCondAction_0() { return cNoMsgCondAction_0; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//actions+=GuardedStateAction*
		public Assignment getActionsAssignment_2() { return cActionsAssignment_2; }
		
		//GuardedStateAction
		public RuleCall getActionsGuardedStateActionParserRuleCall_2_0() { return cActionsGuardedStateActionParserRuleCall_2_0; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class AnyActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.jcc.xtext.SimpleAgent.AnyAction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cBodyAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cBodySTRINGTerminalRuleCall_1_0 = (RuleCall)cBodyAssignment_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//AnyAction:
		//	"[" body=STRING "]";
		@Override public ParserRule getRule() { return rule; }
		
		//"[" body=STRING "]"
		public Group getGroup() { return cGroup; }
		
		//"["
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }
		
		//body=STRING
		public Assignment getBodyAssignment_1() { return cBodyAssignment_1; }
		
		//STRING
		public RuleCall getBodySTRINGTerminalRuleCall_1_0() { return cBodySTRINGTerminalRuleCall_1_0; }
		
		//"]"
		public Keyword getRightSquareBracketKeyword_2() { return cRightSquareBracketKeyword_2; }
	}
	public class CodeRunElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.jcc.xtext.SimpleAgent.CodeRun");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cCodeRunActorParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCodeRunSimpleParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//CodeRun:
		//	CodeRunActor | CodeRunSimple;
		@Override public ParserRule getRule() { return rule; }
		
		//CodeRunActor | CodeRunSimple
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//CodeRunActor
		public RuleCall getCodeRunActorParserRuleCall_0() { return cCodeRunActorParserRuleCall_0; }
		
		//CodeRunSimple
		public RuleCall getCodeRunSimpleParserRuleCall_1() { return cCodeRunSimpleParserRuleCall_1; }
	}
	public class CodeRunActorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.jcc.xtext.SimpleAgent.CodeRunActor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRunKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cItemAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cItemQualifiedNameParserRuleCall_1_0 = (RuleCall)cItemAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cMyselfKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cArgsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cArgsCodeRunArgParserRuleCall_4_1_0 = (RuleCall)cArgsAssignment_4_1.eContents().get(0);
		private final Group cGroup_4_2 = (Group)cGroup_4.eContents().get(2);
		private final Keyword cCommaKeyword_4_2_0 = (Keyword)cGroup_4_2.eContents().get(0);
		private final Assignment cArgsAssignment_4_2_1 = (Assignment)cGroup_4_2.eContents().get(1);
		private final RuleCall cArgsCodeRunArgParserRuleCall_4_2_1_0 = (RuleCall)cArgsAssignment_4_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//// "run" item=QualifiedName "(" (actor ?="myself" ",")? ( args+=PHead ("," args+=PHead)* )? ")" ;
		//CodeRunActor:
		//	"run" item=QualifiedName "(" "myself" ("," args+=CodeRunArg ("," args+=CodeRunArg)*)? ")";
		@Override public ParserRule getRule() { return rule; }
		
		//"run" item=QualifiedName "(" "myself" ("," args+=CodeRunArg ("," args+=CodeRunArg)*)? ")"
		public Group getGroup() { return cGroup; }
		
		//"run"
		public Keyword getRunKeyword_0() { return cRunKeyword_0; }
		
		//item=QualifiedName
		public Assignment getItemAssignment_1() { return cItemAssignment_1; }
		
		//QualifiedName
		public RuleCall getItemQualifiedNameParserRuleCall_1_0() { return cItemQualifiedNameParserRuleCall_1_0; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//"myself"
		public Keyword getMyselfKeyword_3() { return cMyselfKeyword_3; }
		
		//("," args+=CodeRunArg ("," args+=CodeRunArg)*)?
		public Group getGroup_4() { return cGroup_4; }
		
		//","
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }
		
		//args+=CodeRunArg
		public Assignment getArgsAssignment_4_1() { return cArgsAssignment_4_1; }
		
		//CodeRunArg
		public RuleCall getArgsCodeRunArgParserRuleCall_4_1_0() { return cArgsCodeRunArgParserRuleCall_4_1_0; }
		
		//("," args+=CodeRunArg)*
		public Group getGroup_4_2() { return cGroup_4_2; }
		
		//","
		public Keyword getCommaKeyword_4_2_0() { return cCommaKeyword_4_2_0; }
		
		//args+=CodeRunArg
		public Assignment getArgsAssignment_4_2_1() { return cArgsAssignment_4_2_1; }
		
		//CodeRunArg
		public RuleCall getArgsCodeRunArgParserRuleCall_4_2_1_0() { return cArgsCodeRunArgParserRuleCall_4_2_1_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}
	public class CodeRunSimpleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.jcc.xtext.SimpleAgent.CodeRunSimple");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRunKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cItemAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cItemQualifiedNameParserRuleCall_1_0 = (RuleCall)cItemAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cArgsAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cArgsCodeRunArgParserRuleCall_3_0_0 = (RuleCall)cArgsAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cArgsAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cArgsCodeRunArgParserRuleCall_3_1_1_0 = (RuleCall)cArgsAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//CodeRunSimple:
		//	"run" item=QualifiedName "(" (args+=CodeRunArg ("," args+=CodeRunArg)*)? ")";
		@Override public ParserRule getRule() { return rule; }
		
		//"run" item=QualifiedName "(" (args+=CodeRunArg ("," args+=CodeRunArg)*)? ")"
		public Group getGroup() { return cGroup; }
		
		//"run"
		public Keyword getRunKeyword_0() { return cRunKeyword_0; }
		
		//item=QualifiedName
		public Assignment getItemAssignment_1() { return cItemAssignment_1; }
		
		//QualifiedName
		public RuleCall getItemQualifiedNameParserRuleCall_1_0() { return cItemQualifiedNameParserRuleCall_1_0; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//(args+=CodeRunArg ("," args+=CodeRunArg)*)?
		public Group getGroup_3() { return cGroup_3; }
		
		//args+=CodeRunArg
		public Assignment getArgsAssignment_3_0() { return cArgsAssignment_3_0; }
		
		//CodeRunArg
		public RuleCall getArgsCodeRunArgParserRuleCall_3_0_0() { return cArgsCodeRunArgParserRuleCall_3_0_0; }
		
		//("," args+=CodeRunArg)*
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//","
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }
		
		//args+=CodeRunArg
		public Assignment getArgsAssignment_3_1_1() { return cArgsAssignment_3_1_1; }
		
		//CodeRunArg
		public RuleCall getArgsCodeRunArgParserRuleCall_3_1_1_0() { return cArgsCodeRunArgParserRuleCall_3_1_1_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class ExecElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.jcc.xtext.SimpleAgent.Exec");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMachineExecKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cActionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cActionSTRINGTerminalRuleCall_1_0 = (RuleCall)cActionAssignment_1.eContents().get(0);
		
		//Exec:
		//	"machineExec" action=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//"machineExec" action=STRING
		public Group getGroup() { return cGroup; }
		
		//"machineExec"
		public Keyword getMachineExecKeyword_0() { return cMachineExecKeyword_0; }
		
		//action=STRING
		public Assignment getActionAssignment_1() { return cActionAssignment_1; }
		
		//STRING
		public RuleCall getActionSTRINGTerminalRuleCall_1_0() { return cActionSTRINGTerminalRuleCall_1_0; }
	}
	public class PHeadElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.jcc.xtext.SimpleAgent.PHead");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPAtomParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPStructParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cPStructRefParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		///*
		// * PROLOG like
		// */ PHead:
		//	PAtom | PStruct | PStructRef;
		@Override public ParserRule getRule() { return rule; }
		
		//PAtom | PStruct | PStructRef
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//PAtom
		public RuleCall getPAtomParserRuleCall_0() { return cPAtomParserRuleCall_0; }
		
		//PStruct
		public RuleCall getPStructParserRuleCall_1() { return cPStructParserRuleCall_1; }
		
		//PStructRef
		public RuleCall getPStructRefParserRuleCall_2() { return cPStructRefParserRuleCall_2; }
	}
	public class PAtomElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.jcc.xtext.SimpleAgent.PAtom");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPAtomStringParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cVariableParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cPAtomNumParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cPAtomicParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cVarRefParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cVarSolRefParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cVarRefInStrParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		
		//PAtom:
		//	PAtomString | Variable | PAtomNum | PAtomic | VarRef | VarSolRef | VarRefInStr;
		@Override public ParserRule getRule() { return rule; }
		
		//PAtomString | Variable | PAtomNum | PAtomic | VarRef | VarSolRef | VarRefInStr
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//PAtomString
		public RuleCall getPAtomStringParserRuleCall_0() { return cPAtomStringParserRuleCall_0; }
		
		//Variable
		public RuleCall getVariableParserRuleCall_1() { return cVariableParserRuleCall_1; }
		
		//PAtomNum
		public RuleCall getPAtomNumParserRuleCall_2() { return cPAtomNumParserRuleCall_2; }
		
		//PAtomic
		public RuleCall getPAtomicParserRuleCall_3() { return cPAtomicParserRuleCall_3; }
		
		//VarRef
		public RuleCall getVarRefParserRuleCall_4() { return cVarRefParserRuleCall_4; }
		
		//VarSolRef
		public RuleCall getVarSolRefParserRuleCall_5() { return cVarSolRefParserRuleCall_5; }
		
		//VarRefInStr
		public RuleCall getVarRefInStrParserRuleCall_6() { return cVarRefInStrParserRuleCall_6; }
	}
	public class PAtomStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.jcc.xtext.SimpleAgent.PAtomString");
		private final Assignment cValAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValSTRINGTerminalRuleCall_0 = (RuleCall)cValAssignment.eContents().get(0);
		
		//PAtomString:
		//	val=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//val=STRING
		public Assignment getValAssignment() { return cValAssignment; }
		
		//STRING
		public RuleCall getValSTRINGTerminalRuleCall_0() { return cValSTRINGTerminalRuleCall_0; }
	}
	public class PAtomicElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.jcc.xtext.SimpleAgent.PAtomic");
		private final Assignment cValAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValIDTerminalRuleCall_0 = (RuleCall)cValAssignment.eContents().get(0);
		
		//PAtomic:
		//	val=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//val=ID
		public Assignment getValAssignment() { return cValAssignment; }
		
		//ID
		public RuleCall getValIDTerminalRuleCall_0() { return cValIDTerminalRuleCall_0; }
	}
	public class PAtomNumElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.jcc.xtext.SimpleAgent.PAtomNum");
		private final Assignment cValAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValINTTerminalRuleCall_0 = (RuleCall)cValAssignment.eContents().get(0);
		
		//PAtomNum:
		//	val=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//val=INT
		public Assignment getValAssignment() { return cValAssignment; }
		
		//INT
		public RuleCall getValINTTerminalRuleCall_0() { return cValINTTerminalRuleCall_0; }
	}
	public class PStructRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.jcc.xtext.SimpleAgent.PStructRef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDollarSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cStructAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cStructPStructParserRuleCall_1_0 = (RuleCall)cStructAssignment_1.eContents().get(0);
		
		//PStructRef:
		//	"$" struct=PStruct;
		@Override public ParserRule getRule() { return rule; }
		
		//"$" struct=PStruct
		public Group getGroup() { return cGroup; }
		
		//"$"
		public Keyword getDollarSignKeyword_0() { return cDollarSignKeyword_0; }
		
		//struct=PStruct
		public Assignment getStructAssignment_1() { return cStructAssignment_1; }
		
		//PStruct
		public RuleCall getStructPStructParserRuleCall_1_0() { return cStructPStructParserRuleCall_1_0; }
	}
	public class PStructElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.jcc.xtext.SimpleAgent.PStruct");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFunctorAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cFunctorIDTerminalRuleCall_0_0 = (RuleCall)cFunctorAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cMsgArgAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cMsgArgPHeadParserRuleCall_2_0 = (RuleCall)cMsgArgAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cMsgArgAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cMsgArgPHeadParserRuleCall_3_1_0 = (RuleCall)cMsgArgAssignment_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		////
		//PStruct:
		//	functor=ID "(" msgArg+=PHead? ("," msgArg+=PHead)* ")";
		@Override public ParserRule getRule() { return rule; }
		
		//functor=ID "(" msgArg+=PHead? ("," msgArg+=PHead)* ")"
		public Group getGroup() { return cGroup; }
		
		//functor=ID
		public Assignment getFunctorAssignment_0() { return cFunctorAssignment_0; }
		
		//ID
		public RuleCall getFunctorIDTerminalRuleCall_0_0() { return cFunctorIDTerminalRuleCall_0_0; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//msgArg+=PHead?
		public Assignment getMsgArgAssignment_2() { return cMsgArgAssignment_2; }
		
		//PHead
		public RuleCall getMsgArgPHeadParserRuleCall_2_0() { return cMsgArgPHeadParserRuleCall_2_0; }
		
		//("," msgArg+=PHead)*
		public Group getGroup_3() { return cGroup_3; }
		
		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }
		
		//msgArg+=PHead
		public Assignment getMsgArgAssignment_3_1() { return cMsgArgAssignment_3_1; }
		
		//PHead
		public RuleCall getMsgArgPHeadParserRuleCall_3_1_0() { return cMsgArgPHeadParserRuleCall_3_1_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class VariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.jcc.xtext.SimpleAgent.Variable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cVariableAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cVarNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVarNameVARIDTerminalRuleCall_1_0 = (RuleCall)cVarNameAssignment_1.eContents().get(0);
		
		//Variable:
		//	{Variable} varName=VARID;
		@Override public ParserRule getRule() { return rule; }
		
		//{Variable} varName=VARID
		public Group getGroup() { return cGroup; }
		
		//{Variable}
		public Action getVariableAction_0() { return cVariableAction_0; }
		
		//varName=VARID
		public Assignment getVarNameAssignment_1() { return cVarNameAssignment_1; }
		
		//VARID
		public RuleCall getVarNameVARIDTerminalRuleCall_1_0() { return cVarNameVARIDTerminalRuleCall_1_0; }
	}
	public class VarRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.jcc.xtext.SimpleAgent.VarRef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDollarSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cVarNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVarNameVARIDTerminalRuleCall_1_0 = (RuleCall)cVarNameAssignment_1.eContents().get(0);
		
		////USING vars (from solve or from code)
		//VarRef:
		//	"$" varName=VARID;
		@Override public ParserRule getRule() { return rule; }
		
		//"$" varName=VARID
		public Group getGroup() { return cGroup; }
		
		//"$"
		public Keyword getDollarSignKeyword_0() { return cDollarSignKeyword_0; }
		
		//varName=VARID
		public Assignment getVarNameAssignment_1() { return cVarNameAssignment_1; }
		
		//VARID
		public RuleCall getVarNameVARIDTerminalRuleCall_1_0() { return cVarNameVARIDTerminalRuleCall_1_0; }
	}
	public class VarRefInStrElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.jcc.xtext.SimpleAgent.VarRefInStr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNumberSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cVarNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVarNameVARIDTerminalRuleCall_1_0 = (RuleCall)cVarNameAssignment_1.eContents().get(0);
		
		////in msg payload  e.g. modelChange(robot,$Curmove) => $Curmove
		//VarRefInStr:
		//	"#" varName=VARID;
		@Override public ParserRule getRule() { return rule; }
		
		//"#" varName=VARID
		public Group getGroup() { return cGroup; }
		
		//"#"
		public Keyword getNumberSignKeyword_0() { return cNumberSignKeyword_0; }
		
		//varName=VARID
		public Assignment getVarNameAssignment_1() { return cVarNameAssignment_1; }
		
		//VARID
		public RuleCall getVarNameVARIDTerminalRuleCall_1_0() { return cVarNameVARIDTerminalRuleCall_1_0; }
	}
	public class VarSolRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.jcc.xtext.SimpleAgent.VarSolRef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCommercialAtKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cVarNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVarNameVARIDTerminalRuleCall_1_0 = (RuleCall)cVarNameAssignment_1.eContents().get(0);
		
		////in msg payload. e.g. modelChange(robot,#M)       => ${getCurSol("M").toString()}
		//VarSolRef:
		//	"@" varName=VARID;
		@Override public ParserRule getRule() { return rule; }
		
		//"@" varName=VARID
		public Group getGroup() { return cGroup; }
		
		//"@"
		public Keyword getCommercialAtKeyword_0() { return cCommercialAtKeyword_0; }
		
		//varName=VARID
		public Assignment getVarNameAssignment_1() { return cVarNameAssignment_1; }
		
		//VARID
		public RuleCall getVarNameVARIDTerminalRuleCall_1_0() { return cVarNameVARIDTerminalRuleCall_1_0; }
	}
	
	
	private final SimpleAgentElements pSimpleAgent;
	private final QActorSystemSpecElements pQActorSystemSpec;
	private final BehaviorDeclarationElements pBehaviorDeclaration;
	private final QualifiedNameElements pQualifiedName;
	private final TerminalRule tVARID;
	private final BehaviorElements pBehavior;
	private final BehaviorExternalElements pBehaviorExternal;
	private final ActionElements pAction;
	private final OnEffectElements pOnEffect;
	private final CompensationElements pCompensation;
	private final ActionBodyElements pActionBody;
	private final CodeRunArgElements pCodeRunArg;
	private final BuiltinVarElements pBuiltinVar;
	private final BrokerSpecElements pBrokerSpec;
	private final MessageElements pMessage;
	private final OutOnlyMessageElements pOutOnlyMessage;
	private final OutInMessageElements pOutInMessage;
	private final EventElements pEvent;
	private final SignalElements pSignal;
	private final TokenElements pToken;
	private final DispatchElements pDispatch;
	private final RequestElements pRequest;
	private final InvitationElements pInvitation;
	private final ContextElements pContext;
	private final ComponentIPElements pComponentIP;
	private final GuardedStateActionElements pGuardedStateAction;
	private final StateActionElements pStateAction;
	private final PrintCurMsgElements pPrintCurMsg;
	private final PrintElements pPrint;
	private final SolveGoalElements pSolveGoal;
	private final ForwardElements pForward;
	private final EmitElements pEmit;
	private final DelayElements pDelay;
	private final DelayIntElements pDelayInt;
	private final DelayVarElements pDelayVar;
	private final DelayVrefElements pDelayVref;
	private final DelaySolElements pDelaySol;
	private final MsgCondElements pMsgCond;
	private final NoMsgCondElements pNoMsgCond;
	private final AnyActionElements pAnyAction;
	private final CodeRunElements pCodeRun;
	private final CodeRunActorElements pCodeRunActor;
	private final CodeRunSimpleElements pCodeRunSimple;
	private final ExecElements pExec;
	private final PHeadElements pPHead;
	private final PAtomElements pPAtom;
	private final PAtomStringElements pPAtomString;
	private final PAtomicElements pPAtomic;
	private final PAtomNumElements pPAtomNum;
	private final PStructRefElements pPStructRef;
	private final PStructElements pPStruct;
	private final VariableElements pVariable;
	private final VarRefElements pVarRef;
	private final VarRefInStrElements pVarRefInStr;
	private final VarSolRefElements pVarSolRef;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public SimpleAgentGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pSimpleAgent = new SimpleAgentElements();
		this.pQActorSystemSpec = new QActorSystemSpecElements();
		this.pBehaviorDeclaration = new BehaviorDeclarationElements();
		this.pQualifiedName = new QualifiedNameElements();
		this.tVARID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.jcc.xtext.SimpleAgent.VARID");
		this.pBehavior = new BehaviorElements();
		this.pBehaviorExternal = new BehaviorExternalElements();
		this.pAction = new ActionElements();
		this.pOnEffect = new OnEffectElements();
		this.pCompensation = new CompensationElements();
		this.pActionBody = new ActionBodyElements();
		this.pCodeRunArg = new CodeRunArgElements();
		this.pBuiltinVar = new BuiltinVarElements();
		this.pBrokerSpec = new BrokerSpecElements();
		this.pMessage = new MessageElements();
		this.pOutOnlyMessage = new OutOnlyMessageElements();
		this.pOutInMessage = new OutInMessageElements();
		this.pEvent = new EventElements();
		this.pSignal = new SignalElements();
		this.pToken = new TokenElements();
		this.pDispatch = new DispatchElements();
		this.pRequest = new RequestElements();
		this.pInvitation = new InvitationElements();
		this.pContext = new ContextElements();
		this.pComponentIP = new ComponentIPElements();
		this.pGuardedStateAction = new GuardedStateActionElements();
		this.pStateAction = new StateActionElements();
		this.pPrintCurMsg = new PrintCurMsgElements();
		this.pPrint = new PrintElements();
		this.pSolveGoal = new SolveGoalElements();
		this.pForward = new ForwardElements();
		this.pEmit = new EmitElements();
		this.pDelay = new DelayElements();
		this.pDelayInt = new DelayIntElements();
		this.pDelayVar = new DelayVarElements();
		this.pDelayVref = new DelayVrefElements();
		this.pDelaySol = new DelaySolElements();
		this.pMsgCond = new MsgCondElements();
		this.pNoMsgCond = new NoMsgCondElements();
		this.pAnyAction = new AnyActionElements();
		this.pCodeRun = new CodeRunElements();
		this.pCodeRunActor = new CodeRunActorElements();
		this.pCodeRunSimple = new CodeRunSimpleElements();
		this.pExec = new ExecElements();
		this.pPHead = new PHeadElements();
		this.pPAtom = new PAtomElements();
		this.pPAtomString = new PAtomStringElements();
		this.pPAtomic = new PAtomicElements();
		this.pPAtomNum = new PAtomNumElements();
		this.pPStructRef = new PStructRefElements();
		this.pPStruct = new PStructElements();
		this.pVariable = new VariableElements();
		this.pVarRef = new VarRefElements();
		this.pVarRefInStr = new VarRefInStrElements();
		this.pVarSolRef = new VarSolRefElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("it.unibo.jcc.xtext.SimpleAgent".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//SimpleAgent:
	//	"Agent" name=ID "ip" ip=ComponentIP mqtt="-mqtt"?
	//	"System" "{" system=QActorSystemSpec "}"
	//	behaviors+=BehaviorDeclaration+ // For now assumed only one (internal) Behavior
	//;
	public SimpleAgentElements getSimpleAgentAccess() {
		return pSimpleAgent;
	}
	
	public ParserRule getSimpleAgentRule() {
		return getSimpleAgentAccess().getRule();
	}
	
	//QActorSystemSpec:
	//	{QActorSystemSpec} mqttBroker=BrokerSpec?
	//	message+=Message*
	//	context+=Context*;
	public QActorSystemSpecElements getQActorSystemSpecAccess() {
		return pQActorSystemSpec;
	}
	
	public ParserRule getQActorSystemSpecRule() {
		return getQActorSystemSpecAccess().getRule();
	}
	
	//BehaviorDeclaration:
	//	Behavior | BehaviorExternal;
	public BehaviorDeclarationElements getBehaviorDeclarationAccess() {
		return pBehaviorDeclaration;
	}
	
	public ParserRule getBehaviorDeclarationRule() {
		return getBehaviorDeclarationAccess().getRule();
	}
	
	///* NAMES */ QualifiedName:
	//	ID ('.' ID)*;
	public QualifiedNameElements getQualifiedNameAccess() {
		return pQualifiedName;
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}
	
	//terminal VARID:
	//	('A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getVARIDRule() {
		return tVARID;
	}
	
	//// planner must implement itunibo.jcc.planner.framework.Planner
	//Behavior:
	//	"Behavior" name=ID "planner" planner=QualifiedName "{"
	//	start=AnyAction? ("init" "{" init=ActionBody "}")?
	//	actions+=Action* ("onGoalReached" "{" onGoalReached=ActionBody "}")? ("onSuspended" "{" onSuspended=ActionBody "}")?
	//	("onResumed" "{" onResumed=ActionBody "}")?
	//	"}";
	public BehaviorElements getBehaviorAccess() {
		return pBehavior;
	}
	
	public ParserRule getBehaviorRule() {
		return getBehaviorAccess().getRule();
	}
	
	//BehaviorExternal:
	//	"ExternalBehavior" name=ID "context" context=[Context];
	public BehaviorExternalElements getBehaviorExternalAccess() {
		return pBehaviorExternal;
	}
	
	public ParserRule getBehaviorExternalRule() {
		return getBehaviorExternalAccess().getRule();
	}
	
	//// TODO Semantic check: at most one per action (exactly one?)
	//Action:
	//	"action" actions+=PHead ("," actions+=PHead)* "{" body=ActionBody "}" on+=OnEffect*;
	public ActionElements getActionAccess() {
		return pAction;
	}
	
	public ParserRule getActionRule() {
		return getActionAccess().getRule();
	}
	
	//// TODO Restrict to certain PHeads
	//OnEffect:
	//	"onEffect" "(" effect=[Message] ")" "{"
	//	body=ActionBody
	//	"}"
	//	compensations+=Compensation*;
	public OnEffectElements getOnEffectAccess() {
		return pOnEffect;
	}
	
	public ParserRule getOnEffectRule() {
		return getOnEffectAccess().getRule();
	}
	
	//Compensation:
	//	type="retry" "when" condition=STRING ("{" body=ActionBody "}")? | type="replan" "when" condition=STRING ("{"
	//	body=ActionBody "}")? | type="setGoal" goal=STRING "when" condition=STRING ("{" body=ActionBody "}")?;
	public CompensationElements getCompensationAccess() {
		return pCompensation;
	}
	
	public ParserRule getCompensationRule() {
		return getCompensationAccess().getRule();
	}
	
	//ActionBody:
	//	{ActionBody} instructions+=GuardedStateAction*;
	public ActionBodyElements getActionBodyAccess() {
		return pActionBody;
	}
	
	public ParserRule getActionBodyRule() {
		return getActionBodyAccess().getRule();
	}
	
	//CodeRunArg:
	//	PHead | {CodeRunArg} BuiltinVar;
	public CodeRunArgElements getCodeRunArgAccess() {
		return pCodeRunArg;
	}
	
	public ParserRule getCodeRunArgRule() {
		return getCodeRunArgAccess().getRule();
	}
	
	//// Changed CodeRunSimple and CodeRunActor below
	//BuiltinVar:
	//	"Curmove" | "CurGoal";
	public BuiltinVarElements getBuiltinVarAccess() {
		return pBuiltinVar;
	}
	
	public ParserRule getBuiltinVarRule() {
		return getBuiltinVarAccess().getRule();
	}
	
	//// QActor Syntax
	///* BROKER SPEC */ BrokerSpec:
	//	"mqttBroker" brokerHost=STRING ":" brokerPort=INT;
	public BrokerSpecElements getBrokerSpecAccess() {
		return pBrokerSpec;
	}
	
	public ParserRule getBrokerSpecRule() {
		return getBrokerSpecAccess().getRule();
	}
	
	///*
	// * ------------------------------------------
	// * MESSAGE
	//* ------------------------------------------
	// */ Message:
	//	OutOnlyMessage | OutInMessage;
	public MessageElements getMessageAccess() {
		return pMessage;
	}
	
	public ParserRule getMessageRule() {
		return getMessageAccess().getRule();
	}
	
	//OutOnlyMessage:
	//	Dispatch | Event | Signal | Token;
	public OutOnlyMessageElements getOutOnlyMessageAccess() {
		return pOutOnlyMessage;
	}
	
	public ParserRule getOutOnlyMessageRule() {
		return getOutOnlyMessageAccess().getRule();
	}
	
	//OutInMessage:
	//	Request | Invitation;
	public OutInMessageElements getOutInMessageAccess() {
		return pOutInMessage;
	}
	
	public ParserRule getOutInMessageRule() {
		return getOutInMessageAccess().getRule();
	}
	
	//Event:
	//	"Event" name=ID ":" msg=PHead;
	public EventElements getEventAccess() {
		return pEvent;
	}
	
	public ParserRule getEventRule() {
		return getEventAccess().getRule();
	}
	
	//Signal:
	//	"Signal" name=ID ":" msg=PHead;
	public SignalElements getSignalAccess() {
		return pSignal;
	}
	
	public ParserRule getSignalRule() {
		return getSignalAccess().getRule();
	}
	
	//Token:
	//	"Token" name=ID ":" msg=PHead;
	public TokenElements getTokenAccess() {
		return pToken;
	}
	
	public ParserRule getTokenRule() {
		return getTokenAccess().getRule();
	}
	
	//Dispatch:
	//	"Dispatch" name=ID ":" msg=PHead;
	public DispatchElements getDispatchAccess() {
		return pDispatch;
	}
	
	public ParserRule getDispatchRule() {
		return getDispatchAccess().getRule();
	}
	
	//Request:
	//	"Request" name=ID ":" msg=PHead;
	public RequestElements getRequestAccess() {
		return pRequest;
	}
	
	public ParserRule getRequestRule() {
		return getRequestAccess().getRule();
	}
	
	//Invitation:
	//	"Invitation" name=ID ":" msg=PHead;
	public InvitationElements getInvitationAccess() {
		return pInvitation;
	}
	
	public ParserRule getInvitationRule() {
		return getInvitationAccess().getRule();
	}
	
	///* 
	// * Context
	// */ Context:
	//	"Context" name=ID "ip" ip=ComponentIP mqtt?="-mqtt"?;
	public ContextElements getContextAccess() {
		return pContext;
	}
	
	public ParserRule getContextRule() {
		return getContextAccess().getRule();
	}
	
	//ComponentIP:
	//	{ComponentIP} "[" "host=" host=STRING "port=" port=INT "]";
	public ComponentIPElements getComponentIPAccess() {
		return pComponentIP;
	}
	
	public ParserRule getComponentIPRule() {
		return getComponentIPAccess().getRule();
	}
	
	///*
	// * StateAction
	// */ GuardedStateAction:
	//	("if" guard=STRING | solveGuard?="ifSolved")?
	//	action=StateAction ("else" elseaction=StateAction)?;
	public GuardedStateActionElements getGuardedStateActionAccess() {
		return pGuardedStateAction;
	}
	
	public ParserRule getGuardedStateActionRule() {
		return getGuardedStateActionAccess().getRule();
	}
	
	//StateAction:
	//	Print | PrintCurMsg | SolveGoal | Forward | Emit | Delay | MsgCond | CodeRun | AnyAction | Exec //extra code
	//;
	public StateActionElements getStateActionAccess() {
		return pStateAction;
	}
	
	public ParserRule getStateActionRule() {
		return getStateActionAccess().getRule();
	}
	
	//PrintCurMsg:
	//	{PrintCurMsg} "printCurrentMessage";
	public PrintCurMsgElements getPrintCurMsgAccess() {
		return pPrintCurMsg;
	}
	
	public ParserRule getPrintCurMsgRule() {
		return getPrintCurMsgAccess().getRule();
	}
	
	//Print:
	//	{Print} "println" "(" args=PHead ")";
	public PrintElements getPrintAccess() {
		return pPrint;
	}
	
	public ParserRule getPrintRule() {
		return getPrintAccess().getRule();
	}
	
	//SolveGoal:
	//	{SolveGoal} "solve" "(" goal=PHead ("," resVar=Variable)? ")";
	public SolveGoalElements getSolveGoalAccess() {
		return pSolveGoal;
	}
	
	public ParserRule getSolveGoalRule() {
		return getSolveGoalAccess().getRule();
	}
	
	//Forward:
	//	"forward" dest=[BehaviorDeclaration] "-m" msgref=[Message] ":" val=PHead;
	public ForwardElements getForwardAccess() {
		return pForward;
	}
	
	public ParserRule getForwardRule() {
		return getForwardAccess().getRule();
	}
	
	//Emit:
	//	"emit" msgref=[Event] ":" val=PHead;
	public EmitElements getEmitAccess() {
		return pEmit;
	}
	
	public ParserRule getEmitRule() {
		return getEmitAccess().getRule();
	}
	
	//Delay:
	//	DelayInt | DelayVar | DelayVref | DelaySol;
	public DelayElements getDelayAccess() {
		return pDelay;
	}
	
	public ParserRule getDelayRule() {
		return getDelayAccess().getRule();
	}
	
	//DelayInt:
	//	"delay" time=INT;
	public DelayIntElements getDelayIntAccess() {
		return pDelayInt;
	}
	
	public ParserRule getDelayIntRule() {
		return getDelayIntAccess().getRule();
	}
	
	//DelayVar:
	//	"delayVar" refvar=Variable;
	public DelayVarElements getDelayVarAccess() {
		return pDelayVar;
	}
	
	public ParserRule getDelayVarRule() {
		return getDelayVarAccess().getRule();
	}
	
	//DelayVref:
	//	"delayVarRef" reftime=VarRef;
	public DelayVrefElements getDelayVrefAccess() {
		return pDelayVref;
	}
	
	public ParserRule getDelayVrefRule() {
		return getDelayVrefAccess().getRule();
	}
	
	//DelaySol:
	//	"delaySol" refsoltime=VarSolRef;
	public DelaySolElements getDelaySolAccess() {
		return pDelaySol;
	}
	
	public ParserRule getDelaySolRule() {
		return getDelaySolAccess().getRule();
	}
	
	//MsgCond:
	//	"onMsg" "(" message=[Message] ":" msg=PHead ")" "{" actions+=GuardedStateAction* "}" ("else" ifnot=NoMsgCond)?;
	public MsgCondElements getMsgCondAccess() {
		return pMsgCond;
	}
	
	public ParserRule getMsgCondRule() {
		return getMsgCondAccess().getRule();
	}
	
	//NoMsgCond:
	//	{NoMsgCond} "{" actions+=GuardedStateAction* "}";
	public NoMsgCondElements getNoMsgCondAccess() {
		return pNoMsgCond;
	}
	
	public ParserRule getNoMsgCondRule() {
		return getNoMsgCondAccess().getRule();
	}
	
	//AnyAction:
	//	"[" body=STRING "]";
	public AnyActionElements getAnyActionAccess() {
		return pAnyAction;
	}
	
	public ParserRule getAnyActionRule() {
		return getAnyActionAccess().getRule();
	}
	
	//CodeRun:
	//	CodeRunActor | CodeRunSimple;
	public CodeRunElements getCodeRunAccess() {
		return pCodeRun;
	}
	
	public ParserRule getCodeRunRule() {
		return getCodeRunAccess().getRule();
	}
	
	//// "run" item=QualifiedName "(" (actor ?="myself" ",")? ( args+=PHead ("," args+=PHead)* )? ")" ;
	//CodeRunActor:
	//	"run" item=QualifiedName "(" "myself" ("," args+=CodeRunArg ("," args+=CodeRunArg)*)? ")";
	public CodeRunActorElements getCodeRunActorAccess() {
		return pCodeRunActor;
	}
	
	public ParserRule getCodeRunActorRule() {
		return getCodeRunActorAccess().getRule();
	}
	
	//CodeRunSimple:
	//	"run" item=QualifiedName "(" (args+=CodeRunArg ("," args+=CodeRunArg)*)? ")";
	public CodeRunSimpleElements getCodeRunSimpleAccess() {
		return pCodeRunSimple;
	}
	
	public ParserRule getCodeRunSimpleRule() {
		return getCodeRunSimpleAccess().getRule();
	}
	
	//Exec:
	//	"machineExec" action=STRING;
	public ExecElements getExecAccess() {
		return pExec;
	}
	
	public ParserRule getExecRule() {
		return getExecAccess().getRule();
	}
	
	///*
	// * PROLOG like
	// */ PHead:
	//	PAtom | PStruct | PStructRef;
	public PHeadElements getPHeadAccess() {
		return pPHead;
	}
	
	public ParserRule getPHeadRule() {
		return getPHeadAccess().getRule();
	}
	
	//PAtom:
	//	PAtomString | Variable | PAtomNum | PAtomic | VarRef | VarSolRef | VarRefInStr;
	public PAtomElements getPAtomAccess() {
		return pPAtom;
	}
	
	public ParserRule getPAtomRule() {
		return getPAtomAccess().getRule();
	}
	
	//PAtomString:
	//	val=STRING;
	public PAtomStringElements getPAtomStringAccess() {
		return pPAtomString;
	}
	
	public ParserRule getPAtomStringRule() {
		return getPAtomStringAccess().getRule();
	}
	
	//PAtomic:
	//	val=ID;
	public PAtomicElements getPAtomicAccess() {
		return pPAtomic;
	}
	
	public ParserRule getPAtomicRule() {
		return getPAtomicAccess().getRule();
	}
	
	//PAtomNum:
	//	val=INT;
	public PAtomNumElements getPAtomNumAccess() {
		return pPAtomNum;
	}
	
	public ParserRule getPAtomNumRule() {
		return getPAtomNumAccess().getRule();
	}
	
	//PStructRef:
	//	"$" struct=PStruct;
	public PStructRefElements getPStructRefAccess() {
		return pPStructRef;
	}
	
	public ParserRule getPStructRefRule() {
		return getPStructRefAccess().getRule();
	}
	
	////
	//PStruct:
	//	functor=ID "(" msgArg+=PHead? ("," msgArg+=PHead)* ")";
	public PStructElements getPStructAccess() {
		return pPStruct;
	}
	
	public ParserRule getPStructRule() {
		return getPStructAccess().getRule();
	}
	
	//Variable:
	//	{Variable} varName=VARID;
	public VariableElements getVariableAccess() {
		return pVariable;
	}
	
	public ParserRule getVariableRule() {
		return getVariableAccess().getRule();
	}
	
	////USING vars (from solve or from code)
	//VarRef:
	//	"$" varName=VARID;
	public VarRefElements getVarRefAccess() {
		return pVarRef;
	}
	
	public ParserRule getVarRefRule() {
		return getVarRefAccess().getRule();
	}
	
	////in msg payload  e.g. modelChange(robot,$Curmove) => $Curmove
	//VarRefInStr:
	//	"#" varName=VARID;
	public VarRefInStrElements getVarRefInStrAccess() {
		return pVarRefInStr;
	}
	
	public ParserRule getVarRefInStrRule() {
		return getVarRefInStrAccess().getRule();
	}
	
	////in msg payload. e.g. modelChange(robot,#M)       => ${getCurSol("M").toString()}
	//VarSolRef:
	//	"@" varName=VARID;
	public VarSolRefElements getVarSolRefAccess() {
		return pVarSolRef;
	}
	
	public ParserRule getVarSolRefRule() {
		return getVarSolRefAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
