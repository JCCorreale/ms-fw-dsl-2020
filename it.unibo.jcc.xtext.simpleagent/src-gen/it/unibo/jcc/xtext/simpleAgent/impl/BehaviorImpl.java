/**
 * generated by Xtext 2.18.0.M3
 */
package it.unibo.jcc.xtext.simpleAgent.impl;

import it.unibo.jcc.xtext.simpleAgent.Action;
import it.unibo.jcc.xtext.simpleAgent.ActionBody;
import it.unibo.jcc.xtext.simpleAgent.AnyAction;
import it.unibo.jcc.xtext.simpleAgent.Behavior;
import it.unibo.jcc.xtext.simpleAgent.SimpleAgentPackage;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Behavior</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link it.unibo.jcc.xtext.simpleAgent.impl.BehaviorImpl#getPlanner <em>Planner</em>}</li>
 *   <li>{@link it.unibo.jcc.xtext.simpleAgent.impl.BehaviorImpl#getStart <em>Start</em>}</li>
 *   <li>{@link it.unibo.jcc.xtext.simpleAgent.impl.BehaviorImpl#getInit <em>Init</em>}</li>
 *   <li>{@link it.unibo.jcc.xtext.simpleAgent.impl.BehaviorImpl#getActions <em>Actions</em>}</li>
 *   <li>{@link it.unibo.jcc.xtext.simpleAgent.impl.BehaviorImpl#getOnGoalReached <em>On Goal Reached</em>}</li>
 *   <li>{@link it.unibo.jcc.xtext.simpleAgent.impl.BehaviorImpl#getOnSuspended <em>On Suspended</em>}</li>
 *   <li>{@link it.unibo.jcc.xtext.simpleAgent.impl.BehaviorImpl#getOnResumed <em>On Resumed</em>}</li>
 * </ul>
 *
 * @generated
 */
public class BehaviorImpl extends BehaviorDeclarationImpl implements Behavior
{
  /**
   * The default value of the '{@link #getPlanner() <em>Planner</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPlanner()
   * @generated
   * @ordered
   */
  protected static final String PLANNER_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getPlanner() <em>Planner</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPlanner()
   * @generated
   * @ordered
   */
  protected String planner = PLANNER_EDEFAULT;

  /**
   * The cached value of the '{@link #getStart() <em>Start</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getStart()
   * @generated
   * @ordered
   */
  protected AnyAction start;

  /**
   * The cached value of the '{@link #getInit() <em>Init</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getInit()
   * @generated
   * @ordered
   */
  protected ActionBody init;

  /**
   * The cached value of the '{@link #getActions() <em>Actions</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getActions()
   * @generated
   * @ordered
   */
  protected EList<Action> actions;

  /**
   * The cached value of the '{@link #getOnGoalReached() <em>On Goal Reached</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOnGoalReached()
   * @generated
   * @ordered
   */
  protected ActionBody onGoalReached;

  /**
   * The cached value of the '{@link #getOnSuspended() <em>On Suspended</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOnSuspended()
   * @generated
   * @ordered
   */
  protected ActionBody onSuspended;

  /**
   * The cached value of the '{@link #getOnResumed() <em>On Resumed</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOnResumed()
   * @generated
   * @ordered
   */
  protected ActionBody onResumed;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected BehaviorImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return SimpleAgentPackage.Literals.BEHAVIOR;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getPlanner()
  {
    return planner;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setPlanner(String newPlanner)
  {
    String oldPlanner = planner;
    planner = newPlanner;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SimpleAgentPackage.BEHAVIOR__PLANNER, oldPlanner, planner));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AnyAction getStart()
  {
    return start;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetStart(AnyAction newStart, NotificationChain msgs)
  {
    AnyAction oldStart = start;
    start = newStart;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, SimpleAgentPackage.BEHAVIOR__START, oldStart, newStart);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setStart(AnyAction newStart)
  {
    if (newStart != start)
    {
      NotificationChain msgs = null;
      if (start != null)
        msgs = ((InternalEObject)start).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - SimpleAgentPackage.BEHAVIOR__START, null, msgs);
      if (newStart != null)
        msgs = ((InternalEObject)newStart).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - SimpleAgentPackage.BEHAVIOR__START, null, msgs);
      msgs = basicSetStart(newStart, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SimpleAgentPackage.BEHAVIOR__START, newStart, newStart));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ActionBody getInit()
  {
    return init;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetInit(ActionBody newInit, NotificationChain msgs)
  {
    ActionBody oldInit = init;
    init = newInit;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, SimpleAgentPackage.BEHAVIOR__INIT, oldInit, newInit);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setInit(ActionBody newInit)
  {
    if (newInit != init)
    {
      NotificationChain msgs = null;
      if (init != null)
        msgs = ((InternalEObject)init).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - SimpleAgentPackage.BEHAVIOR__INIT, null, msgs);
      if (newInit != null)
        msgs = ((InternalEObject)newInit).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - SimpleAgentPackage.BEHAVIOR__INIT, null, msgs);
      msgs = basicSetInit(newInit, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SimpleAgentPackage.BEHAVIOR__INIT, newInit, newInit));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Action> getActions()
  {
    if (actions == null)
    {
      actions = new EObjectContainmentEList<Action>(Action.class, this, SimpleAgentPackage.BEHAVIOR__ACTIONS);
    }
    return actions;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ActionBody getOnGoalReached()
  {
    return onGoalReached;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetOnGoalReached(ActionBody newOnGoalReached, NotificationChain msgs)
  {
    ActionBody oldOnGoalReached = onGoalReached;
    onGoalReached = newOnGoalReached;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, SimpleAgentPackage.BEHAVIOR__ON_GOAL_REACHED, oldOnGoalReached, newOnGoalReached);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setOnGoalReached(ActionBody newOnGoalReached)
  {
    if (newOnGoalReached != onGoalReached)
    {
      NotificationChain msgs = null;
      if (onGoalReached != null)
        msgs = ((InternalEObject)onGoalReached).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - SimpleAgentPackage.BEHAVIOR__ON_GOAL_REACHED, null, msgs);
      if (newOnGoalReached != null)
        msgs = ((InternalEObject)newOnGoalReached).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - SimpleAgentPackage.BEHAVIOR__ON_GOAL_REACHED, null, msgs);
      msgs = basicSetOnGoalReached(newOnGoalReached, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SimpleAgentPackage.BEHAVIOR__ON_GOAL_REACHED, newOnGoalReached, newOnGoalReached));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ActionBody getOnSuspended()
  {
    return onSuspended;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetOnSuspended(ActionBody newOnSuspended, NotificationChain msgs)
  {
    ActionBody oldOnSuspended = onSuspended;
    onSuspended = newOnSuspended;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, SimpleAgentPackage.BEHAVIOR__ON_SUSPENDED, oldOnSuspended, newOnSuspended);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setOnSuspended(ActionBody newOnSuspended)
  {
    if (newOnSuspended != onSuspended)
    {
      NotificationChain msgs = null;
      if (onSuspended != null)
        msgs = ((InternalEObject)onSuspended).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - SimpleAgentPackage.BEHAVIOR__ON_SUSPENDED, null, msgs);
      if (newOnSuspended != null)
        msgs = ((InternalEObject)newOnSuspended).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - SimpleAgentPackage.BEHAVIOR__ON_SUSPENDED, null, msgs);
      msgs = basicSetOnSuspended(newOnSuspended, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SimpleAgentPackage.BEHAVIOR__ON_SUSPENDED, newOnSuspended, newOnSuspended));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ActionBody getOnResumed()
  {
    return onResumed;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetOnResumed(ActionBody newOnResumed, NotificationChain msgs)
  {
    ActionBody oldOnResumed = onResumed;
    onResumed = newOnResumed;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, SimpleAgentPackage.BEHAVIOR__ON_RESUMED, oldOnResumed, newOnResumed);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setOnResumed(ActionBody newOnResumed)
  {
    if (newOnResumed != onResumed)
    {
      NotificationChain msgs = null;
      if (onResumed != null)
        msgs = ((InternalEObject)onResumed).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - SimpleAgentPackage.BEHAVIOR__ON_RESUMED, null, msgs);
      if (newOnResumed != null)
        msgs = ((InternalEObject)newOnResumed).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - SimpleAgentPackage.BEHAVIOR__ON_RESUMED, null, msgs);
      msgs = basicSetOnResumed(newOnResumed, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SimpleAgentPackage.BEHAVIOR__ON_RESUMED, newOnResumed, newOnResumed));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case SimpleAgentPackage.BEHAVIOR__START:
        return basicSetStart(null, msgs);
      case SimpleAgentPackage.BEHAVIOR__INIT:
        return basicSetInit(null, msgs);
      case SimpleAgentPackage.BEHAVIOR__ACTIONS:
        return ((InternalEList<?>)getActions()).basicRemove(otherEnd, msgs);
      case SimpleAgentPackage.BEHAVIOR__ON_GOAL_REACHED:
        return basicSetOnGoalReached(null, msgs);
      case SimpleAgentPackage.BEHAVIOR__ON_SUSPENDED:
        return basicSetOnSuspended(null, msgs);
      case SimpleAgentPackage.BEHAVIOR__ON_RESUMED:
        return basicSetOnResumed(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case SimpleAgentPackage.BEHAVIOR__PLANNER:
        return getPlanner();
      case SimpleAgentPackage.BEHAVIOR__START:
        return getStart();
      case SimpleAgentPackage.BEHAVIOR__INIT:
        return getInit();
      case SimpleAgentPackage.BEHAVIOR__ACTIONS:
        return getActions();
      case SimpleAgentPackage.BEHAVIOR__ON_GOAL_REACHED:
        return getOnGoalReached();
      case SimpleAgentPackage.BEHAVIOR__ON_SUSPENDED:
        return getOnSuspended();
      case SimpleAgentPackage.BEHAVIOR__ON_RESUMED:
        return getOnResumed();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case SimpleAgentPackage.BEHAVIOR__PLANNER:
        setPlanner((String)newValue);
        return;
      case SimpleAgentPackage.BEHAVIOR__START:
        setStart((AnyAction)newValue);
        return;
      case SimpleAgentPackage.BEHAVIOR__INIT:
        setInit((ActionBody)newValue);
        return;
      case SimpleAgentPackage.BEHAVIOR__ACTIONS:
        getActions().clear();
        getActions().addAll((Collection<? extends Action>)newValue);
        return;
      case SimpleAgentPackage.BEHAVIOR__ON_GOAL_REACHED:
        setOnGoalReached((ActionBody)newValue);
        return;
      case SimpleAgentPackage.BEHAVIOR__ON_SUSPENDED:
        setOnSuspended((ActionBody)newValue);
        return;
      case SimpleAgentPackage.BEHAVIOR__ON_RESUMED:
        setOnResumed((ActionBody)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case SimpleAgentPackage.BEHAVIOR__PLANNER:
        setPlanner(PLANNER_EDEFAULT);
        return;
      case SimpleAgentPackage.BEHAVIOR__START:
        setStart((AnyAction)null);
        return;
      case SimpleAgentPackage.BEHAVIOR__INIT:
        setInit((ActionBody)null);
        return;
      case SimpleAgentPackage.BEHAVIOR__ACTIONS:
        getActions().clear();
        return;
      case SimpleAgentPackage.BEHAVIOR__ON_GOAL_REACHED:
        setOnGoalReached((ActionBody)null);
        return;
      case SimpleAgentPackage.BEHAVIOR__ON_SUSPENDED:
        setOnSuspended((ActionBody)null);
        return;
      case SimpleAgentPackage.BEHAVIOR__ON_RESUMED:
        setOnResumed((ActionBody)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case SimpleAgentPackage.BEHAVIOR__PLANNER:
        return PLANNER_EDEFAULT == null ? planner != null : !PLANNER_EDEFAULT.equals(planner);
      case SimpleAgentPackage.BEHAVIOR__START:
        return start != null;
      case SimpleAgentPackage.BEHAVIOR__INIT:
        return init != null;
      case SimpleAgentPackage.BEHAVIOR__ACTIONS:
        return actions != null && !actions.isEmpty();
      case SimpleAgentPackage.BEHAVIOR__ON_GOAL_REACHED:
        return onGoalReached != null;
      case SimpleAgentPackage.BEHAVIOR__ON_SUSPENDED:
        return onSuspended != null;
      case SimpleAgentPackage.BEHAVIOR__ON_RESUMED:
        return onResumed != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (planner: ");
    result.append(planner);
    result.append(')');
    return result.toString();
  }

} //BehaviorImpl
