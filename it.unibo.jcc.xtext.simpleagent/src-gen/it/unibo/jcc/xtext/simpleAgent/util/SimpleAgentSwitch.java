/**
 * generated by Xtext 2.18.0.M3
 */
package it.unibo.jcc.xtext.simpleAgent.util;

import it.unibo.jcc.xtext.simpleAgent.*;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.util.Switch;

/**
 * <!-- begin-user-doc -->
 * The <b>Switch</b> for the model's inheritance hierarchy.
 * It supports the call {@link #doSwitch(EObject) doSwitch(object)}
 * to invoke the <code>caseXXX</code> method for each class of the model,
 * starting with the actual class of the object
 * and proceeding up the inheritance hierarchy
 * until a non-null result is returned,
 * which is the result of the switch.
 * <!-- end-user-doc -->
 * @see it.unibo.jcc.xtext.simpleAgent.SimpleAgentPackage
 * @generated
 */
public class SimpleAgentSwitch<T> extends Switch<T>
{
  /**
   * The cached model package
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static SimpleAgentPackage modelPackage;

  /**
   * Creates an instance of the switch.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SimpleAgentSwitch()
  {
    if (modelPackage == null)
    {
      modelPackage = SimpleAgentPackage.eINSTANCE;
    }
  }

  /**
   * Checks whether this is a switch for the given package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param ePackage the package in question.
   * @return whether this is a switch for the given package.
   * @generated
   */
  @Override
  protected boolean isSwitchFor(EPackage ePackage)
  {
    return ePackage == modelPackage;
  }

  /**
   * Calls <code>caseXXX</code> for each class of the model until one returns a non null result; it yields that result.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the first non-null result returned by a <code>caseXXX</code> call.
   * @generated
   */
  @Override
  protected T doSwitch(int classifierID, EObject theEObject)
  {
    switch (classifierID)
    {
      case SimpleAgentPackage.SIMPLE_AGENT:
      {
        SimpleAgent simpleAgent = (SimpleAgent)theEObject;
        T result = caseSimpleAgent(simpleAgent);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SimpleAgentPackage.QACTOR_SYSTEM_SPEC:
      {
        QActorSystemSpec qActorSystemSpec = (QActorSystemSpec)theEObject;
        T result = caseQActorSystemSpec(qActorSystemSpec);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SimpleAgentPackage.BEHAVIOR_DECLARATION:
      {
        BehaviorDeclaration behaviorDeclaration = (BehaviorDeclaration)theEObject;
        T result = caseBehaviorDeclaration(behaviorDeclaration);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SimpleAgentPackage.BEHAVIOR:
      {
        Behavior behavior = (Behavior)theEObject;
        T result = caseBehavior(behavior);
        if (result == null) result = caseBehaviorDeclaration(behavior);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SimpleAgentPackage.BEHAVIOR_EXTERNAL:
      {
        BehaviorExternal behaviorExternal = (BehaviorExternal)theEObject;
        T result = caseBehaviorExternal(behaviorExternal);
        if (result == null) result = caseBehaviorDeclaration(behaviorExternal);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SimpleAgentPackage.ACTION:
      {
        Action action = (Action)theEObject;
        T result = caseAction(action);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SimpleAgentPackage.ON_EFFECT:
      {
        OnEffect onEffect = (OnEffect)theEObject;
        T result = caseOnEffect(onEffect);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SimpleAgentPackage.COMPENSATION:
      {
        Compensation compensation = (Compensation)theEObject;
        T result = caseCompensation(compensation);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SimpleAgentPackage.ACTION_BODY:
      {
        ActionBody actionBody = (ActionBody)theEObject;
        T result = caseActionBody(actionBody);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SimpleAgentPackage.CODE_RUN_ARG:
      {
        CodeRunArg codeRunArg = (CodeRunArg)theEObject;
        T result = caseCodeRunArg(codeRunArg);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SimpleAgentPackage.BROKER_SPEC:
      {
        BrokerSpec brokerSpec = (BrokerSpec)theEObject;
        T result = caseBrokerSpec(brokerSpec);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SimpleAgentPackage.MESSAGE:
      {
        Message message = (Message)theEObject;
        T result = caseMessage(message);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SimpleAgentPackage.OUT_ONLY_MESSAGE:
      {
        OutOnlyMessage outOnlyMessage = (OutOnlyMessage)theEObject;
        T result = caseOutOnlyMessage(outOnlyMessage);
        if (result == null) result = caseMessage(outOnlyMessage);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SimpleAgentPackage.OUT_IN_MESSAGE:
      {
        OutInMessage outInMessage = (OutInMessage)theEObject;
        T result = caseOutInMessage(outInMessage);
        if (result == null) result = caseMessage(outInMessage);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SimpleAgentPackage.EVENT:
      {
        Event event = (Event)theEObject;
        T result = caseEvent(event);
        if (result == null) result = caseOutOnlyMessage(event);
        if (result == null) result = caseMessage(event);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SimpleAgentPackage.SIGNAL:
      {
        Signal signal = (Signal)theEObject;
        T result = caseSignal(signal);
        if (result == null) result = caseOutOnlyMessage(signal);
        if (result == null) result = caseMessage(signal);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SimpleAgentPackage.TOKEN:
      {
        Token token = (Token)theEObject;
        T result = caseToken(token);
        if (result == null) result = caseOutOnlyMessage(token);
        if (result == null) result = caseMessage(token);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SimpleAgentPackage.DISPATCH:
      {
        Dispatch dispatch = (Dispatch)theEObject;
        T result = caseDispatch(dispatch);
        if (result == null) result = caseOutOnlyMessage(dispatch);
        if (result == null) result = caseMessage(dispatch);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SimpleAgentPackage.REQUEST:
      {
        Request request = (Request)theEObject;
        T result = caseRequest(request);
        if (result == null) result = caseOutInMessage(request);
        if (result == null) result = caseMessage(request);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SimpleAgentPackage.INVITATION:
      {
        Invitation invitation = (Invitation)theEObject;
        T result = caseInvitation(invitation);
        if (result == null) result = caseOutInMessage(invitation);
        if (result == null) result = caseMessage(invitation);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SimpleAgentPackage.CONTEXT:
      {
        Context context = (Context)theEObject;
        T result = caseContext(context);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SimpleAgentPackage.COMPONENT_IP:
      {
        ComponentIP componentIP = (ComponentIP)theEObject;
        T result = caseComponentIP(componentIP);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SimpleAgentPackage.GUARDED_STATE_ACTION:
      {
        GuardedStateAction guardedStateAction = (GuardedStateAction)theEObject;
        T result = caseGuardedStateAction(guardedStateAction);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SimpleAgentPackage.STATE_ACTION:
      {
        StateAction stateAction = (StateAction)theEObject;
        T result = caseStateAction(stateAction);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SimpleAgentPackage.PRINT_CUR_MSG:
      {
        PrintCurMsg printCurMsg = (PrintCurMsg)theEObject;
        T result = casePrintCurMsg(printCurMsg);
        if (result == null) result = caseStateAction(printCurMsg);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SimpleAgentPackage.PRINT:
      {
        Print print = (Print)theEObject;
        T result = casePrint(print);
        if (result == null) result = caseStateAction(print);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SimpleAgentPackage.SOLVE_GOAL:
      {
        SolveGoal solveGoal = (SolveGoal)theEObject;
        T result = caseSolveGoal(solveGoal);
        if (result == null) result = caseStateAction(solveGoal);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SimpleAgentPackage.FORWARD:
      {
        Forward forward = (Forward)theEObject;
        T result = caseForward(forward);
        if (result == null) result = caseStateAction(forward);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SimpleAgentPackage.EMIT:
      {
        Emit emit = (Emit)theEObject;
        T result = caseEmit(emit);
        if (result == null) result = caseStateAction(emit);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SimpleAgentPackage.DELAY:
      {
        Delay delay = (Delay)theEObject;
        T result = caseDelay(delay);
        if (result == null) result = caseStateAction(delay);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SimpleAgentPackage.DELAY_INT:
      {
        DelayInt delayInt = (DelayInt)theEObject;
        T result = caseDelayInt(delayInt);
        if (result == null) result = caseDelay(delayInt);
        if (result == null) result = caseStateAction(delayInt);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SimpleAgentPackage.DELAY_VAR:
      {
        DelayVar delayVar = (DelayVar)theEObject;
        T result = caseDelayVar(delayVar);
        if (result == null) result = caseDelay(delayVar);
        if (result == null) result = caseStateAction(delayVar);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SimpleAgentPackage.DELAY_VREF:
      {
        DelayVref delayVref = (DelayVref)theEObject;
        T result = caseDelayVref(delayVref);
        if (result == null) result = caseDelay(delayVref);
        if (result == null) result = caseStateAction(delayVref);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SimpleAgentPackage.DELAY_SOL:
      {
        DelaySol delaySol = (DelaySol)theEObject;
        T result = caseDelaySol(delaySol);
        if (result == null) result = caseDelay(delaySol);
        if (result == null) result = caseStateAction(delaySol);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SimpleAgentPackage.MSG_COND:
      {
        MsgCond msgCond = (MsgCond)theEObject;
        T result = caseMsgCond(msgCond);
        if (result == null) result = caseStateAction(msgCond);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SimpleAgentPackage.NO_MSG_COND:
      {
        NoMsgCond noMsgCond = (NoMsgCond)theEObject;
        T result = caseNoMsgCond(noMsgCond);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SimpleAgentPackage.ANY_ACTION:
      {
        AnyAction anyAction = (AnyAction)theEObject;
        T result = caseAnyAction(anyAction);
        if (result == null) result = caseStateAction(anyAction);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SimpleAgentPackage.CODE_RUN:
      {
        CodeRun codeRun = (CodeRun)theEObject;
        T result = caseCodeRun(codeRun);
        if (result == null) result = caseStateAction(codeRun);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SimpleAgentPackage.CODE_RUN_ACTOR:
      {
        CodeRunActor codeRunActor = (CodeRunActor)theEObject;
        T result = caseCodeRunActor(codeRunActor);
        if (result == null) result = caseCodeRun(codeRunActor);
        if (result == null) result = caseStateAction(codeRunActor);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SimpleAgentPackage.CODE_RUN_SIMPLE:
      {
        CodeRunSimple codeRunSimple = (CodeRunSimple)theEObject;
        T result = caseCodeRunSimple(codeRunSimple);
        if (result == null) result = caseCodeRun(codeRunSimple);
        if (result == null) result = caseStateAction(codeRunSimple);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SimpleAgentPackage.EXEC:
      {
        Exec exec = (Exec)theEObject;
        T result = caseExec(exec);
        if (result == null) result = caseStateAction(exec);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SimpleAgentPackage.PHEAD:
      {
        PHead pHead = (PHead)theEObject;
        T result = casePHead(pHead);
        if (result == null) result = caseCodeRunArg(pHead);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SimpleAgentPackage.PATOM:
      {
        PAtom pAtom = (PAtom)theEObject;
        T result = casePAtom(pAtom);
        if (result == null) result = casePHead(pAtom);
        if (result == null) result = caseCodeRunArg(pAtom);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SimpleAgentPackage.PATOM_STRING:
      {
        PAtomString pAtomString = (PAtomString)theEObject;
        T result = casePAtomString(pAtomString);
        if (result == null) result = casePAtom(pAtomString);
        if (result == null) result = casePHead(pAtomString);
        if (result == null) result = caseCodeRunArg(pAtomString);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SimpleAgentPackage.PATOMIC:
      {
        PAtomic pAtomic = (PAtomic)theEObject;
        T result = casePAtomic(pAtomic);
        if (result == null) result = casePAtom(pAtomic);
        if (result == null) result = casePHead(pAtomic);
        if (result == null) result = caseCodeRunArg(pAtomic);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SimpleAgentPackage.PATOM_NUM:
      {
        PAtomNum pAtomNum = (PAtomNum)theEObject;
        T result = casePAtomNum(pAtomNum);
        if (result == null) result = casePAtom(pAtomNum);
        if (result == null) result = casePHead(pAtomNum);
        if (result == null) result = caseCodeRunArg(pAtomNum);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SimpleAgentPackage.PSTRUCT_REF:
      {
        PStructRef pStructRef = (PStructRef)theEObject;
        T result = casePStructRef(pStructRef);
        if (result == null) result = casePHead(pStructRef);
        if (result == null) result = caseCodeRunArg(pStructRef);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SimpleAgentPackage.PSTRUCT:
      {
        PStruct pStruct = (PStruct)theEObject;
        T result = casePStruct(pStruct);
        if (result == null) result = casePHead(pStruct);
        if (result == null) result = caseCodeRunArg(pStruct);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SimpleAgentPackage.VARIABLE:
      {
        Variable variable = (Variable)theEObject;
        T result = caseVariable(variable);
        if (result == null) result = casePAtom(variable);
        if (result == null) result = casePHead(variable);
        if (result == null) result = caseCodeRunArg(variable);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SimpleAgentPackage.VAR_REF:
      {
        VarRef varRef = (VarRef)theEObject;
        T result = caseVarRef(varRef);
        if (result == null) result = casePAtom(varRef);
        if (result == null) result = casePHead(varRef);
        if (result == null) result = caseCodeRunArg(varRef);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SimpleAgentPackage.VAR_REF_IN_STR:
      {
        VarRefInStr varRefInStr = (VarRefInStr)theEObject;
        T result = caseVarRefInStr(varRefInStr);
        if (result == null) result = casePAtom(varRefInStr);
        if (result == null) result = casePHead(varRefInStr);
        if (result == null) result = caseCodeRunArg(varRefInStr);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SimpleAgentPackage.VAR_SOL_REF:
      {
        VarSolRef varSolRef = (VarSolRef)theEObject;
        T result = caseVarSolRef(varSolRef);
        if (result == null) result = casePAtom(varSolRef);
        if (result == null) result = casePHead(varSolRef);
        if (result == null) result = caseCodeRunArg(varSolRef);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      default: return defaultCase(theEObject);
    }
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Simple Agent</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Simple Agent</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSimpleAgent(SimpleAgent object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>QActor System Spec</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>QActor System Spec</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseQActorSystemSpec(QActorSystemSpec object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Behavior Declaration</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Behavior Declaration</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBehaviorDeclaration(BehaviorDeclaration object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Behavior</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Behavior</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBehavior(Behavior object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Behavior External</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Behavior External</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBehaviorExternal(BehaviorExternal object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Action</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Action</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAction(Action object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>On Effect</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>On Effect</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOnEffect(OnEffect object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Compensation</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Compensation</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCompensation(Compensation object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Action Body</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Action Body</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseActionBody(ActionBody object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Code Run Arg</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Code Run Arg</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCodeRunArg(CodeRunArg object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Broker Spec</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Broker Spec</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBrokerSpec(BrokerSpec object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Message</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Message</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMessage(Message object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Out Only Message</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Out Only Message</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOutOnlyMessage(OutOnlyMessage object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Out In Message</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Out In Message</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOutInMessage(OutInMessage object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Event</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Event</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEvent(Event object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Signal</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Signal</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSignal(Signal object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Token</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Token</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseToken(Token object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Dispatch</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Dispatch</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDispatch(Dispatch object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Request</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Request</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRequest(Request object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Invitation</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Invitation</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseInvitation(Invitation object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Context</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Context</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseContext(Context object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Component IP</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Component IP</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseComponentIP(ComponentIP object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Guarded State Action</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Guarded State Action</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseGuardedStateAction(GuardedStateAction object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>State Action</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>State Action</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseStateAction(StateAction object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Print Cur Msg</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Print Cur Msg</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePrintCurMsg(PrintCurMsg object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Print</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Print</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePrint(Print object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Solve Goal</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Solve Goal</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSolveGoal(SolveGoal object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Forward</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Forward</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseForward(Forward object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Emit</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Emit</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEmit(Emit object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Delay</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Delay</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDelay(Delay object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Delay Int</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Delay Int</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDelayInt(DelayInt object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Delay Var</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Delay Var</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDelayVar(DelayVar object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Delay Vref</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Delay Vref</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDelayVref(DelayVref object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Delay Sol</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Delay Sol</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDelaySol(DelaySol object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Msg Cond</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Msg Cond</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMsgCond(MsgCond object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>No Msg Cond</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>No Msg Cond</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseNoMsgCond(NoMsgCond object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Any Action</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Any Action</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAnyAction(AnyAction object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Code Run</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Code Run</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCodeRun(CodeRun object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Code Run Actor</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Code Run Actor</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCodeRunActor(CodeRunActor object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Code Run Simple</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Code Run Simple</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCodeRunSimple(CodeRunSimple object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Exec</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Exec</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseExec(Exec object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>PHead</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>PHead</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePHead(PHead object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>PAtom</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>PAtom</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePAtom(PAtom object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>PAtom String</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>PAtom String</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePAtomString(PAtomString object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>PAtomic</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>PAtomic</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePAtomic(PAtomic object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>PAtom Num</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>PAtom Num</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePAtomNum(PAtomNum object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>PStruct Ref</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>PStruct Ref</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePStructRef(PStructRef object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>PStruct</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>PStruct</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePStruct(PStruct object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Variable</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Variable</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseVariable(Variable object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Var Ref</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Var Ref</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseVarRef(VarRef object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Var Ref In Str</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Var Ref In Str</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseVarRefInStr(VarRefInStr object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Var Sol Ref</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Var Sol Ref</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseVarSolRef(VarSolRef object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EObject</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch, but this is the last case anyway.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EObject</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject)
   * @generated
   */
  @Override
  public T defaultCase(EObject object)
  {
    return null;
  }

} //SimpleAgentSwitch
