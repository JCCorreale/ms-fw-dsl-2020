/**
 * generated by Xtext 2.18.0.M3
 */
package it.unibo.jcc.xtext.simpleAgent.util;

import it.unibo.jcc.xtext.simpleAgent.*;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.notify.impl.AdapterFactoryImpl;

import org.eclipse.emf.ecore.EObject;

/**
 * <!-- begin-user-doc -->
 * The <b>Adapter Factory</b> for the model.
 * It provides an adapter <code>createXXX</code> method for each class of the model.
 * <!-- end-user-doc -->
 * @see it.unibo.jcc.xtext.simpleAgent.SimpleAgentPackage
 * @generated
 */
public class SimpleAgentAdapterFactory extends AdapterFactoryImpl
{
  /**
   * The cached model package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static SimpleAgentPackage modelPackage;

  /**
   * Creates an instance of the adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SimpleAgentAdapterFactory()
  {
    if (modelPackage == null)
    {
      modelPackage = SimpleAgentPackage.eINSTANCE;
    }
  }

  /**
   * Returns whether this factory is applicable for the type of the object.
   * <!-- begin-user-doc -->
   * This implementation returns <code>true</code> if the object is either the model's package or is an instance object of the model.
   * <!-- end-user-doc -->
   * @return whether this factory is applicable for the type of the object.
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object object)
  {
    if (object == modelPackage)
    {
      return true;
    }
    if (object instanceof EObject)
    {
      return ((EObject)object).eClass().getEPackage() == modelPackage;
    }
    return false;
  }

  /**
   * The switch that delegates to the <code>createXXX</code> methods.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected SimpleAgentSwitch<Adapter> modelSwitch =
    new SimpleAgentSwitch<Adapter>()
    {
      @Override
      public Adapter caseSimpleAgent(SimpleAgent object)
      {
        return createSimpleAgentAdapter();
      }
      @Override
      public Adapter caseQActorSystemSpec(QActorSystemSpec object)
      {
        return createQActorSystemSpecAdapter();
      }
      @Override
      public Adapter caseBehaviorDeclaration(BehaviorDeclaration object)
      {
        return createBehaviorDeclarationAdapter();
      }
      @Override
      public Adapter caseBehavior(Behavior object)
      {
        return createBehaviorAdapter();
      }
      @Override
      public Adapter caseBehaviorExternal(BehaviorExternal object)
      {
        return createBehaviorExternalAdapter();
      }
      @Override
      public Adapter caseAction(Action object)
      {
        return createActionAdapter();
      }
      @Override
      public Adapter caseOnEffect(OnEffect object)
      {
        return createOnEffectAdapter();
      }
      @Override
      public Adapter caseCompensation(Compensation object)
      {
        return createCompensationAdapter();
      }
      @Override
      public Adapter caseActionBody(ActionBody object)
      {
        return createActionBodyAdapter();
      }
      @Override
      public Adapter caseCodeRunArg(CodeRunArg object)
      {
        return createCodeRunArgAdapter();
      }
      @Override
      public Adapter caseBrokerSpec(BrokerSpec object)
      {
        return createBrokerSpecAdapter();
      }
      @Override
      public Adapter caseMessage(Message object)
      {
        return createMessageAdapter();
      }
      @Override
      public Adapter caseOutOnlyMessage(OutOnlyMessage object)
      {
        return createOutOnlyMessageAdapter();
      }
      @Override
      public Adapter caseOutInMessage(OutInMessage object)
      {
        return createOutInMessageAdapter();
      }
      @Override
      public Adapter caseEvent(Event object)
      {
        return createEventAdapter();
      }
      @Override
      public Adapter caseSignal(Signal object)
      {
        return createSignalAdapter();
      }
      @Override
      public Adapter caseToken(Token object)
      {
        return createTokenAdapter();
      }
      @Override
      public Adapter caseDispatch(Dispatch object)
      {
        return createDispatchAdapter();
      }
      @Override
      public Adapter caseRequest(Request object)
      {
        return createRequestAdapter();
      }
      @Override
      public Adapter caseInvitation(Invitation object)
      {
        return createInvitationAdapter();
      }
      @Override
      public Adapter caseContext(Context object)
      {
        return createContextAdapter();
      }
      @Override
      public Adapter caseComponentIP(ComponentIP object)
      {
        return createComponentIPAdapter();
      }
      @Override
      public Adapter caseGuardedStateAction(GuardedStateAction object)
      {
        return createGuardedStateActionAdapter();
      }
      @Override
      public Adapter caseStateAction(StateAction object)
      {
        return createStateActionAdapter();
      }
      @Override
      public Adapter casePrintCurMsg(PrintCurMsg object)
      {
        return createPrintCurMsgAdapter();
      }
      @Override
      public Adapter casePrint(Print object)
      {
        return createPrintAdapter();
      }
      @Override
      public Adapter caseSolveGoal(SolveGoal object)
      {
        return createSolveGoalAdapter();
      }
      @Override
      public Adapter caseForward(Forward object)
      {
        return createForwardAdapter();
      }
      @Override
      public Adapter caseEmit(Emit object)
      {
        return createEmitAdapter();
      }
      @Override
      public Adapter caseDelay(Delay object)
      {
        return createDelayAdapter();
      }
      @Override
      public Adapter caseDelayInt(DelayInt object)
      {
        return createDelayIntAdapter();
      }
      @Override
      public Adapter caseDelayVar(DelayVar object)
      {
        return createDelayVarAdapter();
      }
      @Override
      public Adapter caseDelayVref(DelayVref object)
      {
        return createDelayVrefAdapter();
      }
      @Override
      public Adapter caseDelaySol(DelaySol object)
      {
        return createDelaySolAdapter();
      }
      @Override
      public Adapter caseMsgCond(MsgCond object)
      {
        return createMsgCondAdapter();
      }
      @Override
      public Adapter caseNoMsgCond(NoMsgCond object)
      {
        return createNoMsgCondAdapter();
      }
      @Override
      public Adapter caseAnyAction(AnyAction object)
      {
        return createAnyActionAdapter();
      }
      @Override
      public Adapter caseCodeRun(CodeRun object)
      {
        return createCodeRunAdapter();
      }
      @Override
      public Adapter caseCodeRunActor(CodeRunActor object)
      {
        return createCodeRunActorAdapter();
      }
      @Override
      public Adapter caseCodeRunSimple(CodeRunSimple object)
      {
        return createCodeRunSimpleAdapter();
      }
      @Override
      public Adapter caseExec(Exec object)
      {
        return createExecAdapter();
      }
      @Override
      public Adapter casePHead(PHead object)
      {
        return createPHeadAdapter();
      }
      @Override
      public Adapter casePAtom(PAtom object)
      {
        return createPAtomAdapter();
      }
      @Override
      public Adapter casePAtomString(PAtomString object)
      {
        return createPAtomStringAdapter();
      }
      @Override
      public Adapter casePAtomic(PAtomic object)
      {
        return createPAtomicAdapter();
      }
      @Override
      public Adapter casePAtomNum(PAtomNum object)
      {
        return createPAtomNumAdapter();
      }
      @Override
      public Adapter casePStructRef(PStructRef object)
      {
        return createPStructRefAdapter();
      }
      @Override
      public Adapter casePStruct(PStruct object)
      {
        return createPStructAdapter();
      }
      @Override
      public Adapter caseVariable(Variable object)
      {
        return createVariableAdapter();
      }
      @Override
      public Adapter caseVarRef(VarRef object)
      {
        return createVarRefAdapter();
      }
      @Override
      public Adapter caseVarRefInStr(VarRefInStr object)
      {
        return createVarRefInStrAdapter();
      }
      @Override
      public Adapter caseVarSolRef(VarSolRef object)
      {
        return createVarSolRefAdapter();
      }
      @Override
      public Adapter defaultCase(EObject object)
      {
        return createEObjectAdapter();
      }
    };

  /**
   * Creates an adapter for the <code>target</code>.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param target the object to adapt.
   * @return the adapter for the <code>target</code>.
   * @generated
   */
  @Override
  public Adapter createAdapter(Notifier target)
  {
    return modelSwitch.doSwitch((EObject)target);
  }


  /**
   * Creates a new adapter for an object of class '{@link it.unibo.jcc.xtext.simpleAgent.SimpleAgent <em>Simple Agent</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unibo.jcc.xtext.simpleAgent.SimpleAgent
   * @generated
   */
  public Adapter createSimpleAgentAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unibo.jcc.xtext.simpleAgent.QActorSystemSpec <em>QActor System Spec</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unibo.jcc.xtext.simpleAgent.QActorSystemSpec
   * @generated
   */
  public Adapter createQActorSystemSpecAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unibo.jcc.xtext.simpleAgent.BehaviorDeclaration <em>Behavior Declaration</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unibo.jcc.xtext.simpleAgent.BehaviorDeclaration
   * @generated
   */
  public Adapter createBehaviorDeclarationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unibo.jcc.xtext.simpleAgent.Behavior <em>Behavior</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unibo.jcc.xtext.simpleAgent.Behavior
   * @generated
   */
  public Adapter createBehaviorAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unibo.jcc.xtext.simpleAgent.BehaviorExternal <em>Behavior External</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unibo.jcc.xtext.simpleAgent.BehaviorExternal
   * @generated
   */
  public Adapter createBehaviorExternalAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unibo.jcc.xtext.simpleAgent.Action <em>Action</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unibo.jcc.xtext.simpleAgent.Action
   * @generated
   */
  public Adapter createActionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unibo.jcc.xtext.simpleAgent.OnEffect <em>On Effect</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unibo.jcc.xtext.simpleAgent.OnEffect
   * @generated
   */
  public Adapter createOnEffectAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unibo.jcc.xtext.simpleAgent.Compensation <em>Compensation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unibo.jcc.xtext.simpleAgent.Compensation
   * @generated
   */
  public Adapter createCompensationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unibo.jcc.xtext.simpleAgent.ActionBody <em>Action Body</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unibo.jcc.xtext.simpleAgent.ActionBody
   * @generated
   */
  public Adapter createActionBodyAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unibo.jcc.xtext.simpleAgent.CodeRunArg <em>Code Run Arg</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unibo.jcc.xtext.simpleAgent.CodeRunArg
   * @generated
   */
  public Adapter createCodeRunArgAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unibo.jcc.xtext.simpleAgent.BrokerSpec <em>Broker Spec</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unibo.jcc.xtext.simpleAgent.BrokerSpec
   * @generated
   */
  public Adapter createBrokerSpecAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unibo.jcc.xtext.simpleAgent.Message <em>Message</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unibo.jcc.xtext.simpleAgent.Message
   * @generated
   */
  public Adapter createMessageAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unibo.jcc.xtext.simpleAgent.OutOnlyMessage <em>Out Only Message</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unibo.jcc.xtext.simpleAgent.OutOnlyMessage
   * @generated
   */
  public Adapter createOutOnlyMessageAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unibo.jcc.xtext.simpleAgent.OutInMessage <em>Out In Message</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unibo.jcc.xtext.simpleAgent.OutInMessage
   * @generated
   */
  public Adapter createOutInMessageAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unibo.jcc.xtext.simpleAgent.Event <em>Event</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unibo.jcc.xtext.simpleAgent.Event
   * @generated
   */
  public Adapter createEventAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unibo.jcc.xtext.simpleAgent.Signal <em>Signal</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unibo.jcc.xtext.simpleAgent.Signal
   * @generated
   */
  public Adapter createSignalAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unibo.jcc.xtext.simpleAgent.Token <em>Token</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unibo.jcc.xtext.simpleAgent.Token
   * @generated
   */
  public Adapter createTokenAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unibo.jcc.xtext.simpleAgent.Dispatch <em>Dispatch</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unibo.jcc.xtext.simpleAgent.Dispatch
   * @generated
   */
  public Adapter createDispatchAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unibo.jcc.xtext.simpleAgent.Request <em>Request</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unibo.jcc.xtext.simpleAgent.Request
   * @generated
   */
  public Adapter createRequestAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unibo.jcc.xtext.simpleAgent.Invitation <em>Invitation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unibo.jcc.xtext.simpleAgent.Invitation
   * @generated
   */
  public Adapter createInvitationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unibo.jcc.xtext.simpleAgent.Context <em>Context</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unibo.jcc.xtext.simpleAgent.Context
   * @generated
   */
  public Adapter createContextAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unibo.jcc.xtext.simpleAgent.ComponentIP <em>Component IP</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unibo.jcc.xtext.simpleAgent.ComponentIP
   * @generated
   */
  public Adapter createComponentIPAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unibo.jcc.xtext.simpleAgent.GuardedStateAction <em>Guarded State Action</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unibo.jcc.xtext.simpleAgent.GuardedStateAction
   * @generated
   */
  public Adapter createGuardedStateActionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unibo.jcc.xtext.simpleAgent.StateAction <em>State Action</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unibo.jcc.xtext.simpleAgent.StateAction
   * @generated
   */
  public Adapter createStateActionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unibo.jcc.xtext.simpleAgent.PrintCurMsg <em>Print Cur Msg</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unibo.jcc.xtext.simpleAgent.PrintCurMsg
   * @generated
   */
  public Adapter createPrintCurMsgAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unibo.jcc.xtext.simpleAgent.Print <em>Print</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unibo.jcc.xtext.simpleAgent.Print
   * @generated
   */
  public Adapter createPrintAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unibo.jcc.xtext.simpleAgent.SolveGoal <em>Solve Goal</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unibo.jcc.xtext.simpleAgent.SolveGoal
   * @generated
   */
  public Adapter createSolveGoalAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unibo.jcc.xtext.simpleAgent.Forward <em>Forward</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unibo.jcc.xtext.simpleAgent.Forward
   * @generated
   */
  public Adapter createForwardAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unibo.jcc.xtext.simpleAgent.Emit <em>Emit</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unibo.jcc.xtext.simpleAgent.Emit
   * @generated
   */
  public Adapter createEmitAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unibo.jcc.xtext.simpleAgent.Delay <em>Delay</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unibo.jcc.xtext.simpleAgent.Delay
   * @generated
   */
  public Adapter createDelayAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unibo.jcc.xtext.simpleAgent.DelayInt <em>Delay Int</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unibo.jcc.xtext.simpleAgent.DelayInt
   * @generated
   */
  public Adapter createDelayIntAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unibo.jcc.xtext.simpleAgent.DelayVar <em>Delay Var</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unibo.jcc.xtext.simpleAgent.DelayVar
   * @generated
   */
  public Adapter createDelayVarAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unibo.jcc.xtext.simpleAgent.DelayVref <em>Delay Vref</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unibo.jcc.xtext.simpleAgent.DelayVref
   * @generated
   */
  public Adapter createDelayVrefAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unibo.jcc.xtext.simpleAgent.DelaySol <em>Delay Sol</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unibo.jcc.xtext.simpleAgent.DelaySol
   * @generated
   */
  public Adapter createDelaySolAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unibo.jcc.xtext.simpleAgent.MsgCond <em>Msg Cond</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unibo.jcc.xtext.simpleAgent.MsgCond
   * @generated
   */
  public Adapter createMsgCondAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unibo.jcc.xtext.simpleAgent.NoMsgCond <em>No Msg Cond</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unibo.jcc.xtext.simpleAgent.NoMsgCond
   * @generated
   */
  public Adapter createNoMsgCondAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unibo.jcc.xtext.simpleAgent.AnyAction <em>Any Action</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unibo.jcc.xtext.simpleAgent.AnyAction
   * @generated
   */
  public Adapter createAnyActionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unibo.jcc.xtext.simpleAgent.CodeRun <em>Code Run</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unibo.jcc.xtext.simpleAgent.CodeRun
   * @generated
   */
  public Adapter createCodeRunAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unibo.jcc.xtext.simpleAgent.CodeRunActor <em>Code Run Actor</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unibo.jcc.xtext.simpleAgent.CodeRunActor
   * @generated
   */
  public Adapter createCodeRunActorAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unibo.jcc.xtext.simpleAgent.CodeRunSimple <em>Code Run Simple</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unibo.jcc.xtext.simpleAgent.CodeRunSimple
   * @generated
   */
  public Adapter createCodeRunSimpleAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unibo.jcc.xtext.simpleAgent.Exec <em>Exec</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unibo.jcc.xtext.simpleAgent.Exec
   * @generated
   */
  public Adapter createExecAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unibo.jcc.xtext.simpleAgent.PHead <em>PHead</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unibo.jcc.xtext.simpleAgent.PHead
   * @generated
   */
  public Adapter createPHeadAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unibo.jcc.xtext.simpleAgent.PAtom <em>PAtom</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unibo.jcc.xtext.simpleAgent.PAtom
   * @generated
   */
  public Adapter createPAtomAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unibo.jcc.xtext.simpleAgent.PAtomString <em>PAtom String</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unibo.jcc.xtext.simpleAgent.PAtomString
   * @generated
   */
  public Adapter createPAtomStringAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unibo.jcc.xtext.simpleAgent.PAtomic <em>PAtomic</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unibo.jcc.xtext.simpleAgent.PAtomic
   * @generated
   */
  public Adapter createPAtomicAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unibo.jcc.xtext.simpleAgent.PAtomNum <em>PAtom Num</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unibo.jcc.xtext.simpleAgent.PAtomNum
   * @generated
   */
  public Adapter createPAtomNumAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unibo.jcc.xtext.simpleAgent.PStructRef <em>PStruct Ref</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unibo.jcc.xtext.simpleAgent.PStructRef
   * @generated
   */
  public Adapter createPStructRefAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unibo.jcc.xtext.simpleAgent.PStruct <em>PStruct</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unibo.jcc.xtext.simpleAgent.PStruct
   * @generated
   */
  public Adapter createPStructAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unibo.jcc.xtext.simpleAgent.Variable <em>Variable</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unibo.jcc.xtext.simpleAgent.Variable
   * @generated
   */
  public Adapter createVariableAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unibo.jcc.xtext.simpleAgent.VarRef <em>Var Ref</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unibo.jcc.xtext.simpleAgent.VarRef
   * @generated
   */
  public Adapter createVarRefAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unibo.jcc.xtext.simpleAgent.VarRefInStr <em>Var Ref In Str</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unibo.jcc.xtext.simpleAgent.VarRefInStr
   * @generated
   */
  public Adapter createVarRefInStrAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unibo.jcc.xtext.simpleAgent.VarSolRef <em>Var Sol Ref</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unibo.jcc.xtext.simpleAgent.VarSolRef
   * @generated
   */
  public Adapter createVarSolRefAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for the default case.
   * <!-- begin-user-doc -->
   * This default implementation returns null.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @generated
   */
  public Adapter createEObjectAdapter()
  {
    return null;
  }

} //SimpleAgentAdapterFactory
