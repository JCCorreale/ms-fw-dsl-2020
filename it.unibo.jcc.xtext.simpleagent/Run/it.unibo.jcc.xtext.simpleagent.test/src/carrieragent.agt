Agent carrieragent ip [host="localhost" port=8042] -mqtt

System {
	mqttBroker "localhost" : 1883
	
	// To roomstate
	Dispatch take : take(Item) // TODO Unify
	Dispatch put : put(Item, Location)
	
	Context ctxDummyForMoveBehavior   ip [host="otherresourcelocalhost" port=8032]   -mqtt
    Context ctxDummyForGotoBehavior   ip [host="otherresourcelocalhost" port=8035]   -mqtt
    Context ctxDummyForRoomState   ip [host="otherresourcelocalhost" port=8038]   -mqtt
}

ExternalBehavior movebehavior context ctxDummyForMoveBehavior // TODO Behaviors as actors (check name consistency internal/external)
ExternalBehavior gotobehavior context ctxDummyForGotoBehavior // TODO Behaviors as actors (check name consistency internal/external)
ExternalBehavior roomstate context ctxDummyForRoomState

Behavior carrier planner itunibo.jcc.^planner.adapter.^CarrierPlannerAdapter {
	
	// TODO Workaround (pass to effects?)!
	["
	var payloadArg0 = \\\"\\\"
	var payloadArg1 = \\\"\\\"

    var suspendedGoto = false
	"]
	
	init {
		// Set up planner according to the state of the room (subsequent updates will be done explicitly - for now)
		run itunibo.jcc.coap.roomstate.carrierRoomStateClient.create(myself, ^planner)
		run itunibo.jcc.coap.roomstate.carrierRoomStateClient.initPlanner()
	}
	
	// TODO Put args in payloadArg0/payloadArg1 and use from effects
	
	action take(Item) {
		printCurrentMessage
//		["planner.take(\"${payloadArg(0)}\"/*, \"butler\")*/"]
		["planner.take(\"${payloadArg(0)}\")"]
		["var butlerLocation = planner.getButlerLocationAsString()"]
		["println(\"carrier taking ${payloadArg(0)} from $butlerLocation\")"]
		["payloadArg0 = payloadArg(0)"] // TODO
//		println("carrier taking ${payloadArg(0)}")+
		println("carrier sending take(${payloadArg0},$butlerLocation) to roomstate")
		["forward(\"take\", \"take(${payloadArg0},$butlerLocation)\" ,\"roomstate\" )"]
	}
//	onEffect(goalReached) { // TODO Workaround
//		// TODO Get butler location in a better way
//		["var butlerLocation = planner.getButlerLocationAsString()"]
//		println("carrier sending take(${payloadArg0},$butlerLocation) to roomstate")
//		["forward(\"take\", \"take(${payloadArg0},$butlerLocation)\" ,\"roomstate\" )"]
//	}
	
	action put(Item,Location) {
		printCurrentMessage
		println("carrier putting ${payloadArg(0)} in ${payloadArg(1)}")
		["planner.put(\"${payloadArg(0)}\", \"${payloadArg(1)}\")"]
		["payloadArg0 = payloadArg(0)"] // TODO
		["payloadArg1 = payloadArg(1)"] // TODO
		println("carrier sending PUT to roomstate")
		["forward(\"put\", \"put(${payloadArg0},${payloadArg1})\" ,\"roomstate\" )"]
	}
//	onEffect(goalReached) { // TODO Workaround
//		println("carrier sending PUT to roomstate")
//		["forward(\"put\", \"put(${payloadArg0},${payloadArg1})\" ,\"roomstate\" )"]
////		forward roomstate -m put : put($payloadArg(0), $payloadArg(1))
//	}
	
	action goto(L) {
		["if (!suspendedGoto)"]
		["{"]
			printCurrentMessage
			forward gotobehavior -m ^setGoal : ^setGoal(goto($payloadArg(0)))
	//		["planner.update(\"butler\", \"${payloadArg(0)}\")"]
			["planner.goto(\"${payloadArg(0)}\")"]
			["payloadArg0 = payloadArg(0)"] // TODO
		["}"]
	}
	// TODO Currently done "by hand", automatize
	onEffect(suspend) {
		forward movebehavior -m suspend : suspend
//		forward gotobehavior -m suspend : suspend
	}
	retry when "true" { // TODO Syntax with no condition
		["suspendedGoto = true"]
	}
	onEffect(resume) {
		forward movebehavior -m resume : resume
//		forward gotobehavior -m resume : resume
	}
	retry when "true" // TODO Syntax with no condition
	onEffect(goalReached) { // TODO Workaround
		printCurrentMessage
//		println("carrier: subgoal reached")
		println("carrier sending GOTO to roomstate")
		["forward(\"goto\", \"goto($payloadArg0)\" ,\"roomstate\" )"]
//		forward roomstate -m goto : goto($payloadArg(0))
		["suspendedGoto = false"]
	}
	
	onGoalReached {
		println("carrierbehavior: onGoalReached")
	}
	
//	onSuspended {
//		forward movebehavior -m suspend : suspend
//	}
	
//	onResumed {
//		forward movebehavior -m resume : resume
//	}
}