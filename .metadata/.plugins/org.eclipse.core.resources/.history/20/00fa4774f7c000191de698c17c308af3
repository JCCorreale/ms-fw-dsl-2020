/*
* The actor plans a trip to a given point and back. It can be stopped and resumed at any time.
*/
System workinroom  
mqttBroker "localhost" : 1883

Dispatch modelChange  : modelChange( TARGET, VALUE )
Dispatch modelUpdate  : modelUpdate( TARGET, VALUE )

// Commands for the worker
Dispatch setGoal	   : setGoal(G)
Dispatch suspend	   : suspend
Dispatch resume        : resume
// Events from the worker
Event goalReached      : goalReached
// Actions (domain specific)
Dispatch do_w	   : do_w
Dispatch do_a	   : do_a
Dispatch do_d	   : do_d

Dispatch onestep       : onestep(DURATION)  
Dispatch stepOk        : stepOk(V)		//TODO eliminate  V
Dispatch stepFail      : stepFail(R,T) //R=ok | obstacle, T = time

Event  sonarRobot     : sonar( DISTANCE )	     //from  sonar on robot 

Context ctxStoppableWorker     ip [host="localhost" port=8038]    -mqtt
Context ctxDummyForMind   ip [host="otherresourcelocalhost" port=8035]   -mqtt 

ExternalQActor resourcemodel context ctxDummyForMind 
ExternalQActor onestepahead  context ctxDummyForMind

QActor workerinroom context ctxStoppableWorker{     
["
var mapEmpty    = false
val mapname     =\"roomMapWithTable\"

var Curmove     = \"\" 
var curmoveIsForward = false 

var suspended = false

var Tback = 0

//val Tretry = 1000L
//val Nretry = 5

//var retryCount = 0

var CurGoalX = \"\"
var CurGoalY = \"\"

//REAL ROBOT
//var StepTime   = 1000 	 
//var PauseTime  = 500 

//VIRTUAL ROBOT
var StepTime   = 330	//for virtual
var PauseTime  = 500

var PauseTimeL  = PauseTime.toLong()

// From Planner declaration
val planner = itunibo.jcc.planner.adapter.PlannerAdapter()
"]	 
	State s0 initial {	    
	    solve( consult("moves.pl")	 )
 		run itunibo.planner.plannerUtil.initAI()
  		run itunibo.planner.moveUtils.loadRoomMap( myself, mapname )	
  		run itunibo.planner.moveUtils.showCurrentRobotState()
	 	["	val MapStr =  itunibo.planner.plannerUtil.getMapOneLine()  "]
	 	forward resourcemodel -m modelUpdate : modelUpdate(roomMap,$MapStr)   
 	}
 	Goto waitGoal
 	
 	State waitGoal {
 		println("Waiting for goal...")	
 	}
 	Transition setGoalT whenMsg setGoal -> setGoal
	 
	State setGoal {
		println("here in setGoal")
		printCurrentMessage
		onMsg( setGoal : setGoal(G) ) {
			println("Received setGoal")
			["planner.planGoal(myself, payloadArg(0))"]
//			run itunibo.planner.plannerUtil.setGoal(payloadArg(0), payloadArg(1))
//  			run itunibo.planner.moveUtils.doPlan( myself )
  			// TODO To allow replanning
//  			["CurGoalX = payloadArg(0)"]
//  			["CurGoalY = payloadArg(1)"]
 			//solve( dialog(F) )
		}
		
		// TODO What if no plan can be calculated?
   	}
   	Goto suspendOrExecute
	//Goto executePlannedActions //doGoHomeActions 
	
	State suspendOrExecute {}
		Transition checkSuspend 
	   		whenTime 200 -> executePlannedActions
	   		whenMsg suspend -> suspended	
	
	State suspended {
		// Send stop command
		forward resourcemodel -m modelChange : modelChange(robot,h)
		println("suspended")		
	}
	Transition resume whenMsg resume -> executePlannedActions // suspendOrExecute ?
	
	State executePlannedActions{
		//solve( showMoves ) 
		// retract only after it's executed
		solve( move(M) )
		//solve( retract( move(M) ) )
		ifSolved {  
			["Curmove = getCurSol(\"M\").toString() 
              curmoveIsForward=(Curmove == \"w\")
	        "]
		} else { ["Curmove = \"\"; curmoveIsForward=false"]  }  
		println("executePlannedActions doing $Curmove")
 	}
   
	Goto checkAndDoAction if "(Curmove.length>0) " else goalOk 

 	State goalOk{		  
 		run itunibo.planner.moveUtils.showCurrentRobotState()
	 	["	val MapStr =  itunibo.planner.plannerUtil.getMapOneLine()  "]
	 	forward resourcemodel -m modelUpdate : modelUpdate(roomMap,$MapStr)
	 	
	 	emit goalReached : goalReached
 	}
 	Goto waitGoal
  	
 	//Execute the move if it is a rotation or halt
	State checkAndDoAction{
		["when (Curmove) {"]
		["	\"w\" -> "]
		forward workerinroom -m do_w : do_w
		["	\"a\" -> "]
		forward workerinroom -m do_a : do_a
		["	\"d\" -> "]
		forward workerinroom -m do_d : do_d
		["}"]
	}
	Transition t0 
		whenMsg do_w -> do_w
		whenMsg do_a -> do_a
		whenMsg do_d -> do_d
		
	State do_w{
		onMsg (do_w : do_w) { // Possible parameters
			// from "agent" code
			delayVar PauseTimeL  //Otherwise is too fast, even with remote interaction
 			run itunibo.planner.moveUtils.attemptTomoveAhead(myself, StepTime)
		}
	}
	Transition t0
		// from "on(...)" clauses on action w
		whenMsg stepOk   -> do_w_onStepOk   
		whenMsg stepFail -> do_w_onStepFail
	
	State do_a{
		onMsg (do_a : do_a) { // Possible parameters
			run itunibo.planner.moveUtils.rotate(myself, Curmove, PauseTime) // from "agent" code
		}
	}
	Goto finalizeMove // No "on(...)" clause specified
	
	State do_d{
		onMsg (do_d : do_d) { // Possible parameters
			run itunibo.planner.moveUtils.rotate(myself, Curmove, PauseTime) // from "agent" code
		}
	}
	Goto finalizeMove // No "on(...)" clause specified
		  
    
	State do_w_onStepOk{
 		run itunibo.planner.moveUtils.updateMapAfterAheadOk(myself)
	}
	Goto finalizeMove //executePlannedActions
	
	State finalizeMove {
		// Move actually succeded
		//["retryCount = 0"]
		solve( retract( move(M) ) )
	}
	Goto suspendOrExecute //executePlannedActions
	
 	State do_w_onStepFail{
 		
 		// TODO
 		
		//printCurrentMessage		        
 		onMsg( stepFail : stepFail(Obs,Time) ) { 
 			["Tback=payloadArg(1).toString().toInt() / 2"]
 			println("stepFailed ${payloadArg(1).toString()}")
 		}
 		
 		// TODO Put in onMsg and TEST
 		
  		//Return in cell
  	 	//IMPORTANT: the virtual robot could not work without a back step 	
  	 	//NOW INCLUDED in robotDataSource for robotVirtual
 		run itunibo.planner.moveUtils.backToCompensate(myself, Tback, PauseTime)
 		
 		// TODO
	}
	
	// TODO No RETRY/REPLAN for now (should be built-in feature?)
	
//	Goto retry if "(retryCount < Nretry)" else replan
//	//Goto suspendOrExecute
//	
//	State retry {
//		
//		println("retry ${Curmove} in ${Tretry} ms")
//		["retryCount++"]
//		
////		println("MOVES BEFORE REASSERT")
////		solve( showMoves ) 
////		println("END MOVES BEFORE REASSERT")
//
////		// reassert current move
////		solve( assert( move($Curmove) ) )
////		// 
////		println("MOVES AFTER REASSERT")
////		solve( showMoves ) 
////		println("END MOVES AFTER REASSERT")
//	}
//	Transition t0 whenTimeVar Tretry -> suspendOrExecute
//	
//	State replan {
//		
//		println("replanning")
//		
//		["retryCount = 0"]
//		// Puts the obstacle on the map
//		run itunibo.planner.moveUtils.setObstacleOnCurrentDirection(myself)
//		run itunibo.planner.plannerUtil.showMap()  //
//		// Clear previous plan
//		solve( retractall( move(M) ) )
//		forward workerinroom -m setGoal : setGoal($CurGoalX,$CurGoalY)
//	}
//	Transition t0 whenMsg setGoal -> setGoal
}