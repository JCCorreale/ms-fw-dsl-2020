/* Generated by AN DISI Unibo */ 
package it.unibo.workerinroom

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Workerinroom ( name: String, scope: CoroutineScope ) : ActorBasicFsm( name, scope){
 	
	override fun getInitialState() : String{
		return "s0"
	}
		
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		
		var mapEmpty    = false
		val mapname     ="roomMapWithTable"
		
		var Curmove     = "" 
		var curmoveIsForward = false 
		
		var suspended = false
		
		var Tback = 0
		
		//val Tretry = 1000L
		//val Nretry = 5
		
		//var retryCount = 0
		
		var CurGoalX = ""
		var CurGoalY = ""
		
		//REAL ROBOT
		//var StepTime   = 1000 	 
		//var PauseTime  = 500 
		
		//VIRTUAL ROBOT
		var StepTime   = 330	//for virtual
		var PauseTime  = 500
		
		var PauseTimeL  = PauseTime.toLong()
		
		// From Planner declaration
		val planner = itunibo.jcc.planner.adapter.PlannerAdapter()
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						solve("consult('moves.pl')","") //set resVar	
						itunibo.planner.plannerUtil.initAI(  )
						itunibo.planner.moveUtils.loadRoomMap(myself ,mapname )
						itunibo.planner.moveUtils.showCurrentRobotState(  )
							val MapStr =  itunibo.planner.plannerUtil.getMapOneLine()  
						forward("modelUpdate", "modelUpdate(roomMap,$MapStr)" ,"resourcemodel" ) 
					}
					 transition( edgeName="goto",targetState="waitGoal", cond=doswitch() )
				}	 
				state("waitGoal") { //this:State
					action { //it:State
						println("Waiting for goal...")
					}
					 transition(edgeName="setGoalT0",targetState="setGoal",cond=whenDispatch("setGoal"))
				}	 
				state("setGoal") { //this:State
					action { //it:State
						println("here in setGoal")
						println("$name in ${currentState.stateName} | $currentMsg")
						if( checkMsgContent( Term.createTerm("setGoal(G)"), Term.createTerm("setGoal(G)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								println("Received setGoal")
								planner.planGoal(myself, payloadArg(0))
						}
					}
					 transition( edgeName="goto",targetState="suspendOrExecute", cond=doswitch() )
				}	 
				state("suspendOrExecute") { //this:State
					action { //it:State
						stateTimer = TimerActor("timer_suspendOrExecute", 
							scope, context!!, "local_tout_workerinroom_suspendOrExecute", 200.toLong() )
					}
					 transition(edgeName="checkSuspend1",targetState="executePlannedActions",cond=whenTimeout("local_tout_workerinroom_suspendOrExecute"))   
					transition(edgeName="checkSuspend2",targetState="suspended",cond=whenDispatch("suspend"))
				}	 
				state("suspended") { //this:State
					action { //it:State
						forward("modelChange", "modelChange(robot,h)" ,"resourcemodel" ) 
						println("suspended")
					}
					 transition(edgeName="resume3",targetState="executePlannedActions",cond=whenDispatch("resume"))
				}	 
				state("executePlannedActions") { //this:State
					action { //it:State
						solve("move(M)","") //set resVar	
						if(currentSolution.isSuccess()) { Curmove = getCurSol("M").toString() 
						              curmoveIsForward=(Curmove == "w")
						 }
						else
						{ Curmove = ""; curmoveIsForward=false
						 }
						println("executePlannedActions doing $Curmove")
					}
					 transition( edgeName="goto",targetState="checkAndDoAction", cond=doswitchGuarded({(Curmove.length>0) }) )
					transition( edgeName="goto",targetState="goalOk", cond=doswitchGuarded({! (Curmove.length>0) }) )
				}	 
				state("goalOk") { //this:State
					action { //it:State
						itunibo.planner.moveUtils.showCurrentRobotState(  )
							val MapStr =  itunibo.planner.plannerUtil.getMapOneLine()  
						forward("modelUpdate", "modelUpdate(roomMap,$MapStr)" ,"resourcemodel" ) 
						emit("goalReached", "goalReached" ) 
					}
					 transition( edgeName="goto",targetState="waitGoal", cond=doswitch() )
				}	 
				state("checkAndDoAction") { //this:State
					action { //it:State
						when (Curmove) {
							"w" -> 
						forward("do_w", "do_w" ,"workerinroom" ) 
							"a" -> 
						forward("do_a", "do_a" ,"workerinroom" ) 
							"d" -> 
						forward("do_d", "do_d" ,"workerinroom" ) 
						}
					}
					 transition(edgeName="t04",targetState="do_w",cond=whenDispatch("do_w"))
					transition(edgeName="t05",targetState="do_a",cond=whenDispatch("do_a"))
					transition(edgeName="t06",targetState="do_d",cond=whenDispatch("do_d"))
				}	 
				state("do_w") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("do_w"), Term.createTerm("do_w"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								delay(PauseTimeL)
								itunibo.planner.moveUtils.attemptTomoveAhead(myself ,StepTime )
						}
					}
					 transition(edgeName="t07",targetState="do_w_onStepOk",cond=whenDispatch("stepOk"))
					transition(edgeName="t08",targetState="do_w_onStepFail",cond=whenDispatch("stepFail"))
				}	 
				state("do_a") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("do_a"), Term.createTerm("do_a"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								itunibo.planner.moveUtils.rotate(myself ,Curmove, PauseTime )
						}
					}
					 transition( edgeName="goto",targetState="finalizeMove", cond=doswitch() )
				}	 
				state("do_d") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("do_d"), Term.createTerm("do_d"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								itunibo.planner.moveUtils.rotate(myself ,Curmove, PauseTime )
						}
					}
					 transition( edgeName="goto",targetState="finalizeMove", cond=doswitch() )
				}	 
				state("do_w_onStepOk") { //this:State
					action { //it:State
						itunibo.planner.moveUtils.updateMapAfterAheadOk(myself)
					}
					 transition( edgeName="goto",targetState="finalizeMove", cond=doswitch() )
				}	 
				state("finalizeMove") { //this:State
					action { //it:State
						solve("retract(move(M))","") //set resVar	
					}
					 transition( edgeName="goto",targetState="suspendOrExecute", cond=doswitch() )
				}	 
				state("do_w_onStepFail") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("stepFail(R,T)"), Term.createTerm("stepFail(Obs,Time)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								Tback=payloadArg(1).toString().toInt() / 2
								println("stepFailed ${payloadArg(1).toString()}")
						}
						itunibo.planner.moveUtils.backToCompensate(myself ,Tback, PauseTime )
					}
				}	 
			}
		}
}
