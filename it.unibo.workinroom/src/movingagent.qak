System movingagentsystem
mqttBroker "localhost" : 1883
// Commands for the worker
Dispatch setGoal	   : setGoal(G)
Dispatch suspend	   : suspend
Dispatch resume        : resume
// Events from the worker
Event goalReached      : goalReached
// User-defined messages
Dispatch modelChange : modelChange( TARGET, VALUE )
Dispatch modelUpdate : modelUpdate( TARGET, VALUE )
Dispatch stepOk : stepOk(V)
Dispatch stepFail : stepFail(R,T)
Dispatch onestep : onestep(DURATION)
Event sonarRobot : sonar( DISTANCE )
// Action messages
Dispatch w 	   : w // TODO Better handling of multiple actions!
Dispatch a 	   : a // TODO Better handling of multiple actions!
Dispatch d 	   : d // TODO Better handling of multiple actions!
// Infrastructure messages
Dispatch retry 		: retry
Dispatch replan 	: replan
Dispatch setGoal 	: setGoal
Context ctxMovingagent ip [host="localhost" port=8038] -mqtt
Context ctxDummyForMind ip [host="otherresourcelocalhost" port=8035] -mqtt
ExternalQActor resourcemodel context ctxDummyForMind
ExternalQActor onestepahead context ctxDummyForMind
QActor movebehavior context ctxMovingagent {
["

var Curmove     = \"\" 
var suspended = false

var CurGoal = \"\"

//var CurGoalX = \"\"
//var CurGoalY = \"\"


var mapEmpty    = false
val mapname     =\"roomMapWithTable\"

var Tback = 0

val Tretry = 1000L
val Nretry = 5

var replanned = false

var retryCount = 0

//REAL ROBOT
//var StepTime   = 1000
//var PauseTime  = 500 

//VIRTUAL ROBOT
var StepTime   = 330	//for virtual
var PauseTime  = 500

var PauseTimeL  = PauseTime.toLong()

// From Planner declaration
val planner = itunibo.jcc.planner.adapter.MovePlannerAdapter()
"]
	State s0 initial {
		solve( consult("moves.pl") ) run itunibo.planner.plannerUtil.initAI() run itunibo.planner.moveUtils.loadRoomMap( myself, mapname ) run itunibo.planner.moveUtils.showCurrentRobotState() ["val MapStr =  itunibo.planner.plannerUtil.getMapOneLine()"] forward resourcemodel -m modelUpdate : modelUpdate(roomMap,$MapStr)
		//solve( consult("moves.pl") )
		//run itunibo.planner.plannerUtil.initAI()
		//run itunibo.planner.moveUtils.loadRoomMap( myself, mapname )
		//run itunibo.planner.moveUtils.showCurrentRobotState()
		//["val MapStr =  itunibo.planner.plannerUtil.getMapOneLine()"]
		//forward resourcemodel -m modelUpdate : modelUpdate(roomMap,$MapStr)
	}
 	Goto waitGoal
 	
 	State waitGoal {
 		println("Waiting for goal...")	
 	}
 	Transition setGoalT whenMsg setGoal -> setGoal
	 
	State setGoal {
		println("here in setGoal")
		printCurrentMessage
		onMsg( setGoal : setGoal(G) ) {
			println("Received setGoal")
			["planner.planGoal(myself, payloadArg(0))"]
			//run itunibo.planner.plannerUtil.setGoal(payloadArg(0), payloadArg(1))
  			//run itunibo.planner.moveUtils.doPlan( myself )
  			// To allow replanning
  			["CurGoal = payloadArg(0)"]
  			//["CurGoalX = payloadArg(0)"]
  			//["CurGoalY = payloadArg(1)"]
 			//solve( dialog(F) )
		}
		
		// TODO What if no plan can be calculated?
   	}
   	Goto suspendOrExecute
	//Goto executePlannedActions //doGoHomeActions 
	
	State suspendOrExecute {}
		Transition checkSuspend 
	   		whenTime 200 -> executePlannedActions
	   		whenMsg suspend -> suspended	
	
	State suspended {
		forward resourcemodel -m modelChange : modelChange(robot,h) println("suspended")
		// Send stop command
		//forward resourcemodel -m modelChange : modelChange(robot,h)
		//println("suspended")		
	}
	Transition resume whenMsg resume -> resume // suspendOrExecute ?
	
	State resume {
	}
	Goto executePlannedActions
	
	State executePlannedActions{
		//solve( showMoves ) 
		// retract only after it's executed
		solve( move(M) )
		//solve( retract( move(M) ) )
		ifSolved {  
			["Curmove = getCurSol(\"M\").toString()"]
		}
		else { ["Curmove = \"\""] } 
		println("executePlannedActions doing $Curmove")
 	}
   
	Goto checkAndDoAction if "(Curmove.length>0) " else goalOk 

 	State goalOk{
 		run itunibo.planner.moveUtils.showCurrentRobotState() ["	val MapStr =  itunibo.planner.plannerUtil.getMapOneLine()  "] forward resourcemodel -m modelUpdate : modelUpdate(roomMap,$MapStr)
 		//run itunibo.planner.moveUtils.showCurrentRobotState()
	 	//["	val MapStr =  itunibo.planner.plannerUtil.getMapOneLine()  "]
	 	//forward resourcemodel -m modelUpdate : modelUpdate(roomMap,$MapStr)
	 	
	 	emit goalReached : goalReached
 	}
 	Goto waitGoal
 	
	State checkAndDoAction{
		solve( assert( curmove($Curmove) ) )
		//["when (Curmove) {"]
		// TODO Assuming only one solves
		//["	\"w\" -> "]
		solve( curmove( w ) )
		ifSolved {
			forward movebehavior -m w : $Curmove
		} // TODO else?
		//["	\"a\" -> "]
		solve( curmove( a ) )
		ifSolved {
			forward movebehavior -m a : $Curmove
		} // TODO else?
		//["	\"d\" -> "]
		solve( curmove( d ) )
		ifSolved {
			forward movebehavior -m d : $Curmove
		} // TODO else?
		solve( retract( curmove($Curmove) ) )
		//["}"]
	}
	Transition t0 
		whenMsg w -> w // TODO Better handling of multiple actions!
		whenMsg a -> a_d // TODO Better handling of multiple actions!
		whenMsg d -> a_d // TODO Better handling of multiple actions!
	 	
	State w {
		onMsg(w : w) { // TODO Better handling of multiple actions!
			// from "agent" code
			delayVar PauseTimeL run itunibo.planner.moveUtils.attemptTomoveAhead(myself, StepTime)
		}
	}
	Transition t0
		// from "on(...)" clauses on action w
		whenMsg stepOk	-> w_onStepOk
		whenMsg stepFail	-> w_onStepFail
	
	State a_d {
		onMsg(a : a) { // TODO Better handling of multiple actions!
			// from "agent" code
			run itunibo.planner.moveUtils.rotate(myself, Curmove, PauseTime)
		}
		onMsg(d : d) { // TODO Better handling of multiple actions!
			// from "agent" code
			run itunibo.planner.moveUtils.rotate(myself, Curmove, PauseTime)
		}
	}
	Goto finalizeMove // No "on(...)" clause specified
	
	
	 	
	State w_onStepOk{ // TODO HANDLE MESSAGE NAMES BETTER!!!
		// from "agent" code
		run itunibo.planner.moveUtils.updateMapAfterAheadOk(myself)
		// TODO Check consistency with QActor guarded transitions policy
	}
	Goto finalizeMove
	State w_onStepFail{ // TODO HANDLE MESSAGE NAMES BETTER!!!
		// from "agent" code
		onMsg( stepFail : stepFail(Obs,Time) ) { ["Tback=payloadArg(1).toString().toInt() / 2"] println("stepFailed ${payloadArg(1).toString()}") run itunibo.planner.moveUtils.backToCompensate(myself, Tback, PauseTime) }
		// TODO Check consistency with QActor guarded transitions policy
		["if (retryCount < Nretry) {"]
			forward movebehavior -m retry : retry
		["}"]
		["else if (!replanned && (retryCount >= Nretry)) {"]
			forward movebehavior -m replan : replan
		["}"]
		["else if (replanned) {"]
			forward movebehavior -m setGoal : setGoal
		["}"]
	}
	Transition compensation
		whenMsg retry  -> w_retry // TODO Handles only one compensation per ACTION (on a single Effect)!!!
		whenMsg replan  -> w_replan // TODO Handles only one compensation per ACTION (on a single Effect)!!!
		whenMsg setGoal  -> w_setGoal // TODO Handles only one compensation per ACTION (on a single Effect)!!!
	
	
	State w_retry { // TODO Currently only one compensation per type allowed (specify in grammar?)
		["retryCount++"] delayVar Tretry
	}
	Goto suspendOrExecute
	
	State w_replan { // TODO Currently only one compensation per type allowed (specify in grammar?)
		["replanned = true"] run itunibo.planner.moveUtils.setObstacleOnCurrentDirection(myself) run itunibo.planner.plannerUtil.showMap()
		// Clear previous plan
		solve( retractall( move(M) ) )
		forward movebehavior -m setGoal : setGoal($CurGoal)
	}
	Transition t0 whenMsg setGoal -> setGoal
	
	State w_setGoal { // TODO Currently only one compensation per type allowed (specify in grammar?)
		// Clear previous plan
		solve( retractall( move(M) ) )
		forward movebehavior -m setGoal : setGoal(pos(0,0))
	}
	Transition t0 whenMsg setGoal -> setGoal
	
	 	
	State finalizeMove {
		// Move actually succeded
		//["retryCount = 0"]
		solve( retract( move(M) ) )
	}
	Goto suspendOrExecute
	
	/*
	
	State retry { // TODO Really needed?
			
		//println("retry ${Curmove} in ${Tretry} ms")
		//["retryCount++"]
		
//		println("MOVES BEFORE REASSERT")
//		solve( showMoves ) 
//		println("END MOVES BEFORE REASSERT")

//		// reassert current move
//		solve( assert( move($Curmove) ) )
//		// 
//		println("MOVES AFTER REASSERT")
//		solve( showMoves ) 
//		println("END MOVES AFTER REASSERT")
	}
	//Transition t0 whenTimeVar Tretry -> suspendOrExecute
	Goto suspendOrExecute
	
	State replan {
		
		println("replanning")
		
		//["retryCount = 0"]
		// Puts the obstacle on the map
		//run itunibo.planner.moveUtils.setObstacleOnCurrentDirection(myself)
		//run itunibo.planner.plannerUtil.showMap()  //
		// Clear previous plan
		solve( retractall( move(M) ) )
		forward movebehavior -m setGoal : setGoal($CurGoal)
	}
	Transition t0 whenMsg setGoal -> setGoal
	
	*/
}
