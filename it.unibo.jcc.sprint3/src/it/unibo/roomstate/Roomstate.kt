/* Generated by AN DISI Unibo */ 
package it.unibo.roomstate

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Roomstate ( name: String, scope: CoroutineScope ) : ActorBasicFsm( name, scope){
 	
	override fun getInitialState() : String{
		return "s0"
	}
		
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						solve("consult('roomState.pl')","") //set resVar	
						solve("showContent","") //set resVar	
						itunibo.jcc.coap.roomstate.roomModelFridgeObserver.create(myself)
						itunibo.jcc.coap.roomstate.roomModelResourceCoap.create(myself ,"roomstate" )
					}
					 transition( edgeName="goto",targetState="waitModelChange", cond=doswitch() )
				}	 
				state("waitModelChange") { //this:State
					action { //it:State
					}
					 transition(edgeName="t00",targetState="updateModel",cond=whenDispatch("take"))
					transition(edgeName="t01",targetState="updateModel",cond=whenDispatch("put"))
					transition(edgeName="t02",targetState="updateModel",cond=whenDispatch("goto"))
				}	 
				state("updateModel") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						if( checkMsgContent( Term.createTerm("take(Item,Location)"), Term.createTerm("take(Item,Location)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								if(payloadArg(1) == "fridge"){ forward("take", "take(${payloadArg(0)})" ,"fridgeresourcemodel" ) 
								 }
								else
								 { solve("retract(at(${payloadArg(0)},${payloadArg(1)}))","") //set resVar	
								 if(currentSolution.isSuccess()) { itunibo.jcc.coap.roomstate.roomModelResourceCoap.updateState(  )
								  }
								 else
								 { println("*** Can't take non-existing content! ***")
								  }
								  }
						}
						if( checkMsgContent( Term.createTerm("put(Item,Location)"), Term.createTerm("put(Item,Location)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								if(payloadArg(1) == "fridge"){ forward("put", "put(${payloadArg(0)})" ,"fridgeresourcemodel" ) 
								 }
								else
								 { solve("assert(at(${payloadArg(0)},${payloadArg(1)}))","") //set resVar	
								 if(currentSolution.isSuccess()) { itunibo.jcc.coap.roomstate.roomModelResourceCoap.updateState(  )
								  }
								  }
						}
						if( checkMsgContent( Term.createTerm("goto(Location)"), Term.createTerm("goto(Location)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								if(currentSolution.isSuccess()) { solve("retract(at(butler,X))","") //set resVar	
								solve("assert(at(butler,${payloadArg(0)}))","") //set resVar	
								 }
						}
						solve("showContent","") //set resVar	
					}
					 transition( edgeName="goto",targetState="waitModelChange", cond=doswitch() )
				}	 
			}
		}
}
