System butlermind

mqttBroker "localhost" : 1883    //192.168.1.18  192.168.43.229

// From the maitre (REQUIREMENTS)

Dispatch prepare : prepare
Dispatch addFood : addFood(Food)
Dispatch clear : clear

Dispatch stop : stop
Dispatch reactivate : reactivate

// From/to carrierbehavior
Dispatch setGoal : setGoal(G)
Dispatch suspend : suspend
Dispatch resume : resume
Dispatch goalReached : goalReached

// To roomstate
Dispatch take : take(Item, Location)
Dispatch put : put(Item, Location)
Dispatch goto : goto(Location)

Context ctxButlermind     ip [host="localhost" port=8105]  -mqtt
Context ctxDummyForFridge     ip [host="localhost" port=8095]  -mqtt
Context ctxDummyForCarrier     ip [host="localhost" port=8042]  -mqtt

ExternalQActor fridgeresourcemodel context ctxDummyForFridge // FRIDGE resource model!

ExternalQActor carrierbehavior context ctxDummyForCarrier

QActor roomstate context ctxButlermind {
	
	State s0 initial {		  
		solve( consult("roomState.pl") )
		solve( showContent )
		// Register to fridge COAP resource
		run itunibo.jcc.coap.roomstate.roomModelFridgeObserver.create(myself)
		// Create COAP resource
		run itunibo.jcc.coap.roomstate.roomModelResourceCoap.create( myself, "roomstate" ) //CoAP access
	}
	Goto waitModelChange
	
	State waitModelChange{ }
	Transition t0 whenMsg take -> updateModel
			 	  whenMsg put -> updateModel
	              whenMsg goto -> updateModel

	// TODO at(Item, butler) when carried?

	State updateModel{
		printCurrentMessage
		// TODO
		onMsg( take : take(Item, Location) ) {
			if "payloadArg(1) == \"fridge\""  {	
				// TODO Update via COAP?
				forward fridgeresourcemodel -m take : take($payloadArg(0)) // FRIDGE resource model!
			}
			else {
				solve( retract( at( $payloadArg(0), $payloadArg(1) ) ) )
				ifSolved {
					run itunibo.jcc.coap.roomstate.roomModelResourceCoap.updateState()
				}
				else {
					println("*** Can't take non-existing content! ***")
				}
			}
		}
		onMsg( put : put(Item, Location) ) {
			if "payloadArg(1) == \"fridge\""  { 				
				// TODO Update via COAP?
				forward fridgeresourcemodel -m put : put($payloadArg(0)) // FRIDGE resource model!
			}
			else {
				solve( assert( at( $payloadArg(0), $payloadArg(1) ) ) )
				// Always solved
				ifSolved {
					run itunibo.jcc.coap.roomstate.roomModelResourceCoap.updateState()
				}
			}
		}
		onMsg( goto : goto(Location) ) { // TODO Untested
			println("butlermind received goto(${payloadArg(0)})")
			solve( retractall( at( butler, X ) ) ) // TODO Should never be more than one
			// Now sending goto(Location) to LEAVE current location and put(butler, X) to assert new location 
//			solve( assert( at( butler, $payloadArg(0) ) ) ) // Always solved
			ifSolved {
				run itunibo.jcc.coap.roomstate.roomModelResourceCoap.updateState()
			}
		}
		
		solve( showContent )
	}
    Goto  waitModelChange
}

// TODO Update roomstate from carrier!

QActor butlermind context ctxButlermind {
	State s0 initial {

		// TODO
	  
//		solve( consult("roomState.pl") )
//		solve( showContent )
//		// Register to fridge COAP resource
//		run itunibo.jcc.coap.roomstate.roomModelFridgeObserver.create(myself)
//		// Create COAP resource
////		run itunibo.jcc.coap.fridge.fridgeResourceCoap.create( myself, "fridgeresource" ) //CoAP access
	}
	Goto waitCommand
	 
	State waitCommand{ }
	Transition t0 whenMsg prepare -> doPrepare
				  whenMsg addFood -> doAddFood
				  whenMsg clear -> doClear
				  whenMsg stop -> suspend // TODO Workaround

	State doPrepare{
		
		// TODO Goals from prolog file
		
		// One goal at a time (current planner too slow for conjunctions of goals)
		forward carrierbehavior -m setGoal : setGoal( at(pizza, table) )
		forward carrierbehavior -m setGoal : setGoal( at(caviar, table) )
		forward carrierbehavior -m setGoal : setGoal( at(dishes, table) )
		forward carrierbehavior -m setGoal : setGoal( at(butler, home) )
	}
	Goto handleSuspendResume
	
	State doAddFood {
		onMsg (addFood : addFood(Food)) {
			// Check if food is in fridge
			["val client = itunibo.jcc.coap.fridge.client.MyCoapClient(\"localhost\", 5684, \"fridgeresource\")"]
			["client.setUriParams(payloadArg(0))"]
			["val qty = Integer.parseInt(client.synchGet())"]
			["if (qty == 0)"]
			["{"]
				// TODO Send error to butler (request/response?)
				println("butlermind | food not present in fridge!")
			["}"]
			["else"]
			["{"]
				forward carrierbehavior -m setGoal : setGoal( at($payloadArg(0), table) )
				forward carrierbehavior -m setGoal : setGoal( at(butler, home) )
			["}"]
		}
	}
	Goto handleSuspendResume
	
	State doClear {
		
		onMsg (clear : clear) {
			
//			println("butlermind | doClear")
			
//			["val client = itunibo.jcc.coap.fridge.client.MyCoapClient(\"localhost\", 5685, \"roomstate\")"]
//			["client.setUriParams(\"table\")"]
//			["val state = client.synchGet()"]
			
			run itunibo.jcc.butlermind.butlerUtil.setClearGoals(myself, "carrierbehavior")
		}
	}
	Goto handleSuspendResume
	
	State handleSuspendResume{
		println("butlermind | handleSuspendResume")
	}
	Transition t0 whenEvent goalReached -> waitCommand
				  whenMsg stop -> suspend
				  
	State suspend{
		println("butlermind | suspend")
		forward carrierbehavior -m suspend : suspend
	}
	Transition t0 whenMsg reactivate -> resume
	
	State resume{
		println("butlermind | resume")
		forward carrierbehavior -m resume : resume
	}
	Goto handleSuspendResume
}