System butlermind

mqttBroker "localhost" : 1883    //192.168.1.18  192.168.43.229 

Dispatch take : take(Item, Location)
Dispatch put : put(Item, Location)

Context ctxButlermind     ip [host="localhost" port=8105]  -mqtt
Context ctxFridge     ip [host="localhost" port=8095]  -mqtt

ExternalQActor resourcemodel context ctxFridge // FRIDGE resource model!

QActor roomstate context ctxButlermind {
	
	State s0 initial {		  
		solve( consult("roomState.pl") )
		solve( showContent )
		// Create COAP resource
//		run itunibo.jcc.coap.fridge.fridgeResourceCoap.create( myself, "fridgeresource" ) //CoAP access
				
		// Test
		delay 2000
		forward resourcemodel -m put : put(sausage)
	}
	Goto waitModelChange
	 
	State waitModelChange{ }
	Transition t0 whenMsg take -> updateModel
			 	  whenMsg put -> updateModel
//	              whenMsg modelUpdate -> updateModel

	State updateModel{
		printCurrentMessage
		// TODO
		onMsg( take : take(Item, Location) ) {
			solve( retract( at( $payloadArg(0), $payloadArg(1) ) ) )
			ifSolved {
//				run itunibo.jcc.coap.fridge.fridgeResourceCoap.resourceCoap.updateState()
				solve( showContent )
			}
			else {
				println("*** Can't take non-existing content! ***")
			}
			// TODO Update COAP resource
			//run itunibo.robot.resourceModelSupport.updateRobotModel( myself, payloadArg(1) )
		}
		onMsg( put : put(Item, Location) ) {
			solve( assert( at( $payloadArg(0), $payloadArg(1) ) ) )
			// Always solved
			ifSolved {
//				run itunibo.jcc.coap.fridge.fridgeResourceCoap.resourceCoap.updateState()
				solve( showContent )
			}
			// TODO Update COAP resource
			//run itunibo.robot.resourceModelSupport.updateRobotModel( myself, payloadArg(1) )
		}
	}
    Goto  waitModelChange

//
//	State updateModel{  
//		printCurrentMessage
//		onMsg( modelUpdate : modelUpdate(robot,V ) ) {
//			run itunibo.robot.resourceModelSupport.updateRobotModel( myself, payloadArg(1) )
//		}
//		onMsg( modelUpdate : modelUpdate(sonarRobot,V ) ) {
//			run itunibo.robot.resourceModelSupport.updateSonarRobotModel( myself, payloadArg(1) )
//		}
//		onMsg( modelUpdate : modelUpdate(roomMap,V ) ) {  //JULY19
//			println("modelUpdate roomMap  ")
//			run itunibo.robot.resourceModelSupport.updateRoomMapModel( myself, payloadArg(1) )
//		}
//	} 
//    Goto  waitModelChange
//    
//	State changeModel{  
//		//printCurrentMessage 
//		//ROBOT MOVE
//		onMsg( modelChange : modelChange( robot,V ) ) { // V= w | ...
//			run itunibo.robot.resourceModelSupport.updateRobotModel( myself, payloadArg(1) )
//			emit local_modelChanged : modelChanged(  robot,  $payloadArg(1))  //for the robotmind
//		} 
//		//SONAR DATA  
////		onMsg( modelChange : modelChange( sonarRobot,V ) ) { // V= w | ...
////			run itunibo.robot.resourceModelSupport.updateSonarRobotModel( myself, payloadArg(1) )
////		}
//	}  
//	Goto  waitModelChange
}